(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}




// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**_UNUSED/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**_UNUSED/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**/
	if (typeof x.$ === 'undefined')
	//*/
	/**_UNUSED/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0 = 0;
var _Utils_Tuple0_UNUSED = { $: '#0' };

function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2_UNUSED(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3_UNUSED(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr(c) { return c; }
function _Utils_chr_UNUSED(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil = { $: 0 };
var _List_Nil_UNUSED = { $: '[]' };

function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons_UNUSED(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log = F2(function(tag, value)
{
	return value;
});

var _Debug_log_UNUSED = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString(value)
{
	return '<internals>';
}

function _Debug_toString_UNUSED(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.ib.b$ === region.bp.b$)
	{
		return 'on line ' + region.ib.b$;
	}
	return 'on lines ' + region.ib.b$ + ' through ' + region.bp.b$;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**_UNUSED/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
function _Json_unwrap_UNUSED(value) { return value.a; }

function _Json_wrap(value) { return value; }
function _Json_unwrap(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.hc,
		impl.iR,
		impl.ih,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**_UNUSED/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**/
	var node = args['node'];
	//*/
	/**_UNUSED/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS
//
// For some reason, tabs can appear in href protocols and it still works.
// So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
// in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
// so freaky.
//
// Pulling the regular expressions out to the top level gives a slight speed
// boost in small benchmarks (4-10%) but hoisting values to reduce allocation
// can be unpredictable in large programs where JIT may have a harder time with
// functions are not fully self-contained. The benefit is more that the js and
// js_html ones are so weird that I prefer to see them near each other.


var _VirtualDom_RE_script = /^script$/i;
var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;


function _VirtualDom_noScript(tag)
{
	return _VirtualDom_RE_script.test(tag) ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return _VirtualDom_RE_on_formAction.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return _VirtualDom_RE_js.test(value)
		? /**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return _VirtualDom_RE_js_html.test(value)
		? /**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlJson(value)
{
	return (typeof _Json_unwrap(value) === 'string' && _VirtualDom_RE_js_html.test(_Json_unwrap(value)))
		? _Json_wrap(
			/**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		) : value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		aY: func(record.aY),
		eK: record.eK,
		eA: record.eA
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.aY;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.eK;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.eA) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.hc,
		impl.iR,
		impl.ih,
		function(sendToApp, initialModel) {
			var view = impl.iU;
			/**/
			var domNode = args['node'];
			//*/
			/**_UNUSED/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.hc,
		impl.iR,
		impl.ih,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.eH && impl.eH(sendToApp)
			var view = impl.iU;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.aS);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.eO) && (_VirtualDom_doc.title = title = doc.eO);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.hF;
	var onUrlRequest = impl.hG;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		eH: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.fL === next.fL
							&& curr.fn === next.fn
							&& curr.fK.a === next.fK.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		hc: function(flags)
		{
			return A3(impl.hc, flags, _Browser_getUrl(), key);
		},
		iU: impl.iU,
		iR: impl.iR,
		ih: impl.ih
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { g1: 'hidden', gD: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { g1: 'mozHidden', gD: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { g1: 'msHidden', gD: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { g1: 'webkitHidden', gD: 'webkitvisibilitychange' }
		: { g1: 'hidden', gD: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		aM: _Browser_getScene(),
		aP: {
			bD: _Browser_window.pageXOffset,
			bj: _Browser_window.pageYOffset,
			eS: _Browser_doc.documentElement.clientWidth,
			fj: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		eS: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		fj: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			aM: {
				eS: node.scrollWidth,
				fj: node.scrollHeight
			},
			aP: {
				bD: node.scrollLeft,
				bj: node.scrollTop,
				eS: node.clientWidth,
				fj: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			aM: _Browser_getScene(),
			aP: {
				bD: x,
				bj: y,
				eS: _Browser_doc.documentElement.clientWidth,
				fj: _Browser_doc.documentElement.clientHeight
			},
			cF: {
				bD: x + rect.left,
				bj: y + rect.top,
				eS: rect.width,
				fj: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.fz) { flags += 'm'; }
	if (options.e3) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File !== 'undefined' && value instanceof File)
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return $elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElement('a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.href = objectUrl;
		node.download = name;
		_File_click(node);
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.href = href;
		node.download = '';
		node.origin === location.origin || (node.target = '_blank');
		_File_click(node);
	});
}


// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
	// all other browsers can just run `new Blob([bytes])` directly with no problem
	//
	return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
	// all other browsers have MouseEvent and do not need this conditional stuff
	//
	if (typeof MouseEvent === 'function')
	{
		node.dispatchEvent(new MouseEvent('click'));
	}
	else
	{
		var event = document.createEvent('MouseEvents');
		event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.body.appendChild(node);
		node.dispatchEvent(event);
		document.body.removeChild(node);
	}
}


// UPLOAD

var _File_node;

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		_File_click(_File_node);
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.multiple = true;
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		_File_click(_File_node);
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}




var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.d7.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.d7.b, xhr)); });
		$elm$core$Maybe$isJust(request.eP) && _Http_track(router, xhr, request.eP.a);

		try {
			xhr.open(request.er, request.f1, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.f1));
		}

		_Http_configureRequest(xhr, request);

		request.aS.a && xhr.setRequestHeader('Content-Type', request.aS.a);
		xhr.send(request.aS.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.ed; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.eM.a || 0;
	xhr.responseType = request.d7.d;
	xhr.withCredentials = request.gj;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		f1: xhr.responseURL,
		ic: xhr.status,
		id: xhr.statusText,
		ed: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			h2: event.loaded,
			h5: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			hO: event.loaded,
			h5: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}var $elm$core$Basics$EQ = 1;
var $elm$core$Basics$GT = 2;
var $elm$core$Basics$LT = 0;
var $elm$core$List$cons = _List_cons;
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === -2) {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Result$Err = function (a) {
	return {$: 1, a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 0, a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Basics$False = 1;
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Maybe$Nothing = {$: 1};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 0:
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 1) {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 1:
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 2:
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.D) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.L),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.L);
		} else {
			var treeLen = builder.D * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.O) : builder.O;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.D);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.L) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.L);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{O: nodeList, D: (len / $elm$core$Array$branchFactor) | 0, L: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = 0;
var $elm$core$Result$isOk = function (result) {
	if (!result.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 1, a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = $elm$core$Basics$identity;
var $elm$url$Url$Http = 0;
var $elm$url$Url$Https = 1;
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {bT: fragment, fn: host, b4: path, fK: port_, fL: protocol, ca: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 1) {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		0,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		1,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = $elm$core$Basics$identity;
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return 0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0;
		return A2($elm$core$Task$map, tagger, task);
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			A2($elm$core$Task$map, toMessage, task));
	});
var $elm$browser$Browser$element = _Browser_element;
var $author$project$Main$Example = 2;
var $author$project$Scripta$Language$MicroLaTeXLang = 1;
var $author$project$PDF$PrintWaiting = 0;
var $author$project$PDF$TarFileWaiting = 0;
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Dict$RBEmpty_elm_builtin = {$: -2};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $author$project$Compiler$AbstractDifferentialParser$init = F3(
	function (f, initialData, content) {
		var chunks = f.d_(content);
		var parsed_ = A2($elm$core$List$map, f.dZ, chunks);
		var tree_ = f.d8(parsed_);
		var _v0 = A2(f.dQ, initialData, tree_);
		var newAccumulator = _v0.a;
		var tree = _v0.b;
		return {
			dR: newAccumulator,
			di: chunks,
			cP: initialData,
			dC: initialData.fs,
			eq: f.ea(tree),
			cX: parsed_,
			eQ: tree
		};
	});
var $author$project$Compiler$DifferentialParser$default = function (lang) {
	return {fs: lang, hp: '', is: '', iT: 4};
};
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === -2) {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1) {
					case 0:
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 1:
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {bK: col, cz: contextStack, b7: problem, cg: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 0};
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.hB, s.cg, s.bK, s.fV);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.b)) : A3(
			$elm$parser$Parser$Advanced$Good,
			_Utils_cmp(s.hB, newOffset) < 0,
			0,
			{bK: newCol, b: s.b, hb: s.hb, hB: newOffset, cg: newRow, fV: s.fV});
	};
};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$chompUntil = function (str) {
	return $elm$parser$Parser$Advanced$chompUntil(
		$elm$parser$Parser$toToken(str));
};
var $elm$parser$Parser$Advanced$getOffset = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.hB, s);
};
var $elm$parser$Parser$getOffset = $elm$parser$Parser$Advanced$getOffset;
var $elm$parser$Parser$Advanced$getSource = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.fV, s);
};
var $elm$parser$Parser$getSource = $elm$parser$Parser$Advanced$getSource;
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var p = _v2.a;
				var x = _v2.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v2.a;
				var a = _v2.b;
				var s1 = _v2.c;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p1 || p2,
						A2(func, a, b),
						s2);
				}
			}
		};
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, a, s);
	};
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $author$project$Parser$Utility$keyedParagraphParser = function (headline) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						F3(
							function (start, end, src) {
								return A3($elm$core$String$slice, start, end, src);
							})),
					$elm$parser$Parser$chompUntil(headline)),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('\n\n'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {bK: col, b7: problem, cg: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.cg, p.bK, p.b7);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 0:
					return list;
				case 1:
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0;
		var _v1 = parse(
			{bK: 1, b: _List_Nil, hb: 1, hB: 0, cg: 1, fV: src});
		if (!_v1.$) {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (!_v0.$) {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $author$project$Parser$Utility$getKeyedParagraph = F2(
	function (headline, target) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$Parser$Utility$keyedParagraphParser(headline),
			target);
		if (_v0.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var data = _v0.a;
			return $elm$core$Maybe$Just(data);
		}
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$toLower = _String_toLower;
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$Compiler$DifferentialParser$makeInitialData = F2(
	function (inclusionData, lang) {
		var keys = $elm$core$Dict$keys(inclusionData);
		var macroKeys = A2(
			$elm$core$List$filter,
			function (k) {
				return A2(
					$elm$core$String$contains,
					'macro',
					$elm$core$String$toLower(k));
			},
			keys);
		var _v0 = $elm$core$List$head(macroKeys);
		if (_v0.$ === 1) {
			return $author$project$Compiler$DifferentialParser$default(lang);
		} else {
			var fileName = _v0.a;
			var _v1 = A2($elm$core$Dict$get, fileName, inclusionData);
			if (_v1.$ === 1) {
				return $author$project$Compiler$DifferentialParser$default(lang);
			} else {
				var macroText_ = _v1.a;
				var macroText = macroText_ + '\n\n';
				var _v2 = macroText;
				return {
					fs: lang,
					hp: A2(
						$elm$core$Maybe$withDefault,
						'',
						A2($author$project$Parser$Utility$getKeyedParagraph, '|| mathmacros', macroText)),
					is: A2(
						$elm$core$Maybe$withDefault,
						'',
						A2($author$project$Parser$Utility$getKeyedParagraph, '|| textmacros', macroText)),
					iT: 4
				};
			}
		}
	});
var $author$project$Parser$Block$ExpressionBlock = $elm$core$Basics$identity;
var $author$project$Parser$Block$setLineNumber = F2(
	function (k, _v0) {
		var data = _v0;
		return _Utils_update(
			data,
			{eo: k});
	});
var $author$project$Compiler$DifferentialParser$changeLineNumber = F2(
	function (delta, block) {
		var lineNumber = block.eo;
		return A2($author$project$Parser$Block$setLineNumber, lineNumber + delta, block);
	});
var $author$project$Compiler$DifferentialParser$chunkLevel = function (block) {
	return block.hb + ((_Utils_eq(
		block.fA,
		$elm$core$Maybe$Just('item')) || _Utils_eq(
		block.fA,
		$elm$core$Maybe$Just('numbered'))) ? 1 : 0);
};
var $author$project$Markup$isVerbatimLine = function (str) {
	return (A2($elm$core$String$left, 2, str) === '||') || ((A2($elm$core$String$left, 3, str) === '```') || ((A2($elm$core$String$left, 16, str) === '\\begin{equation}') || ((A2($elm$core$String$left, 15, str) === '\\begin{aligned}') || ((A2($elm$core$String$left, 15, str) === '\\begin{comment}') || ((A2($elm$core$String$left, 12, str) === '\\begin{code}') || ((A2($elm$core$String$left, 12, str) === '\\begin{verbatim}') || ((A2($elm$core$String$left, 18, str) === '\\begin{mathmacros}') || ((A2($elm$core$String$left, 14, str) === '\\begin{iframe}') || (A2($elm$core$String$left, 2, str) === '$$')))))))));
};
var $elm$core$String$lines = _String_lines;
var $author$project$Parser$PrimitiveLaTeXBlock$finalize = function (state) {
	return {
		ai: $elm$core$List$reverse(state.T),
		am: state.am,
		k: state.k
	};
};
var $author$project$Parser$PrimitiveLaTeXBlock$init = function (lines) {
	return {bG: $elm$core$Maybe$Nothing, T: _List_Nil, cA: -1, af: 0, am: _List_Nil, hb: 0, dB: '0, START', c: _List_Nil, en: -1, eo: -1, X: lines, ey: 0, h7: '', k: _List_Nil};
};
var $author$project$Parser$PrimitiveLaTeXBlock$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$MicroLaTeX$Parser$ClassifyBlock$CBeginBlock = function (a) {
	return {$: 0, a: a};
};
var $author$project$MicroLaTeX$Parser$ClassifyBlock$CEndBlock = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroLaTeX$Parser$ClassifyBlock$CMathBlockDelim = {$: 3};
var $author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock = function (a) {
	return {$: 2, a: a};
};
var $author$project$Parser$PrimitiveLaTeXBlock$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$PrimitiveLaTeXBlock$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$MicroLaTeX$Parser$ClassifyBlock$CEmpty = {$: 6};
var $author$project$MicroLaTeX$Parser$ClassifyBlock$CPlainText = {$: 5};
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					func(a),
					s1);
			} else {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			}
		};
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 8, a: a};
};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.cg, s.bK, x, s.b));
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$core$Basics$not = _Basics_not;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.hB, s.cg, s.bK, s.fV);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{bK: newCol, b: s.b, hb: s.hb, hB: newOffset, cg: newRow, fV: s.fV});
	};
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $author$project$MicroLaTeX$Parser$ClassifyBlock$beginBlockParser = A2(
	$elm$parser$Parser$map,
	$author$project$MicroLaTeX$Parser$ClassifyBlock$CBeginBlock,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('\\begin{')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('}'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$Parser$ClassifyBlock$endBlockParser = A2(
	$elm$parser$Parser$map,
	$author$project$MicroLaTeX$Parser$ClassifyBlock$CEndBlock,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('\\end{')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('}'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$Parser$ClassifyBlock$LXItem = {$: 0};
var $author$project$MicroLaTeX$Parser$ClassifyBlock$itemParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock($author$project$MicroLaTeX$Parser$ClassifyBlock$LXItem)),
	$elm$parser$Parser$symbol('\\item'));
var $author$project$MicroLaTeX$Parser$ClassifyBlock$mathBlockDelimParser = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return $author$project$MicroLaTeX$Parser$ClassifyBlock$CMathBlockDelim;
	},
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$symbol('$$')));
var $author$project$MicroLaTeX$Parser$ClassifyBlock$LXNumbered = {$: 1};
var $author$project$MicroLaTeX$Parser$ClassifyBlock$numberedParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock($author$project$MicroLaTeX$Parser$ClassifyBlock$LXNumbered)),
	$elm$parser$Parser$symbol('\\numbered'));
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (!_v1.$) {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
	};
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $author$project$MicroLaTeX$Parser$ClassifyBlock$LXOrdinaryBlock = function (a) {
	return {$: 3, a: a};
};
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return function (s) {
		var _v0 = A5(_Parser_findSubString, str, s.hB, s.cg, s.bK, s.fV);
		var newOffset = _v0.a;
		var newRow = _v0.b;
		var newCol = _v0.c;
		var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.fV) : newOffset;
		return A3(
			$elm$parser$Parser$Advanced$Good,
			_Utils_cmp(s.hB, adjustedOffset) < 0,
			0,
			{bK: newCol, b: s.b, hb: s.hb, hB: adjustedOffset, cg: newRow, fV: s.fV});
	};
};
var $elm$parser$Parser$chompUntilEndOr = $elm$parser$Parser$Advanced$chompUntilEndOr;
var $author$project$MicroLaTeX$Parser$ClassifyBlock$ordinaryBlockParser = A2(
	$elm$parser$Parser$map,
	function (s) {
		return $author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$Parser$ClassifyBlock$LXOrdinaryBlock(s));
	},
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('| ')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntilEndOr(' '))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$Parser$ClassifyBlock$pseudoBlockParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock($author$project$MicroLaTeX$Parser$ClassifyBlock$LXItem)),
	$elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$symbol('\\section'),
				$elm$parser$Parser$symbol('\\subsection'),
				$elm$parser$Parser$symbol('\\subsubsection'),
				$elm$parser$Parser$symbol('\\image'),
				$elm$parser$Parser$symbol('\\title'),
				$elm$parser$Parser$symbol('\\contents'),
				$elm$parser$Parser$symbol('\\setcounter')
			])));
var $author$project$MicroLaTeX$Parser$ClassifyBlock$CVerbatimBlockDelim = {$: 4};
var $author$project$MicroLaTeX$Parser$ClassifyBlock$verbatimBlockDelimParser = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return $author$project$MicroLaTeX$Parser$ClassifyBlock$CVerbatimBlockDelim;
	},
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$symbol('```')));
var $author$project$MicroLaTeX$Parser$ClassifyBlock$LXVerbatimBlock = function (a) {
	return {$: 4, a: a};
};
var $author$project$MicroLaTeX$Parser$ClassifyBlock$verbatimBlockParser = A2(
	$elm$parser$Parser$map,
	function (s) {
		return $author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$Parser$ClassifyBlock$LXVerbatimBlock(s));
	},
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('|| ')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntilEndOr(' '))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$Parser$ClassifyBlock$classifierParser = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$author$project$MicroLaTeX$Parser$ClassifyBlock$beginBlockParser, $author$project$MicroLaTeX$Parser$ClassifyBlock$endBlockParser, $author$project$MicroLaTeX$Parser$ClassifyBlock$mathBlockDelimParser, $author$project$MicroLaTeX$Parser$ClassifyBlock$verbatimBlockDelimParser, $author$project$MicroLaTeX$Parser$ClassifyBlock$ordinaryBlockParser, $author$project$MicroLaTeX$Parser$ClassifyBlock$verbatimBlockParser, $author$project$MicroLaTeX$Parser$ClassifyBlock$itemParser, $author$project$MicroLaTeX$Parser$ClassifyBlock$pseudoBlockParser, $author$project$MicroLaTeX$Parser$ClassifyBlock$numberedParser]));
var $elm$core$String$trimLeft = _String_trimLeft;
var $author$project$MicroLaTeX$Parser$ClassifyBlock$classify = function (str) {
	var str_ = $elm$core$String$trimLeft(str);
	var _v0 = A2($elm$parser$Parser$run, $author$project$MicroLaTeX$Parser$ClassifyBlock$classifierParser, str_);
	if (!_v0.$) {
		var classificationOfLine = _v0.a;
		return classificationOfLine;
	} else {
		return (str === '') ? $author$project$MicroLaTeX$Parser$ClassifyBlock$CEmpty : $author$project$MicroLaTeX$Parser$ClassifyBlock$CPlainText;
	}
};
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.fV);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.hB, offset) < 0,
					0,
					{bK: col, b: s0.b, hb: s0.hb, hB: offset, cg: row, fV: s0.fV});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return function (s) {
		return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.hB, s.cg, s.bK, s);
	};
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$core$Basics$neq = _Utils_notEqual;
var $author$project$Parser$Line$prefixParser = F2(
	function (position, lineNumber) {
		return A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed(
							F4(
								function (prefixStart, prefixEnd, lineEnd, content) {
									return {
										bM: A3($elm$core$String$slice, prefixEnd, lineEnd, content),
										hb: prefixEnd - prefixStart,
										eo: lineNumber,
										ey: position,
										ez: A3($elm$core$String$slice, 0, prefixEnd, content)
									};
								})),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompWhile(
								function (c) {
									return c === ' ';
								}))),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$getOffset,
						$elm$parser$Parser$chompWhile(
							function (c) {
								return c !== '\n';
							}))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource);
	});
var $author$project$Parser$Line$classify = F3(
	function (position, lineNumber, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			A2($author$project$Parser$Line$prefixParser, position, lineNumber),
			str);
		if (_v0.$ === 1) {
			return {bM: '!!ERROR', hb: 0, eo: lineNumber, ey: position, ez: ''};
		} else {
			var result = _v0.a;
			return result;
		}
	});
var $author$project$Parser$PrimitiveLaTeXBlock$Filled = 2;
var $author$project$Parser$PrimitiveLaTeXBlock$Started = 1;
var $author$project$Parser$Line$PBOrdinary = 1;
var $author$project$Parser$Line$PBParagraph = 2;
var $author$project$Parser$Line$PBVerbatim = 0;
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Parser$PrimitiveLaTeXBlock$verbatimBlockNames = _List_fromArray(
	['equation', 'aligned', 'math', 'code', 'verbatim', 'verse', 'mathmacros', 'textmacros', 'tabular', 'hide', 'docinfo', 'datatable', 'chart', 'svg', 'quiver', 'image', 'tikz', 'load-files', 'include', 'iframe']);
var $author$project$Parser$PrimitiveLaTeXBlock$getBlockTypeAndLabel = function (str) {
	var _v0 = $author$project$MicroLaTeX$Parser$ClassifyBlock$classify(str);
	switch (_v0.$) {
		case 0:
			var label = _v0.a;
			return A2($elm$core$List$member, label, $author$project$Parser$PrimitiveLaTeXBlock$verbatimBlockNames) ? _Utils_Tuple2(
				0,
				$elm$core$Maybe$Just(label)) : _Utils_Tuple2(
				1,
				$elm$core$Maybe$Just(label));
		case 3:
			return _Utils_Tuple2(
				0,
				$elm$core$Maybe$Just('math'));
		case 4:
			return _Utils_Tuple2(
				0,
				$elm$core$Maybe$Just('code'));
		default:
			return _Utils_Tuple2(2, $elm$core$Maybe$Nothing);
	}
};
var $author$project$Parser$PrimitiveLaTeXBlock$blockFromLine = F2(
	function (level, line) {
		var indent = line.hb;
		var lineNumber = line.eo;
		var position = line.ey;
		var prefix = line.ez;
		var content = line.bM;
		var _v0 = $author$project$Parser$PrimitiveLaTeXBlock$getBlockTypeAndLabel(line.bM);
		var blockType = _v0.a;
		var label = _v0.b;
		return {gn: _List_Nil, dW: blockType, bM: _List_Nil, fb: $elm$core$Maybe$Nothing, dt: line.bM, hb: indent, en: level, eo: lineNumber, fA: label, ey: position, w: $elm$core$Dict$empty, h7: '', h: 1};
	});
var $elm$core$String$trim = _String_trim;
var $author$project$Parser$PrimitiveLaTeXBlock$getArgs = function (mstr) {
	if (mstr.$ === 1) {
		return _List_Nil;
	} else {
		var str = mstr.a;
		var strs = A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ', ', str));
		return A2(
			$elm$core$List$filter,
			function (t) {
				return !A2($elm$core$String$contains, ':', t);
			},
			strs);
	}
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return (c === ' ') || ((c === '\n') || (c === '\r'));
	});
var $elm$parser$Parser$spaces = $elm$parser$Parser$Advanced$spaces;
var $author$project$Compiler$Util$itemParser = F2(
	function (leftDelimiter, rightDelimiter) {
		return A2(
			$elm$parser$Parser$map,
			$elm$core$String$trim,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								A2(
									$elm$parser$Parser$ignorer,
									$elm$parser$Parser$succeed($elm$core$String$slice),
									$elm$parser$Parser$chompUntil(leftDelimiter)),
								$elm$parser$Parser$symbol(leftDelimiter)),
							$elm$parser$Parser$spaces),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompUntil(rightDelimiter))),
					$elm$parser$Parser$getOffset),
				$elm$parser$Parser$getSource));
	});
var $author$project$Compiler$Util$bracedItemParser = A2($author$project$Compiler$Util$itemParser, '{', '}');
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0;
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (!step.$) {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return function (s) {
			return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
		};
	});
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (!step.$) {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $elm$parser$Parser$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$Compiler$Util$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (v) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					A2($elm$parser$Parser$ignorer, p, $elm$parser$Parser$spaces)),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$succeed(0))
				]));
	});
var $author$project$Compiler$Util$many = function (p) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		$author$project$Compiler$Util$manyHelp(p));
};
var $author$project$Compiler$Util$getBracedItems = function (str) {
	var _v0 = A2(
		$elm$parser$Parser$run,
		$author$project$Compiler$Util$many($author$project$Compiler$Util$bracedItemParser),
		str);
	if (!_v0.$) {
		var val = _v0.a;
		return val;
	} else {
		return _List_Nil;
	}
};
var $author$project$Parser$PrimitiveLaTeXBlock$getKVData = function (mstr) {
	if (mstr.$ === 1) {
		return _List_Nil;
	} else {
		var str = mstr.a;
		var strs = A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ', ', str));
		return A2(
			$elm$core$List$filter,
			function (t) {
				return A2($elm$core$String$contains, ':', t);
			},
			strs);
	}
};
var $author$project$Compiler$Util$bracketedItemParser = A2($author$project$Compiler$Util$itemParser, '[', ']');
var $author$project$Compiler$Util$getBracketedItem = function (str) {
	var _v0 = A2($elm$parser$Parser$run, $author$project$Compiler$Util$bracketedItemParser, str);
	if (!_v0.$) {
		var val = _v0.a;
		return $elm$core$Maybe$Just(val);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Compiler$Util$macroValParser = function (macroName) {
	return A2(
		$elm$parser$Parser$map,
		$elm$core$String$trim,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								$elm$parser$Parser$succeed($elm$core$String$slice),
								$elm$parser$Parser$chompUntil('\\' + (macroName + '{'))),
							$elm$parser$Parser$symbol('\\' + (macroName + '{'))),
						$elm$parser$Parser$spaces),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$getOffset,
						$elm$parser$Parser$chompUntilEndOr('}'))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource));
};
var $author$project$Compiler$Util$getMicroLaTeXItem = F2(
	function (key, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$Compiler$Util$macroValParser(key),
			str);
		if (!_v0.$) {
			var val = _v0.a;
			return $elm$core$Maybe$Just(val);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$MicroLaTeX$Parser$Line$getNameAndArgString = function (line) {
	var normalizedLine = $elm$core$String$trim(line.bM);
	var name = function () {
		var _v0 = A2($author$project$Compiler$Util$getMicroLaTeXItem, 'begin', normalizedLine);
		if (!_v0.$) {
			var str = _v0.a;
			return $elm$core$Maybe$Just(str);
		} else {
			return (normalizedLine === '$$') ? $elm$core$Maybe$Just('math') : $elm$core$Maybe$Nothing;
		}
	}();
	return _Utils_Tuple2(
		name,
		$author$project$Compiler$Util$getBracketedItem(normalizedLine));
};
var $author$project$Parser$PrimitiveLaTeXBlock$KVInKey = 0;
var $author$project$Parser$PrimitiveLaTeXBlock$KVInValue = 1;
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$Dict$Black = 1;
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: -1, a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = 0;
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === -1) && (!right.a)) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === -1) && (!left.a)) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === -2) {
			return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1) {
				case 0:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 1:
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm_community$list_extra$List$Extra$uncons = function (list) {
	if (!list.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var first = list.a;
		var rest = list.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(first, rest));
	}
};
var $author$project$Parser$PrimitiveLaTeXBlock$nextKVStep = function (state) {
	var _v0 = $elm_community$list_extra$List$Extra$uncons(state.aX);
	if (_v0.$ === 1) {
		var kvList_ = function () {
			var _v2 = state.aV;
			if (_v2.$ === 1) {
				return state.ba;
			} else {
				var key = _v2.a;
				return A2(
					$elm$core$List$map,
					function (_v3) {
						var k = _v3.a;
						var v = _v3.b;
						return _Utils_Tuple2(
							k,
							$elm$core$List$reverse(v));
					},
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, state.aD),
						state.ba));
			}
		}();
		return $author$project$Parser$PrimitiveLaTeXBlock$Done(
			$elm$core$Dict$fromList(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var k = _v1.a;
						var v = _v1.b;
						return _Utils_Tuple2(
							k,
							A2($elm$core$String$join, ' ', v));
					},
					kvList_)));
	} else {
		var _v4 = _v0.a;
		var item = _v4.a;
		var rest = _v4.b;
		var _v5 = state.bq;
		if (!_v5) {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v6 = state.aV;
				if (_v6.$ === 1) {
					return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						_Utils_update(
							state,
							{
								aV: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								aX: rest,
								bq: 1
							}));
				} else {
					var key = _v6.a;
					return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						{
							aV: $elm$core$Maybe$Just(
								A2($elm$core$String$dropRight, 1, item)),
							aD: _List_Nil,
							aX: rest,
							ba: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(key, state.aD),
								state.ba),
							bq: 1
						});
				}
			} else {
				return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
					_Utils_update(
						state,
						{aX: rest}));
			}
		} else {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v7 = state.aV;
				if (_v7.$ === 1) {
					return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						_Utils_update(
							state,
							{
								aV: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								aD: _List_Nil,
								aX: rest,
								bq: 1
							}));
				} else {
					var key = _v7.a;
					return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						_Utils_update(
							state,
							{
								aV: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								aD: _List_Nil,
								aX: rest,
								ba: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(key, state.aD),
									state.ba),
								bq: 1
							}));
				}
			} else {
				return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
					_Utils_update(
						state,
						{
							aD: A2($elm$core$List$cons, item, state.aD),
							aX: rest
						}));
			}
		}
	}
};
var $author$project$Parser$PrimitiveLaTeXBlock$prepareKVData = function (data_) {
	var initialState = {aV: $elm$core$Maybe$Nothing, aD: _List_Nil, aX: data_, ba: _List_Nil, bq: 0};
	return A2($author$project$Parser$PrimitiveLaTeXBlock$loop, initialState, $author$project$Parser$PrimitiveLaTeXBlock$nextKVStep);
};
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $author$project$Parser$PrimitiveLaTeXBlock$explode = function (txt) {
	return A2(
		$elm$core$List$map,
		$elm$core$String$split(':'),
		txt);
};
var $author$project$Parser$PrimitiveLaTeXBlock$fix = function (strs) {
	if (strs.b) {
		if (strs.b.b) {
			var a = strs.a;
			var _v1 = strs.b;
			var b = _v1.a;
			return A2(
				$elm$core$List$cons,
				a + ':',
				A2($elm$core$List$cons, b, _List_Nil));
		} else {
			var a = strs.a;
			return A2($elm$core$List$cons, a, _List_Nil);
		}
	} else {
		return _List_Nil;
	}
};
var $author$project$Parser$PrimitiveLaTeXBlock$prepareList = function (strs) {
	return $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$author$project$Parser$PrimitiveLaTeXBlock$fix,
			$author$project$Parser$PrimitiveLaTeXBlock$explode(strs)));
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$Parser$PrimitiveLaTeXBlock$elaborate = F2(
	function (line, pb) {
		if (_Utils_eq(
			pb.bM,
			_List_fromArray(
				['']))) {
			return pb;
		} else {
			var content = (!pb.dW) ? A2($elm$core$List$map, $elm$core$String$trimLeft, pb.bM) : pb.bM;
			var _v0 = $author$project$MicroLaTeX$Parser$Line$getNameAndArgString(line);
			var name = _v0.a;
			var args_ = _v0.b;
			var namedArgs = $author$project$Parser$PrimitiveLaTeXBlock$getKVData(args_);
			var properties = $author$project$Parser$PrimitiveLaTeXBlock$prepareKVData(
				$author$project$Parser$PrimitiveLaTeXBlock$prepareList(namedArgs));
			var simpleArgs = function () {
				if (name.$ === 1) {
					return $author$project$Parser$PrimitiveLaTeXBlock$getArgs(args_);
				} else {
					var name_ = name.a;
					var prefix = '\\begin{' + (name_ + '}');
					var adjustedLine = A3($elm$core$String$replace, prefix, '', line.bM);
					return $author$project$Compiler$Util$getBracedItems(adjustedLine);
				}
			}();
			return _Utils_update(
				pb,
				{gn: simpleArgs, bM: content, fA: name, w: properties});
		}
	});
var $author$project$Parser$PrimitiveLaTeXBlock$beginBlock = F3(
	function (classifier, line, state) {
		var newBlockClassifier = function () {
			if (!classifier.$) {
				var name = classifier.a;
				return A2($elm$core$List$member, name, $author$project$Parser$PrimitiveLaTeXBlock$verbatimBlockNames) ? $elm$core$Maybe$Just(classifier) : $elm$core$Maybe$Nothing;
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var level = state.en + 1;
		var newBlock = A2(
			$author$project$Parser$PrimitiveLaTeXBlock$elaborate,
			line,
			A2($author$project$Parser$PrimitiveLaTeXBlock$blockFromLine, level, line));
		var labelStack = function () {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(state.c);
			if (_v0.$ === 1) {
				return state.c;
			} else {
				var _v1 = _v0.a;
				var label = _v1.a;
				var rest_ = _v1.b;
				return A2(
					$elm$core$List$cons,
					_Utils_update(
						label,
						{h: 2}),
					rest_);
			}
		}();
		return _Utils_update(
			state,
			{
				bG: newBlockClassifier,
				af: line.eo,
				hb: line.hb,
				c: A2(
					$elm$core$List$cons,
					{y: classifier, en: level, eo: line.eo, h: 1},
					labelStack),
				en: level,
				eo: line.eo,
				k: A2($elm$core$List$cons, newBlock, state.k)
			});
	});
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $author$project$Parser$PrimitiveLaTeXBlock$slice = F3(
	function (a, b, list) {
		return A2(
			$elm$core$List$drop,
			a,
			A2($elm$core$List$take, b + 1, list));
	});
var $author$project$Parser$PrimitiveLaTeXBlock$changeStatusOfStackTop = F3(
	function (block, rest, state) {
		if (_Utils_eq(
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.h;
				},
				$elm$core$List$head(state.c)),
			$elm$core$Maybe$Just(2))) {
			return state.k;
		} else {
			if (_Utils_eq(
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.h;
					},
					$elm$core$List$head(state.c)),
				$elm$core$Maybe$Just(1))) {
				var firstBlockLine = A2(
					$elm$core$Maybe$withDefault,
					0,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.eo;
						},
						$elm$core$List$head(state.c)));
				var newBlock = _Utils_update(
					block,
					{
						bM: A3($author$project$Parser$PrimitiveLaTeXBlock$slice, firstBlockLine + 1, state.eo - 1, state.X),
						h: 2
					});
				return A2($elm$core$List$cons, newBlock, rest);
			} else {
				return state.k;
			}
		}
	});
var $author$project$Parser$PrimitiveLaTeXBlock$dispatchBeginBlock = F3(
	function (classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.k);
		if (_v0.$ === 1) {
			return A3($author$project$Parser$PrimitiveLaTeXBlock$beginBlock, classifier, line, state);
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			return A3(
				$author$project$Parser$PrimitiveLaTeXBlock$beginBlock,
				classifier,
				line,
				_Utils_update(
					state,
					{
						k: A3($author$project$Parser$PrimitiveLaTeXBlock$changeStatusOfStackTop, block, rest, state)
					}));
		}
	});
var $author$project$Parser$PrimitiveLaTeXBlock$Finished = 0;
var $author$project$Parser$PrimitiveLaTeXBlock$addSource = F2(
	function (lastLine, block) {
		var _v0 = block.fA;
		if (_v0.$ === 1) {
			return _Utils_update(
				block,
				{
					h7: A2($elm$core$String$join, '\n', block.bM)
				});
		} else {
			return _Utils_update(
				block,
				{
					h7: block.dt + ('\n' + (A2($elm$core$String$join, '\n', block.bM) + ('\n' + lastLine)))
				});
		}
	});
var $author$project$Parser$PrimitiveLaTeXBlock$getContent = F3(
	function (classifier, line, state) {
		_v0$4:
		while (true) {
			switch (classifier.$) {
				case 5:
					return $elm$core$List$reverse(
						A3($author$project$Parser$PrimitiveLaTeXBlock$slice, state.af, line.eo - 1, state.X));
				case 2:
					switch (classifier.a.$) {
						case 0:
							var _v1 = classifier.a;
							return A2(
								$elm$core$List$map,
								function (line_) {
									return $elm$core$String$trim(
										A3($elm$core$String$replace, '\\item', '', line_));
								},
								$elm$core$List$reverse(
									A3($author$project$Parser$PrimitiveLaTeXBlock$slice, state.af, line.eo, state.X)));
						case 1:
							var _v2 = classifier.a;
							return A2(
								$elm$core$List$map,
								function (line_) {
									return $elm$core$String$trim(
										A3($elm$core$String$replace, '\\numbered', '', line_));
								},
								$elm$core$List$reverse(
									A3($author$project$Parser$PrimitiveLaTeXBlock$slice, state.af, line.eo, state.X)));
						default:
							break _v0$4;
					}
				case 1:
					return $elm$core$List$reverse(
						A3($author$project$Parser$PrimitiveLaTeXBlock$slice, state.af + 1, line.eo - 1, state.X));
				default:
					break _v0$4;
			}
		}
		return $elm$core$List$reverse(
			A3($author$project$Parser$PrimitiveLaTeXBlock$slice, state.af + 1, line.eo - 1, state.X));
	});
var $author$project$Parser$PrimitiveLaTeXBlock$getSource = F2(
	function (line, state) {
		return A2(
			$elm$core$String$join,
			'\n',
			A3($author$project$Parser$PrimitiveLaTeXBlock$slice, state.af, line.eo, state.X));
	});
var $author$project$Parser$PrimitiveLaTeXBlock$newBlockWithError = F3(
	function (classifier, content, block) {
		_v0$4:
		while (true) {
			switch (classifier.$) {
				case 3:
					return _Utils_update(
						block,
						{
							bM: $elm$core$List$reverse(content),
							fb: $elm$core$Maybe$Just(
								{fb: 'Missing $$ at end'}),
							h: 0
						});
				case 4:
					return _Utils_update(
						block,
						{
							bM: $elm$core$List$reverse(content),
							fb: $elm$core$Maybe$Just(
								{fb: 'Missing ``` at end'}),
							h: 0
						});
				case 2:
					switch (classifier.a.$) {
						case 0:
							var _v1 = classifier.a;
							return _Utils_update(
								block,
								{
									bM: A2(
										$elm$core$List$filter,
										function (line_) {
											return line_ !== '';
										},
										$elm$core$List$reverse(content)),
									w: $elm$core$Dict$empty,
									h: 0
								});
						case 1:
							var _v2 = classifier.a;
							return _Utils_update(
								block,
								{
									bM: A2(
										$elm$core$List$filter,
										function (line_) {
											return line_ !== '';
										},
										$elm$core$List$reverse(content)),
									w: $elm$core$Dict$empty,
									h: 0
								});
						default:
							break _v0$4;
					}
				default:
					break _v0$4;
			}
		}
		return _Utils_update(
			block,
			{
				bM: $elm$core$List$reverse(content),
				h: 0
			});
	});
var $author$project$Parser$PrimitiveLaTeXBlock$newBlockWithOutError = F2(
	function (content, block) {
		return _Utils_update(
			block,
			{
				bM: $elm$core$List$reverse(content),
				h: 0
			});
	});
var $author$project$Parser$PrimitiveLaTeXBlock$resolveIfStackEmpty = function (state) {
	return _Utils_eq(state.k, _List_Nil) ? _Utils_update(
		state,
		{
			T: _Utils_ap(state.am, state.T),
			am: _List_Nil
		}) : state;
};
var $author$project$Parser$PrimitiveLaTeXBlock$endBlockOnMatch = F4(
	function (labelHead, classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.k);
		if (_v0.$ === 1) {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			if (_Utils_eq(
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.h;
					},
					labelHead),
				$elm$core$Maybe$Just(2))) {
				return $author$project$Parser$PrimitiveLaTeXBlock$resolveIfStackEmpty(
					_Utils_update(
						state,
						{
							T: A2(
								$elm$core$List$cons,
								A2(
									$author$project$Parser$PrimitiveLaTeXBlock$addSource,
									line.bM,
									_Utils_update(
										block,
										{h: 0})),
								state.T),
							en: state.en - 1,
							k: rest
						}));
			} else {
				var newBlock = _Utils_eq(
					classifier,
					$author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock(
						$author$project$MicroLaTeX$Parser$ClassifyBlock$LXVerbatimBlock('texComment'))) ? A2(
					$author$project$Parser$PrimitiveLaTeXBlock$addSource,
					line.bM,
					A3(
						$author$project$Parser$PrimitiveLaTeXBlock$newBlockWithError,
						classifier,
						_Utils_ap(
							A3($author$project$Parser$PrimitiveLaTeXBlock$getContent, classifier, line, state),
							_List_fromArray(
								[block.dt])),
						block)) : (A2(
					$elm$core$List$member,
					classifier,
					A2($elm$core$List$map, $author$project$MicroLaTeX$Parser$ClassifyBlock$CEndBlock, $author$project$Parser$PrimitiveLaTeXBlock$verbatimBlockNames)) ? A3(
					$author$project$Parser$PrimitiveLaTeXBlock$newBlockWithError,
					classifier,
					A3($author$project$Parser$PrimitiveLaTeXBlock$getContent, classifier, line, state),
					_Utils_update(
						block,
						{
							h7: A2($author$project$Parser$PrimitiveLaTeXBlock$getSource, line, state)
						})) : A2(
					$author$project$Parser$PrimitiveLaTeXBlock$addSource,
					line.bM,
					A2(
						$author$project$Parser$PrimitiveLaTeXBlock$newBlockWithOutError,
						A3($author$project$Parser$PrimitiveLaTeXBlock$getContent, classifier, line, state),
						block)));
				return $author$project$Parser$PrimitiveLaTeXBlock$resolveIfStackEmpty(
					_Utils_update(
						state,
						{
							am: A2($elm$core$List$cons, newBlock, state.am),
							c: A2($elm$core$List$drop, 1, state.c),
							en: state.en - 1,
							k: A2(
								$elm$core$List$drop,
								1,
								A3($author$project$Parser$PrimitiveLaTeXBlock$changeStatusOfStackTop, block, rest, state))
						}));
			}
		}
	});
var $author$project$Parser$PrimitiveLaTeXBlock$finishBlock = F2(
	function (lastLine, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.k);
		if (_v0.$ === 1) {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var updatedBlock = A2(
				$author$project$Parser$PrimitiveLaTeXBlock$addSource,
				lastLine,
				_Utils_update(
					block,
					{h: 0}));
			return _Utils_update(
				state,
				{
					T: A2($elm$core$List$cons, updatedBlock, state.T),
					c: A2($elm$core$List$drop, 1, state.c),
					k: A2($elm$core$List$drop, 1, state.k)
				});
		}
	});
var $author$project$Parser$PrimitiveLaTeXBlock$endBlockOnMismatch = F4(
	function (label_, classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.k);
		if (_v0.$ === 1) {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			var _v2 = $elm_community$list_extra$List$Extra$uncons(state.c);
			if (_v2.$ === 1) {
				return state;
			} else {
				var _v3 = _v2.a;
				var label = _v3.a;
				var name = function () {
					var _v5 = block.fA;
					if (_v5.$ === 1) {
						return '--';
					} else {
						var name_ = _v5.a;
						return A2(
							$elm$core$List$member,
							name_,
							_List_fromArray(
								['math', 'equation', 'aligned'])) ? 'code' : name_;
					}
				}();
				var newBlock = A2(
					$author$project$Parser$PrimitiveLaTeXBlock$addSource,
					line.bM,
					_Utils_update(
						block,
						{
							gn: A2(
								$elm$core$List$member,
								name,
								_List_fromArray(
									['item', 'numbered'])) ? block.bM : block.gn,
							bM: A2($elm$core$List$member, name, $author$project$Parser$PrimitiveLaTeXBlock$verbatimBlockNames) ? $elm$core$List$reverse(
								A3($author$project$Parser$PrimitiveLaTeXBlock$getContent, label_.y, line, state)) : $elm$core$List$reverse(
								A3($author$project$Parser$PrimitiveLaTeXBlock$getContent, label_.y, line, state)),
							fb: function () {
								var _v4 = _Utils_Tuple2(label.y, classifier);
								if (!_v4.a.$) {
									if (_v4.b.$ === 1) {
										var a = _v4.a.a;
										var b = _v4.b.a;
										return $elm$core$Maybe$Just(
											{fb: 'Mismatch: \\begin{' + (a + ('} ≠ \\end{' + (b + '}')))});
									} else {
										var a = _v4.a.a;
										return $elm$core$Maybe$Just(
											{fb: 'Missing \\end{' + (a + '}')});
									}
								} else {
									return $elm$core$Maybe$Nothing;
								}
							}(),
							fA: $elm$core$Maybe$Just(name),
							h: 0
						}));
				return $author$project$Parser$PrimitiveLaTeXBlock$resolveIfStackEmpty(
					A2(
						$author$project$Parser$PrimitiveLaTeXBlock$finishBlock,
						line.bM,
						_Utils_update(
							state,
							{
								am: A2($elm$core$List$cons, newBlock, state.am),
								c: A2($elm$core$List$drop, 1, state.c),
								en: state.en - 1,
								k: rest
							})));
			}
		}
	});
var $author$project$MicroLaTeX$Parser$ClassifyBlock$match = F2(
	function (c1, c2) {
		var _v0 = _Utils_Tuple2(c1, c2);
		_v0$4:
		while (true) {
			switch (_v0.a.$) {
				case 0:
					if (_v0.b.$ === 1) {
						var label1 = _v0.a.a;
						var label2 = _v0.b.a;
						return _Utils_eq(label1, label2);
					} else {
						break _v0$4;
					}
				case 3:
					if (_v0.b.$ === 3) {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return true;
					} else {
						break _v0$4;
					}
				case 4:
					if (_v0.b.$ === 4) {
						var _v3 = _v0.a;
						var _v4 = _v0.b;
						return false;
					} else {
						break _v0$4;
					}
				case 2:
					return true;
				default:
					break _v0$4;
			}
		}
		return false;
	});
var $author$project$Parser$PrimitiveLaTeXBlock$endBlock = F3(
	function (classification, currentLine, state) {
		var _v0 = $elm$core$List$head(state.c);
		if (_v0.$ === 1) {
			return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
				_Utils_update(
					state,
					{en: state.en - 1}));
		} else {
			var label = _v0.a;
			return (A2($author$project$MicroLaTeX$Parser$ClassifyBlock$match, label.y, classification) && _Utils_eq(state.en, label.en)) ? $author$project$Parser$PrimitiveLaTeXBlock$Loop(
				A4(
					$author$project$Parser$PrimitiveLaTeXBlock$endBlockOnMatch,
					$elm$core$Maybe$Just(label),
					classification,
					currentLine,
					_Utils_update(
						state,
						{bG: $elm$core$Maybe$Nothing}))) : $author$project$Parser$PrimitiveLaTeXBlock$Loop(
				A4(
					$author$project$Parser$PrimitiveLaTeXBlock$endBlockOnMismatch,
					label,
					classification,
					currentLine,
					_Utils_update(
						state,
						{bG: $elm$core$Maybe$Nothing})));
		}
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Parser$PrimitiveLaTeXBlock$resetLevelIfStackIsEmpty = function (state) {
	return $elm$core$List$isEmpty(state.k) ? _Utils_update(
		state,
		{en: -1}) : state;
};
var $author$project$Parser$PrimitiveLaTeXBlock$emptyLine = F2(
	function (currentLine, state) {
		var _v0 = $elm$core$List$head(state.c);
		if (_v0.$ === 1) {
			return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
				$author$project$Parser$PrimitiveLaTeXBlock$resetLevelIfStackIsEmpty(state));
		} else {
			var label = _v0.a;
			var _v1 = label.y;
			switch (_v1.$) {
				case 5:
					return A3($author$project$Parser$PrimitiveLaTeXBlock$endBlock, $author$project$MicroLaTeX$Parser$ClassifyBlock$CPlainText, currentLine, state);
				case 3:
					return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						A4($author$project$Parser$PrimitiveLaTeXBlock$endBlockOnMismatch, label, $author$project$MicroLaTeX$Parser$ClassifyBlock$CMathBlockDelim, currentLine, state));
				case 0:
					var name = _v1.a;
					return A2(
						$elm$core$List$member,
						name,
						_List_fromArray(
							['equation', 'aligned'])) ? $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						A4(
							$author$project$Parser$PrimitiveLaTeXBlock$endBlockOnMismatch,
							label,
							$author$project$MicroLaTeX$Parser$ClassifyBlock$CBeginBlock(name),
							currentLine,
							state)) : $author$project$Parser$PrimitiveLaTeXBlock$Loop(state);
				case 2:
					switch (_v1.a.$) {
						case 2:
							var _v2 = _v1.a;
							return A3(
								$author$project$Parser$PrimitiveLaTeXBlock$endBlock,
								$author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock($author$project$MicroLaTeX$Parser$ClassifyBlock$LXItem),
								currentLine,
								state);
						case 0:
							var _v3 = _v1.a;
							return A3(
								$author$project$Parser$PrimitiveLaTeXBlock$endBlock,
								$author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock($author$project$MicroLaTeX$Parser$ClassifyBlock$LXItem),
								currentLine,
								state);
						case 1:
							var _v4 = _v1.a;
							return A3(
								$author$project$Parser$PrimitiveLaTeXBlock$endBlock,
								$author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock($author$project$MicroLaTeX$Parser$ClassifyBlock$LXNumbered),
								currentLine,
								state);
						case 3:
							var name = _v1.a.a;
							return A3(
								$author$project$Parser$PrimitiveLaTeXBlock$endBlock,
								$author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$Parser$ClassifyBlock$LXOrdinaryBlock(name)),
								currentLine,
								state);
						default:
							var name = _v1.a.a;
							return A3(
								$author$project$Parser$PrimitiveLaTeXBlock$endBlock,
								$author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$Parser$ClassifyBlock$LXVerbatimBlock(name)),
								currentLine,
								state);
					}
				case 1:
					return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						$author$project$Parser$PrimitiveLaTeXBlock$resetLevelIfStackIsEmpty(state));
				case 4:
					return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						$author$project$Parser$PrimitiveLaTeXBlock$resetLevelIfStackIsEmpty(state));
				default:
					return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						$author$project$Parser$PrimitiveLaTeXBlock$resetLevelIfStackIsEmpty(state));
			}
		}
	});
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $author$project$Parser$PrimitiveLaTeXBlock$getPosition = F2(
	function (rawLine, state) {
		return (rawLine === '') ? (state.ey + 1) : ((state.ey + $elm$core$String$length(rawLine)) + 1);
	});
var $author$project$Parser$PrimitiveLaTeXBlock$handleSpecial_ = F3(
	function (classifier, line, state) {
		var level = state.en + 1;
		var newBlock_ = A2(
			$author$project$Parser$PrimitiveLaTeXBlock$elaborate,
			line,
			A2($author$project$Parser$PrimitiveLaTeXBlock$blockFromLine, level, line));
		var newBlock = function () {
			_v2$4:
			while (true) {
				if (classifier.$ === 2) {
					switch (classifier.a.$) {
						case 0:
							var _v3 = classifier.a;
							return _Utils_update(
								newBlock_,
								{
									dW: 1,
									fA: $elm$core$Maybe$Just('item'),
									w: $elm$core$Dict$fromList(
										_List_fromArray(
											[
												_Utils_Tuple2(
												'firstLine',
												A3($elm$core$String$replace, '\\item', '', line.bM))
											]))
								});
						case 1:
							var _v4 = classifier.a;
							return _Utils_update(
								newBlock_,
								{
									dW: 1,
									fA: $elm$core$Maybe$Just('numbered'),
									w: $elm$core$Dict$fromList(
										_List_fromArray(
											[
												_Utils_Tuple2(
												'firstLine',
												A3($elm$core$String$replace, '\\numbered', '', line.bM))
											]))
								});
						case 3:
							var name = classifier.a.a;
							return _Utils_update(
								newBlock_,
								{
									dW: 1,
									fA: $elm$core$Maybe$Just(name)
								});
						case 4:
							var name = classifier.a.a;
							return _Utils_update(
								newBlock_,
								{
									dW: 0,
									fA: $elm$core$Maybe$Just(name)
								});
						default:
							break _v2$4;
					}
				} else {
					break _v2$4;
				}
			}
			return newBlock_;
		}();
		var labelStack = function () {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(state.c);
			if (_v0.$ === 1) {
				return state.c;
			} else {
				var _v1 = _v0.a;
				var label = _v1.a;
				var rest_ = _v1.b;
				return A2(
					$elm$core$List$cons,
					_Utils_update(
						label,
						{h: 2}),
					rest_);
			}
		}();
		return _Utils_update(
			state,
			{
				af: line.eo,
				hb: line.hb,
				c: A2(
					$elm$core$List$cons,
					{y: classifier, en: level, eo: line.eo, h: 1},
					labelStack),
				en: level,
				eo: line.eo,
				k: A2($elm$core$List$cons, newBlock, state.k)
			});
	});
var $author$project$Parser$PrimitiveLaTeXBlock$handleSpecialBlock = F3(
	function (classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.k);
		if (_v0.$ === 1) {
			return A3($author$project$Parser$PrimitiveLaTeXBlock$handleSpecial_, classifier, line, state);
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			return A3(
				$author$project$Parser$PrimitiveLaTeXBlock$handleSpecial_,
				classifier,
				line,
				_Utils_update(
					state,
					{
						k: A3($author$project$Parser$PrimitiveLaTeXBlock$changeStatusOfStackTop, block, rest, state)
					}));
		}
	});
var $author$project$Parser$PrimitiveLaTeXBlock$handleVerbatimBlock = F2(
	function (line, state) {
		var _v0 = $elm$core$List$head(state.c);
		if (_v0.$ === 1) {
			return _Utils_update(
				state,
				{
					af: line.eo,
					hb: line.hb,
					c: A2(
						$elm$core$List$cons,
						{y: $author$project$MicroLaTeX$Parser$ClassifyBlock$CVerbatimBlockDelim, en: state.en + 1, eo: line.eo, h: 1},
						state.c),
					en: state.en + 1,
					eo: line.eo,
					k: A2(
						$elm$core$List$cons,
						A2(
							$author$project$Parser$PrimitiveLaTeXBlock$elaborate,
							line,
							A2($author$project$Parser$PrimitiveLaTeXBlock$blockFromLine, state.en + 1, line)),
						state.k)
				});
		} else {
			var label = _v0.a;
			var _v1 = $elm_community$list_extra$List$Extra$uncons(state.k);
			if (_v1.$ === 1) {
				return state;
			} else {
				var _v2 = _v1.a;
				var block = _v2.a;
				var rest = _v2.b;
				var _v3 = $elm_community$list_extra$List$Extra$uncons(state.c);
				if (_v3.$ === 1) {
					return state;
				} else {
					var _v4 = _v3.a;
					var topLabel = _v4.a;
					var otherLabels = _v4.b;
					var newBlock = A2(
						$author$project$Parser$PrimitiveLaTeXBlock$addSource,
						line.bM,
						_Utils_update(
							block,
							{
								bM: A3($author$project$Parser$PrimitiveLaTeXBlock$slice, topLabel.eo + 1, state.eo - 1, state.X),
								h: 0
							}));
					return _Utils_update(
						state,
						{
							T: A2($elm$core$List$cons, newBlock, state.T),
							c: otherLabels,
							en: state.en - 1,
							k: rest
						});
				}
			}
		}
	});
var $author$project$Parser$PrimitiveLaTeXBlock$handleComment = F2(
	function (line, state) {
		var newBlock = function (b) {
			return _Utils_update(
				b,
				{
					dW: 0,
					fA: $elm$core$Maybe$Just('texComment')
				});
		}(
			A2($author$project$Parser$PrimitiveLaTeXBlock$blockFromLine, 0, line));
		var labelStack = function () {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(state.c);
			if (_v0.$ === 1) {
				return state.c;
			} else {
				var _v1 = _v0.a;
				var label = _v1.a;
				var rest_ = _v1.b;
				return A2(
					$elm$core$List$cons,
					_Utils_update(
						label,
						{h: 2}),
					rest_);
			}
		}();
		return _Utils_update(
			state,
			{
				af: line.eo,
				hb: line.hb,
				c: A2(
					$elm$core$List$cons,
					{
						y: $author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock(
							$author$project$MicroLaTeX$Parser$ClassifyBlock$LXVerbatimBlock('texComment')),
						en: 0,
						eo: line.eo,
						h: 1
					},
					labelStack),
				en: 0,
				eo: line.eo,
				k: A2($elm$core$List$cons, newBlock, state.k)
			});
	});
var $author$project$Parser$PrimitiveLaTeXBlock$plainText = F2(
	function (state, currentLine) {
		return (_Utils_eq(
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.h;
				},
				$elm$core$List$head(state.c)),
			$elm$core$Maybe$Just(2)) || _Utils_eq(state.c, _List_Nil)) ? ((A2($elm$core$String$left, 1, currentLine.bM) === '%') ? $author$project$Parser$PrimitiveLaTeXBlock$Loop(
			A2($author$project$Parser$PrimitiveLaTeXBlock$handleComment, currentLine, state)) : $author$project$Parser$PrimitiveLaTeXBlock$Loop(
			A3($author$project$Parser$PrimitiveLaTeXBlock$dispatchBeginBlock, $author$project$MicroLaTeX$Parser$ClassifyBlock$CPlainText, currentLine, state))) : $author$project$Parser$PrimitiveLaTeXBlock$Loop(state);
	});
var $author$project$Compiler$Util$dropLast = function (list) {
	var n = $elm$core$List$length(list);
	return A2($elm$core$List$take, n - 1, list);
};
var $elm_community$list_extra$List$Extra$last = function (items) {
	last:
	while (true) {
		if (!items.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!items.b.b) {
				var x = items.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var rest = items.b;
				var $temp$items = rest;
				items = $temp$items;
				continue last;
			}
		}
	}
};
var $author$project$Parser$PrimitiveLaTeXBlock$missingTagError = function (block) {
	var _v0 = block.fA;
	if (!_v0.$) {
		if (_v0.a === 'item') {
			return $elm$core$Maybe$Nothing;
		} else {
			var name = function () {
				var _v1 = block.fA;
				_v1$2:
				while (true) {
					if (!_v1.$) {
						switch (_v1.a) {
							case 'math':
								return '$$';
							case 'code':
								return 'code';
							default:
								break _v1$2;
						}
					} else {
						break _v1$2;
					}
				}
				return A2($elm$core$Maybe$withDefault, '(anon)', block.fA);
			}();
			return $elm$core$Maybe$Just(
				{fb: 'Missing \\end{' + (name + '}')});
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$list_extra$List$Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				if (!list.b) {
					return $elm$core$List$reverse(memo);
				} else {
					var x = list.a;
					var xs = list.b;
					if (predicate(x)) {
						var $temp$memo = A2($elm$core$List$cons, x, memo),
							$temp$list = xs;
						memo = $temp$memo;
						list = $temp$list;
						continue takeWhileMemo;
					} else {
						return $elm$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(_List_Nil);
};
var $elm_community$list_extra$List$Extra$unconsLast = function (list) {
	var _v0 = $elm$core$List$reverse(list);
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var last_ = _v0.a;
		var rest = _v0.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(
				last_,
				$elm$core$List$reverse(rest)));
	}
};
var $author$project$Parser$PrimitiveLaTeXBlock$recoverFromError = function (state) {
	var _v0 = $elm_community$list_extra$List$Extra$unconsLast(state.k);
	if (_v0.$ === 1) {
		return state;
	} else {
		var _v1 = _v0.a;
		var block = _v1.a;
		var _v2 = $elm_community$list_extra$List$Extra$unconsLast(state.c);
		if (_v2.$ === 1) {
			return state;
		} else {
			var _v3 = _v2.a;
			var topLabel = _v3.a;
			var lastLineNumber = state.eo;
			var firstLineNumber = topLabel.eo;
			var provisionalContent = function () {
				var _v5 = topLabel.h;
				if (_v5 === 2) {
					return block.bM;
				} else {
					return A3($author$project$Parser$PrimitiveLaTeXBlock$slice, firstLineNumber + 1, lastLineNumber, state.X);
				}
			}();
			var content = A2(
				$elm_community$list_extra$List$Extra$takeWhile,
				function (item) {
					return item !== '';
				},
				provisionalContent);
			var lineNumber = (firstLineNumber + $elm$core$List$length(content)) + 1;
			var revisedContent = function () {
				var _v4 = $elm_community$list_extra$List$Extra$last(content);
				if (_v4.$ === 1) {
					return content;
				} else {
					var str = _v4.a;
					return (A2($elm$core$String$left, 4, str) === '\\end') ? $author$project$Compiler$Util$dropLast(content) : content;
				}
			}();
			var newBlock = A2(
				$author$project$Parser$PrimitiveLaTeXBlock$addSource,
				'',
				_Utils_update(
					block,
					{
						bM: revisedContent,
						fb: $author$project$Parser$PrimitiveLaTeXBlock$missingTagError(block),
						h: 0
					}));
			return _Utils_update(
				state,
				{
					bG: $elm$core$Maybe$Nothing,
					T: A2($elm$core$List$cons, newBlock, state.T),
					am: _List_Nil,
					c: _List_Nil,
					eo: lineNumber,
					k: _List_Nil
				});
		}
	}
};
var $author$project$Parser$PrimitiveLaTeXBlock$nextStep = function (state_) {
	var state = _Utils_update(
		state_,
		{cA: state_.cA + 1, eo: state_.eo + 1});
	var _v0 = A2($elm_community$list_extra$List$Extra$getAt, state.eo, state.X);
	if (_v0.$ === 1) {
		return $elm$core$List$isEmpty(state.k) ? $author$project$Parser$PrimitiveLaTeXBlock$Done(state) : $author$project$Parser$PrimitiveLaTeXBlock$Loop(
			$author$project$Parser$PrimitiveLaTeXBlock$recoverFromError(state));
	} else {
		var rawLine = _v0.a;
		var currentLine = A3(
			$author$project$Parser$Line$classify,
			A2($author$project$Parser$PrimitiveLaTeXBlock$getPosition, rawLine, state),
			state.eo,
			rawLine);
		var _v1 = $author$project$MicroLaTeX$Parser$ClassifyBlock$classify(currentLine.bM);
		switch (_v1.$) {
			case 0:
				var label = _v1.a;
				return A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.y;
						},
						$elm$core$List$head(state.c)),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$Parser$ClassifyBlock$CBeginBlock('code'))
						])) ? $author$project$Parser$PrimitiveLaTeXBlock$Loop(state) : $author$project$Parser$PrimitiveLaTeXBlock$Loop(
					A3(
						$author$project$Parser$PrimitiveLaTeXBlock$dispatchBeginBlock,
						$author$project$MicroLaTeX$Parser$ClassifyBlock$CBeginBlock(label),
						currentLine,
						state));
			case 1:
				var label = _v1.a;
				return A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.y;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.c))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$Parser$ClassifyBlock$CBeginBlock('code'))
						])) ? $author$project$Parser$PrimitiveLaTeXBlock$Loop(
					A4(
						$author$project$Parser$PrimitiveLaTeXBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$Parser$ClassifyBlock$CBeginBlock('code'),
						currentLine,
						state)) : A3(
					$author$project$Parser$PrimitiveLaTeXBlock$endBlock,
					$author$project$MicroLaTeX$Parser$ClassifyBlock$CEndBlock(label),
					currentLine,
					state);
			case 2:
				var label = _v1.a;
				return A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.y;
						},
						$elm$core$List$head(state.c)),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$Parser$ClassifyBlock$CBeginBlock('code'))
						])) ? $author$project$Parser$PrimitiveLaTeXBlock$Loop(state) : $author$project$Parser$PrimitiveLaTeXBlock$Loop(
					A3(
						$author$project$Parser$PrimitiveLaTeXBlock$handleSpecialBlock,
						$author$project$MicroLaTeX$Parser$ClassifyBlock$CSpecialBlock(label),
						currentLine,
						state));
			case 3:
				var _v2 = $elm$core$List$head(state.c);
				if (_v2.$ === 1) {
					return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						A3($author$project$Parser$PrimitiveLaTeXBlock$dispatchBeginBlock, $author$project$MicroLaTeX$Parser$ClassifyBlock$CMathBlockDelim, currentLine, state));
				} else {
					var label = _v2.a;
					return A2(
						$elm$core$List$member,
						label.y,
						_List_fromArray(
							[
								$author$project$MicroLaTeX$Parser$ClassifyBlock$CBeginBlock('code')
							])) ? $author$project$Parser$PrimitiveLaTeXBlock$Loop(state) : (_Utils_eq(label.y, $author$project$MicroLaTeX$Parser$ClassifyBlock$CMathBlockDelim) ? $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						A4(
							$author$project$Parser$PrimitiveLaTeXBlock$endBlockOnMatch,
							$elm$core$Maybe$Just(label),
							$author$project$MicroLaTeX$Parser$ClassifyBlock$CMathBlockDelim,
							currentLine,
							state)) : $author$project$Parser$PrimitiveLaTeXBlock$Loop(
						A3($author$project$Parser$PrimitiveLaTeXBlock$dispatchBeginBlock, $author$project$MicroLaTeX$Parser$ClassifyBlock$CMathBlockDelim, currentLine, state)));
				}
			case 4:
				return $author$project$Parser$PrimitiveLaTeXBlock$Loop(
					A2($author$project$Parser$PrimitiveLaTeXBlock$handleVerbatimBlock, currentLine, state));
			case 5:
				return A2($author$project$Parser$PrimitiveLaTeXBlock$plainText, state, currentLine);
			default:
				return A2($author$project$Parser$PrimitiveLaTeXBlock$emptyLine, currentLine, state);
		}
	}
};
var $author$project$Parser$PrimitiveLaTeXBlock$parseLoop = function (lines) {
	return $author$project$Parser$PrimitiveLaTeXBlock$finalize(
		A2(
			$author$project$Parser$PrimitiveLaTeXBlock$loop,
			$author$project$Parser$PrimitiveLaTeXBlock$init(lines),
			$author$project$Parser$PrimitiveLaTeXBlock$nextStep));
};
var $author$project$Parser$PrimitiveLaTeXBlock$parse = function (lines) {
	return $author$project$Parser$PrimitiveLaTeXBlock$parseLoop(lines).ai;
};
var $author$project$Parser$PrimitiveBlock$empty = {
	gn: _List_Nil,
	dW: 2,
	bM: _List_fromArray(
		['???']),
	fb: $elm$core$Maybe$Nothing,
	hb: 0,
	eo: 0,
	fA: $elm$core$Maybe$Nothing,
	ey: 0,
	w: $elm$core$Dict$empty,
	h7: '???'
};
var $author$project$Parser$PrimitiveBlock$parsePlainText_ = function (lines) {
	return _List_fromArray(
		[
			{
			gn: _List_Nil,
			dW: 0,
			bM: lines,
			fb: $elm$core$Maybe$Nothing,
			hb: 0,
			eo: 0,
			fA: $elm$core$Maybe$Just('verbatim'),
			ey: 0,
			w: $elm$core$Dict$empty,
			h7: A2($elm$core$String$join, '\n', lines)
		}
		]);
};
var $author$project$Parser$PrimitiveBlock$parsePlainText = function (lines) {
	var rest = A2($elm$core$List$drop, 2, lines);
	var firstLines = A2($elm$core$List$take, 2, lines);
	var title = A2(
		$elm$core$String$contains,
		'| title',
		A2(
			$elm$core$Maybe$withDefault,
			'',
			$elm$core$List$head(firstLines))) ? $elm$core$String$trim(
		A2(
			$elm$core$Maybe$withDefault,
			'((no title))',
			A2($elm_community$list_extra$List$Extra$getAt, 1, firstLines))) : '((no title))';
	var titleBLock = _Utils_update(
		$author$project$Parser$PrimitiveBlock$empty,
		{
			gn: _List_Nil,
			dW: 1,
			bM: _List_fromArray(
				['| title', title, '']),
			fA: $elm$core$Maybe$Just('title'),
			h7: A2($elm$core$String$join, '\n', lines)
		});
	return A2(
		$elm$core$List$cons,
		titleBLock,
		$author$project$Parser$PrimitiveBlock$parsePlainText_(rest));
};
var $author$project$Parser$PrimitiveBlock$finalize = function (block) {
	var content = $elm$core$List$reverse(block.bM);
	var sourceText = A2($elm$core$String$join, '\n', content);
	return _Utils_update(
		block,
		{bM: content, h7: sourceText});
};
var $author$project$Parser$PrimitiveBlock$init = F3(
	function (lang, isVerbatimLine, lines) {
		return {ai: _List_Nil, cA: 0, aU: $elm$core$Maybe$Nothing, bX: false, ei: false, hb: 0, el: isVerbatimLine, dB: '0, START', dC: lang, eo: 0, X: lines, ey: 0};
	});
var $author$project$Parser$PrimitiveBlock$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Parser$PrimitiveBlock$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$PrimitiveBlock$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$Parser$PrimitiveBlock$addCurrentLine_ = F2(
	function (line, block) {
		var prefix = line.ez;
		var content = line.bM;
		return (!block.dW) ? (_Utils_eq(
			block.fA,
			$elm$core$Maybe$Just('math')) ? _Utils_update(
			block,
			{
				bM: A2($elm$core$List$cons, line.bM, block.bM),
				h7: block.h7 + ('\n' + (prefix + content))
			}) : _Utils_update(
			block,
			{
				bM: A2(
					$elm$core$List$cons,
					_Utils_ap(line.ez, line.bM),
					block.bM),
				h7: block.h7 + ('\n' + (prefix + content))
			})) : _Utils_update(
			block,
			{
				bM: A2($elm$core$List$cons, line.bM, block.bM),
				h7: block.h7 + ('\n' + (prefix + content))
			});
	});
var $author$project$Parser$PrimitiveBlock$addCurrentLine2 = F2(
	function (state, currentLine) {
		var _v0 = state.aU;
		if (_v0.$ === 1) {
			return _Utils_update(
				state,
				{
					X: A2($elm$core$List$drop, 1, state.X)
				});
		} else {
			var block = _v0.a;
			return _Utils_update(
				state,
				{
					cA: state.cA + 1,
					aU: $elm$core$Maybe$Just(
						A2($author$project$Parser$PrimitiveBlock$addCurrentLine_, currentLine, block)),
					eo: state.eo + 1,
					X: A2($elm$core$List$drop, 1, state.X),
					ey: state.ey + $elm$core$String$length(currentLine.bM)
				});
		}
	});
var $author$project$Parser$PrimitiveBlock$advance = F2(
	function (newPosition, state) {
		return _Utils_update(
			state,
			{
				cA: state.cA + 1,
				eo: state.eo + 1,
				X: A2($elm$core$List$drop, 1, state.X),
				ey: newPosition
			});
	});
var $author$project$Parser$PrimitiveBlock$adjustBlock = function (block) {
	return (_Utils_eq(
		block.fA,
		$elm$core$Maybe$Just('section')) && _Utils_eq(block.gn, _List_Nil)) ? _Utils_update(
		block,
		{
			gn: _List_fromArray(
				['1'])
		}) : ((_Utils_eq(
		block.fA,
		$elm$core$Maybe$Just('subsection')) && _Utils_eq(block.gn, _List_Nil)) ? _Utils_update(
		block,
		{
			gn: _List_fromArray(
				['2'])
		}) : ((_Utils_eq(
		block.fA,
		$elm$core$Maybe$Just('subsubsection')) && _Utils_eq(block.gn, _List_Nil)) ? _Utils_update(
		block,
		{
			gn: _List_fromArray(
				['3'])
		}) : block));
};
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $author$project$Parser$PrimitiveBlock$cleanArgs = function (strs) {
	var _v0 = A2(
		$elm_community$list_extra$List$Extra$findIndex,
		function (t) {
			return A2($elm$core$String$contains, ':', t);
		},
		strs);
	if (_v0.$ === 1) {
		return strs;
	} else {
		var k = _v0.a;
		return A2($elm$core$List$take, k, strs);
	}
};
var $author$project$Parser$PrimitiveBlock$KVInKey = 0;
var $author$project$Parser$PrimitiveBlock$KVInValue = 1;
var $author$project$Parser$PrimitiveBlock$nextKVStep = function (state) {
	var _v0 = $elm_community$list_extra$List$Extra$uncons(state.aX);
	if (_v0.$ === 1) {
		var kvList_ = function () {
			var _v2 = state.aV;
			if (_v2.$ === 1) {
				return state.ba;
			} else {
				var key = _v2.a;
				return A2(
					$elm$core$List$map,
					function (_v3) {
						var k = _v3.a;
						var v = _v3.b;
						return _Utils_Tuple2(
							k,
							$elm$core$List$reverse(v));
					},
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, state.aD),
						state.ba));
			}
		}();
		return $author$project$Parser$PrimitiveBlock$Done(
			$elm$core$Dict$fromList(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var k = _v1.a;
						var v = _v1.b;
						return _Utils_Tuple2(
							k,
							A2($elm$core$String$join, ' ', v));
					},
					kvList_)));
	} else {
		var _v4 = _v0.a;
		var item = _v4.a;
		var rest = _v4.b;
		var _v5 = state.bq;
		if (!_v5) {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v6 = state.aV;
				if (_v6.$ === 1) {
					return $author$project$Parser$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{
								aV: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								aX: rest,
								bq: 1
							}));
				} else {
					var key = _v6.a;
					return $author$project$Parser$PrimitiveBlock$Loop(
						{
							aV: $elm$core$Maybe$Just(
								A2($elm$core$String$dropRight, 1, item)),
							aD: _List_Nil,
							aX: rest,
							ba: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(key, state.aD),
								state.ba),
							bq: 1
						});
				}
			} else {
				return $author$project$Parser$PrimitiveBlock$Loop(
					_Utils_update(
						state,
						{aX: rest}));
			}
		} else {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v7 = state.aV;
				if (_v7.$ === 1) {
					return $author$project$Parser$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{
								aV: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								aD: _List_Nil,
								aX: rest,
								bq: 1
							}));
				} else {
					var key = _v7.a;
					return $author$project$Parser$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{
								aV: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								aD: _List_Nil,
								aX: rest,
								ba: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(key, state.aD),
									state.ba),
								bq: 1
							}));
				}
			} else {
				return $author$project$Parser$PrimitiveBlock$Loop(
					_Utils_update(
						state,
						{
							aD: A2($elm$core$List$cons, item, state.aD),
							aX: rest
						}));
			}
		}
	}
};
var $author$project$Parser$PrimitiveBlock$prepareKVData = function (data_) {
	var initialState = {aV: $elm$core$Maybe$Nothing, aD: _List_Nil, aX: data_, ba: _List_Nil, bq: 0};
	return A2($author$project$Parser$PrimitiveBlock$loop, initialState, $author$project$Parser$PrimitiveBlock$nextKVStep);
};
var $author$project$Parser$PrimitiveBlock$explode = function (txt) {
	return A2(
		$elm$core$List$map,
		$elm$core$String$split(':'),
		txt);
};
var $author$project$Parser$PrimitiveBlock$fix = function (strs) {
	if (strs.b) {
		if (strs.b.b) {
			var a = strs.a;
			var _v1 = strs.b;
			var b = _v1.a;
			return A2(
				$elm$core$List$cons,
				a + ':',
				A2($elm$core$List$cons, b, _List_Nil));
		} else {
			var a = strs.a;
			return A2($elm$core$List$cons, a, _List_Nil);
		}
	} else {
		return _List_Nil;
	}
};
var $author$project$Parser$PrimitiveBlock$prepareList = function (strs) {
	return $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$author$project$Parser$PrimitiveBlock$fix,
			$author$project$Parser$PrimitiveBlock$explode(strs)));
};
var $author$project$Parser$PrimitiveBlock$argsAndProperties = function (words) {
	var args = $author$project$Parser$PrimitiveBlock$cleanArgs(words);
	var namedArgs = A2(
		$elm$core$List$drop,
		$elm$core$List$length(args),
		words);
	var properties = $author$project$Parser$PrimitiveBlock$prepareKVData(
		$author$project$Parser$PrimitiveBlock$prepareList(namedArgs));
	return _Utils_Tuple2(words, properties);
};
var $elm$core$String$words = _String_words;
var $author$project$L0$Parser$Line$getNameAndArgs = function (line) {
	var normalizedLine = $elm$core$String$trim(line.bM);
	if (A2($elm$core$String$left, 2, normalizedLine) === '||') {
		var words = $elm$core$String$words(
			A2($elm$core$String$dropLeft, 3, normalizedLine));
		var name = A2(
			$elm$core$Maybe$withDefault,
			'anon',
			$elm$core$List$head(words));
		var args = A2($elm$core$List$drop, 1, words);
		return _Utils_Tuple2(
			$elm$core$Maybe$Just(name),
			args);
	} else {
		if (A2($elm$core$String$left, 1, normalizedLine) === '|') {
			var words = $elm$core$String$words(
				A2($elm$core$String$dropLeft, 2, normalizedLine));
			var name = A2(
				$elm$core$Maybe$withDefault,
				'anon',
				$elm$core$List$head(words));
			var args = A2($elm$core$List$drop, 1, words);
			return _Utils_Tuple2(
				$elm$core$Maybe$Just(name),
				args);
		} else {
			if (A2($elm$core$String$left, 2, line.bM) === '$$') {
				return _Utils_Tuple2(
					$elm$core$Maybe$Just('math'),
					_List_Nil);
			} else {
				return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
			}
		}
	}
};
var $author$project$Compiler$Util$getBracketedItems = function (str) {
	var _v0 = A2(
		$elm$parser$Parser$run,
		$author$project$Compiler$Util$many($author$project$Compiler$Util$bracketedItemParser),
		str);
	if (!_v0.$) {
		var val = _v0.a;
		return val;
	} else {
		return _List_Nil;
	}
};
var $author$project$MicroLaTeX$Parser$Line$getNameAndArgs = function (line) {
	var normalizedLine = $elm$core$String$trim(line.bM);
	var name = function () {
		var _v0 = A2($author$project$Compiler$Util$getMicroLaTeXItem, 'begin', normalizedLine);
		if (!_v0.$) {
			var str = _v0.a;
			return $elm$core$Maybe$Just(str);
		} else {
			return (normalizedLine === '$$') ? $elm$core$Maybe$Just('math') : $elm$core$Maybe$Nothing;
		}
	}();
	return _Utils_Tuple2(
		name,
		$author$project$Compiler$Util$getBracketedItems(normalizedLine));
};
var $elm$core$String$trimRight = _String_trimRight;
var $author$project$XMarkdown$Line$getNameAndArgs = function (line) {
	return (A2($elm$core$String$left, 3, line.bM) === '```') ? _Utils_Tuple2(
		$elm$core$Maybe$Just('code'),
		_List_Nil) : ((A2($elm$core$String$left, 3, line.bM) === '|| ') ? _Utils_Tuple2(
		$elm$core$Maybe$Just(
			$elm$core$String$trimRight(
				A2($elm$core$String$dropLeft, 3, line.bM))),
		_List_Nil) : ((A2($elm$core$String$left, 2, line.bM) === '$$') ? _Utils_Tuple2(
		$elm$core$Maybe$Just('math'),
		_List_Nil) : ((A2($elm$core$String$left, 2, line.bM) === '| ') ? _Utils_Tuple2(
		$elm$core$Maybe$Just(
			$elm$core$String$trimRight(
				A2($elm$core$String$dropLeft, 2, line.bM))),
		_List_Nil) : _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil))));
};
var $author$project$Parser$Line$getNameAndArgs = F2(
	function (lang, line) {
		switch (lang) {
			case 1:
				return $author$project$MicroLaTeX$Parser$Line$getNameAndArgs(line);
			case 0:
				return $author$project$L0$Parser$Line$getNameAndArgs(line);
			case 2:
				return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
			default:
				return $author$project$XMarkdown$Line$getNameAndArgs(line);
		}
	});
var $author$project$Parser$PrimitiveBlock$elaborate = F3(
	function (lang, line, pb) {
		if (_Utils_eq(
			pb.bM,
			_List_fromArray(
				['']))) {
			return pb;
		} else {
			var content = (!pb.dW) ? A2($elm$core$List$map, $elm$core$String$trimLeft, pb.bM) : pb.bM;
			var _v0 = A2($author$project$Parser$Line$getNameAndArgs, lang, line);
			var name = _v0.a;
			var args_ = _v0.b;
			var _v1 = $author$project$Parser$PrimitiveBlock$argsAndProperties(args_);
			var args = _v1.a;
			var properties = _v1.b;
			return _Utils_update(
				pb,
				{gn: args, bM: content, fA: name, w: properties});
		}
	});
var $author$project$Parser$Line$getBlockType = F2(
	function (lang, line_) {
		var line = $elm$core$String$trim(line_);
		switch (lang) {
			case 0:
				return (A2($elm$core$String$left, 2, line) === '||') ? 0 : ((A2($elm$core$String$left, 2, line) === '$$') ? 0 : ((A2($elm$core$String$left, 1, line) === '|') ? 1 : 2));
			case 1:
				return (A2($elm$core$String$left, 2, line) === '||') ? 0 : ((A2($elm$core$String$left, 2, line) === '$$') ? 0 : ((A2($elm$core$String$left, 1, line) === '|') ? 1 : 2));
			case 2:
				return 2;
			default:
				return (A2($elm$core$String$left, 3, line) === '```') ? 0 : ((A2($elm$core$String$left, 3, line) === '|| ') ? 0 : ((A2($elm$core$String$left, 2, line) === '$$') ? 0 : ((A2($elm$core$String$left, 2, line) === '| ') ? 1 : 2)));
		}
	});
var $author$project$Parser$PrimitiveBlock$blockFromLine = F2(
	function (lang, line) {
		var indent = line.hb;
		var lineNumber = line.eo;
		var position = line.ey;
		var prefix = line.ez;
		var content = line.bM;
		return A3(
			$author$project$Parser$PrimitiveBlock$elaborate,
			lang,
			line,
			{
				gn: _List_Nil,
				dW: A2($author$project$Parser$Line$getBlockType, lang, line.bM),
				bM: _List_fromArray(
					[
						_Utils_ap(prefix, content)
					]),
				fb: $elm$core$Maybe$Nothing,
				hb: indent,
				eo: lineNumber,
				fA: $elm$core$Maybe$Nothing,
				ey: position,
				w: $elm$core$Dict$empty,
				h7: ''
			});
	});
var $author$project$Parser$PrimitiveBlock$dropLast = function (list) {
	return A2(
		$elm$core$List$take,
		$elm$core$List$length(list) - 1,
		list);
};
var $author$project$Parser$PrimitiveBlock$commitBlock = F2(
	function (state, currentLine) {
		var _v0 = state.aU;
		if (_v0.$ === 1) {
			return _Utils_update(
				state,
				{
					hb: currentLine.hb,
					X: A2($elm$core$List$drop, 1, state.X)
				});
		} else {
			var block_ = _v0.a;
			var block = function () {
				var _v2 = block_.dW;
				switch (_v2) {
					case 2:
						return block_;
					case 1:
						return $author$project$Parser$PrimitiveBlock$adjustBlock(
							_Utils_update(
								block_,
								{
									bM: $author$project$Parser$PrimitiveBlock$dropLast(block_.bM)
								}));
					default:
						return _Utils_eq(
							$elm$core$List$head(block_.bM),
							$elm$core$Maybe$Just('```')) ? _Utils_update(
							block_,
							{
								bM: A2(
									$elm$core$List$filter,
									function (l) {
										return l !== '```';
									},
									block_.bM)
							}) : _Utils_update(
							block_,
							{
								bM: $author$project$Parser$PrimitiveBlock$dropLast(block_.bM)
							});
				}
			}();
			var _v1 = _Utils_eq(
				block.bM,
				_List_fromArray(
					[''])) ? _Utils_Tuple2($elm$core$Maybe$Nothing, state.ai) : _Utils_Tuple2(
				$elm$core$Maybe$Just(
					A2($author$project$Parser$PrimitiveBlock$blockFromLine, state.dC, currentLine)),
				A2($elm$core$List$cons, block, state.ai));
			var currentBlock = _v1.a;
			var newBlocks = _v1.b;
			return _Utils_update(
				state,
				{
					ai: newBlocks,
					cA: state.cA + 1,
					aU: currentBlock,
					bX: false,
					ei: state.el(currentLine.bM),
					eo: state.eo + 1,
					X: A2($elm$core$List$drop, 1, state.X),
					ey: state.ey + $elm$core$String$length(currentLine.bM)
				});
		}
	});
var $author$project$Parser$PrimitiveBlock$createBlock = F2(
	function (state, currentLine) {
		var newBlock = $elm$core$Maybe$Just(
			A2($author$project$Parser$PrimitiveBlock$blockFromLine, state.dC, currentLine));
		var blocks = function () {
			var _v0 = state.aU;
			if (_v0.$ === 1) {
				return state.ai;
			} else {
				var block = _v0.a;
				return _Utils_eq(
					block.bM,
					_List_fromArray(
						[''])) ? state.ai : A2($elm$core$List$cons, block, state.ai);
			}
		}();
		return _Utils_update(
			state,
			{
				ai: blocks,
				cA: state.cA + 1,
				aU: newBlock,
				bX: true,
				hb: currentLine.hb,
				eo: state.eo + 1,
				X: A2($elm$core$List$drop, 1, state.X),
				ey: state.ey + $elm$core$String$length(currentLine.bM)
			});
	});
var $author$project$Parser$Line$isEmpty = function (line) {
	return (!line.hb) && (line.bM === '');
};
var $author$project$Parser$Line$isNonEmptyBlank = function (line) {
	return (line.hb > 0) && (line.bM === '');
};
var $author$project$Parser$PrimitiveBlock$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.X);
	if (_v0.$ === 1) {
		var _v1 = state.aU;
		if (_v1.$ === 1) {
			return $author$project$Parser$PrimitiveBlock$Done(
				$elm$core$List$reverse(state.ai));
		} else {
			var block_ = _v1.a;
			var block = _Utils_update(
				block_,
				{
					bM: $author$project$Parser$PrimitiveBlock$dropLast(block_.bM)
				});
			var blocks = _Utils_eq(
				block.bM,
				_List_fromArray(
					[''])) ? $elm$core$List$reverse(state.ai) : $elm$core$List$reverse(
				A2($elm$core$List$cons, block, state.ai));
			return $author$project$Parser$PrimitiveBlock$Done(blocks);
		}
	} else {
		var rawLine = _v0.a;
		var reportAction = F2(
			function (state_, currentLine_) {
				var _v3 = _Utils_Tuple3(
					state_.bX,
					$author$project$Parser$Line$isEmpty(currentLine_),
					$author$project$Parser$Line$isNonEmptyBlank(currentLine_));
				if (!_v3.a) {
					if (_v3.b) {
						return $elm$core$String$fromInt(state_.eo) + (': advance' + (' ++ :: ' + currentLine_.bM));
					} else {
						if (_v3.c) {
							return $elm$core$String$fromInt(state_.eo) + (': advance2 (PASS)' + (' ++ :: ' + currentLine_.bM));
						} else {
							return $elm$core$String$fromInt(state_.eo) + (': createBlock' + (' ++ :: ' + currentLine_.bM));
						}
					}
				} else {
					if (!_v3.b) {
						return $elm$core$String$fromInt(state_.eo) + (': addCurrentLine2' + (' ++ :: ' + currentLine_.bM));
					} else {
						return $elm$core$String$fromInt(state_.eo) + (': commitBlock' + (' ++ :: ' + currentLine_.bM));
					}
				}
			});
		var newPosition = (rawLine === '') ? (state.ey + 1) : ((state.ey + $elm$core$String$length(rawLine)) + 1);
		var currentLine = A3($author$project$Parser$Line$classify, state.ey, state.eo + 1, rawLine);
		var _v2 = _Utils_Tuple3(
			state.bX,
			$author$project$Parser$Line$isEmpty(currentLine),
			$author$project$Parser$Line$isNonEmptyBlank(currentLine));
		if (!_v2.a) {
			if (_v2.b) {
				return $author$project$Parser$PrimitiveBlock$Loop(
					A2(
						$author$project$Parser$PrimitiveBlock$advance,
						newPosition,
						_Utils_update(
							state,
							{dB: '1, EMPTY'})));
			} else {
				if (_v2.c) {
					return $author$project$Parser$PrimitiveBlock$Loop(
						A2(
							$author$project$Parser$PrimitiveBlock$advance,
							newPosition,
							_Utils_update(
								state,
								{dB: '2, PASS'})));
				} else {
					return $author$project$Parser$PrimitiveBlock$Loop(
						A2(
							$author$project$Parser$PrimitiveBlock$createBlock,
							_Utils_update(
								state,
								{dB: '3, NEW'}),
							currentLine));
				}
			}
		} else {
			if (!_v2.b) {
				return $author$project$Parser$PrimitiveBlock$Loop(
					A2(
						$author$project$Parser$PrimitiveBlock$addCurrentLine2,
						_Utils_update(
							state,
							{dB: '4, ADD'}),
						currentLine));
			} else {
				return $author$project$Parser$PrimitiveBlock$Loop(
					A2(
						$author$project$Parser$PrimitiveBlock$commitBlock,
						_Utils_update(
							state,
							{dB: '5, COMMIT'}),
						currentLine));
			}
		}
	}
};
var $author$project$Parser$PrimitiveBlock$parse_ = F3(
	function (lang, isVerbatimLine, lines) {
		return A2(
			$elm$core$List$map,
			function (block) {
				return $author$project$Parser$PrimitiveBlock$finalize(block);
			},
			A2(
				$author$project$Parser$PrimitiveBlock$loop,
				A3($author$project$Parser$PrimitiveBlock$init, lang, isVerbatimLine, lines),
				$author$project$Parser$PrimitiveBlock$nextStep));
	});
var $author$project$Parser$PrimitiveBlock$toPrimitiveBlock = function (block) {
	return {gn: block.gn, dW: block.dW, bM: block.bM, fb: block.fb, hb: block.en, eo: block.eo, fA: block.fA, ey: block.ey, w: block.w, h7: block.h7};
};
var $author$project$Parser$PrimitiveBlock$parse = F3(
	function (lang, isVerbatimLine, lines) {
		switch (lang) {
			case 0:
				return A3($author$project$Parser$PrimitiveBlock$parse_, lang, isVerbatimLine, lines);
			case 1:
				return A2(
					$elm$core$List$map,
					$author$project$Parser$PrimitiveBlock$toPrimitiveBlock,
					$author$project$Parser$PrimitiveLaTeXBlock$parse(lines));
			case 2:
				return $author$project$Parser$PrimitiveBlock$parsePlainText(lines);
			default:
				return A3($author$project$Parser$PrimitiveBlock$parse_, lang, isVerbatimLine, lines);
		}
	});
var $author$project$Markup$toPrimitiveBlocks = F2(
	function (lang, str) {
		return A3(
			$author$project$Parser$PrimitiveBlock$parse,
			lang,
			$author$project$Markup$isVerbatimLine,
			$elm$core$String$lines(str));
	});
var $author$project$MicroLaTeX$Parser$Transform$handleImage = function (block) {
	var words = $elm$core$String$words(
		A3(
			$elm$core$String$replace,
			'}',
			'',
			A3(
				$elm$core$String$replace,
				'\\image{',
				'',
				A2(
					$elm$core$Maybe$withDefault,
					'???',
					$elm$core$List$head(block.bM)))));
	var _v0 = $author$project$Parser$PrimitiveBlock$argsAndProperties(
		A2($elm$core$List$drop, 1, words));
	var properties_ = _v0.b;
	var properties = properties_;
	return _Utils_update(
		block,
		{
			gn: _List_Nil,
			dW: 0,
			bM: A2($elm$core$List$take, 1, words),
			fA: $elm$core$Maybe$Just('image'),
			w: properties
		});
};
var $author$project$MicroLaTeX$Parser$Transform$sectionDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('section', '1'),
			_Utils_Tuple2('subsection', '2'),
			_Utils_Tuple2('subsubsection', '3'),
			_Utils_Tuple2('subheading', '4')
		]));
var $author$project$MicroLaTeX$Parser$Transform$handlePseudoBlockWithContent = F3(
	function (name, maybeArg, block) {
		if (maybeArg.$ === 1) {
			return _Utils_update(
				block,
				{
					gn: _List_Nil,
					dW: 1,
					bM: _List_Nil,
					fA: $elm$core$Maybe$Just(name)
				});
		} else {
			var arg = maybeArg.a;
			if (name === 'image') {
				return $author$project$MicroLaTeX$Parser$Transform$handleImage(block);
			} else {
				var _v1 = A2($elm$core$Dict$get, name, $author$project$MicroLaTeX$Parser$Transform$sectionDict);
				if (_v1.$ === 1) {
					return _Utils_update(
						block,
						{
							gn: _List_fromArray(
								[arg]),
							dW: 1,
							bM: _List_fromArray(
								[arg]),
							fA: $elm$core$Maybe$Just(name)
						});
				} else {
					var val = _v1.a;
					return _Utils_update(
						block,
						{
							gn: A2($elm$core$List$cons, val, _List_Nil),
							dW: 1,
							bM: _List_fromArray(
								[arg]),
							fA: $elm$core$Maybe$Just('section')
						});
				}
			}
		}
	});
var $author$project$Compiler$Util$macroValParserX = function (macroName) {
	return A2(
		$elm$parser$Parser$map,
		$elm$core$String$trim,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								$elm$parser$Parser$succeed($elm$core$String$slice),
								$elm$parser$Parser$chompUntil('\\' + (macroName + '{'))),
							$elm$parser$Parser$symbol('\\' + (macroName + '{'))),
						$elm$parser$Parser$spaces),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$getOffset,
						$elm$parser$Parser$chompUntilEndOr('!!!!'))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource));
};
var $author$project$MicroLaTeX$Parser$Transform$normalize = function (list) {
	if (list.b && (list.a === '')) {
		var rest = list.b;
		return rest;
	} else {
		return list;
	}
};
var $author$project$MicroLaTeX$Parser$Transform$pseudoBlockNamesWithContent = _List_fromArray(
	['title', 'section', 'subsection', 'subsubsection', 'subheading', 'setcounter', 'contents', 'endnotes', 'image']);
var $author$project$MicroLaTeX$Parser$Transform$transform = function (block) {
	var normalizedContent = $author$project$MicroLaTeX$Parser$Transform$normalize(
		A2($elm$core$List$map, $elm$core$String$trimLeft, block.bM));
	var _v0 = _Utils_Tuple2(block.dW, normalizedContent);
	if (!_v0.a) {
		var _v1 = _v0.a;
		return block;
	} else {
		if (_v0.b.b) {
			var _v2 = _v0.b;
			var firstLine = _v2.a;
			var name = (A2($elm$core$String$left, 1, firstLine) === '\\') ? A2(
				$elm$core$Maybe$withDefault,
				'---',
				$elm$core$List$head(
					A2(
						$elm$core$String$split,
						'{',
						A2($elm$core$String$dropLeft, 1, firstLine)))) : firstLine;
			var arg = function () {
				var _v3 = A2(
					$elm$parser$Parser$run,
					$author$project$Compiler$Util$macroValParserX(name),
					firstLine);
				if (!_v3.$) {
					var result = _v3.a;
					return $elm$core$Maybe$Just(
						A2($elm$core$String$dropRight, 1, result));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			return A2($elm$core$List$member, name, $author$project$MicroLaTeX$Parser$Transform$pseudoBlockNamesWithContent) ? A3($author$project$MicroLaTeX$Parser$Transform$handlePseudoBlockWithContent, name, arg, block) : block;
		} else {
			return block;
		}
	}
};
var $author$project$XMarkdown$Transform$handleItem = F3(
	function (block, firstLine, rest) {
		return _Utils_update(
			block,
			{
				dW: 1,
				bM: A2($elm$core$List$cons, firstLine, rest),
				fA: $elm$core$Maybe$Just('item')
			});
	});
var $author$project$XMarkdown$Transform$handleMath = function (block) {
	return _Utils_update(
		block,
		{
			dW: 0,
			bM: A2(
				$elm$core$List$filter,
				function (item) {
					return item !== '';
				},
				block.bM),
			fA: $elm$core$Maybe$Just('math')
		});
};
var $author$project$XMarkdown$Transform$handleNumberedItem = F3(
	function (block, firstLine, rest) {
		return _Utils_update(
			block,
			{
				dW: 1,
				bM: A2($elm$core$List$cons, firstLine, rest),
				fA: $elm$core$Maybe$Just('numbered')
			});
	});
var $author$project$XMarkdown$Transform$handleQuotation = F2(
	function (block, firstLine) {
		var args = $elm$core$String$words(
			A2($elm$core$String$dropLeft, 2, firstLine));
		return _Utils_update(
			block,
			{
				gn: args,
				dW: 1,
				bM: A2(
					$elm$core$List$cons,
					A2($elm$core$String$join, ' ', args),
					A2($elm$core$List$drop, 1, block.bM)),
				fA: $elm$core$Maybe$Just('quotation')
			});
	});
var $author$project$XMarkdown$Transform$handleTitle = F2(
	function (block, firstLine) {
		var words = A2($elm$core$String$split, ' ', firstLine);
		var _v0 = A2(
			$elm$core$Maybe$map,
			$elm$core$String$length,
			$elm$core$List$head(words));
		if (_v0.$ === 1) {
			return block;
		} else {
			if (!_v0.a) {
				return block;
			} else {
				var n = _v0.a;
				var level = $elm$core$String$fromInt(n);
				var first = '| section ' + $elm$core$String$fromInt(n);
				return _Utils_update(
					block,
					{
						gn: _List_fromArray(
							[level]),
						dW: 1,
						bM: _List_fromArray(
							[
								A2(
								$elm$core$String$join,
								' ',
								A2($elm$core$List$drop, 1, words))
							]),
						fA: $elm$core$Maybe$Just('section')
					});
			}
		}
	});
var $author$project$XMarkdown$Transform$handleVerbatim = F2(
	function (block, rest) {
		return _Utils_update(
			block,
			{
				dW: 0,
				bM: _Utils_eq(
					A2(
						$elm$core$Maybe$map,
						$elm$core$String$trim,
						$elm_community$list_extra$List$Extra$last(rest)),
					$elm$core$Maybe$Just('```')) ? $author$project$Compiler$Util$dropLast(block.bM) : block.bM,
				fA: $elm$core$Maybe$Just('code')
			});
	});
var $author$project$XMarkdown$Transform$normalize = function (list) {
	if (list.b && (list.a === '')) {
		var rest = list.b;
		return rest;
	} else {
		return list;
	}
};
var $author$project$XMarkdown$Transform$transform = function (block) {
	var normalizedContent = $author$project$XMarkdown$Transform$normalize(
		A2(
			$elm$core$List$map,
			$elm$core$String$dropLeft(block.hb),
			block.bM));
	if (normalizedContent.b) {
		var firstLine = normalizedContent.a;
		var rest_ = normalizedContent.b;
		return (A2($elm$core$String$left, 1, firstLine) === '#') ? A2($author$project$XMarkdown$Transform$handleTitle, block, firstLine) : ((A2($elm$core$String$left, 2, firstLine) === '$$') ? $author$project$XMarkdown$Transform$handleMath(block) : ((A2($elm$core$String$left, 3, firstLine) === '```') ? A2($author$project$XMarkdown$Transform$handleVerbatim, block, rest_) : ((A2($elm$core$String$left, 2, firstLine) === '- ') ? A3(
			$author$project$XMarkdown$Transform$handleItem,
			block,
			A2($elm$core$String$dropLeft, 2, firstLine),
			rest_) : ((A2($elm$core$String$left, 2, firstLine) === '. ') ? A3(
			$author$project$XMarkdown$Transform$handleNumberedItem,
			block,
			A2($elm$core$String$dropLeft, 2, firstLine),
			rest_) : ((A2($elm$core$String$left, 2, firstLine) === '> ') ? A2($author$project$XMarkdown$Transform$handleQuotation, block, firstLine) : ((!block.dW) ? (_Utils_eq(block.fA, $elm$core$Maybe$Nothing) ? _Utils_update(
			block,
			{
				bM: A2(
					$elm$core$List$filter,
					function (line) {
						return line !== '```';
					},
					block.bM),
				fA: $elm$core$Maybe$Just('code')
			}) : block) : block))))));
	} else {
		return block;
	}
};
var $author$project$Compiler$Transform$transform = F2(
	function (lang, block) {
		switch (lang) {
			case 0:
				return block;
			case 1:
				return $author$project$MicroLaTeX$Parser$Transform$transform(block);
			case 2:
				return block;
			default:
				return $author$project$XMarkdown$Transform$transform(block);
		}
	});
var $author$project$Compiler$DifferentialParser$chunker = F2(
	function (lang, str) {
		return A2(
			$elm$core$List$map,
			$author$project$Compiler$Transform$transform(lang),
			A2($author$project$Markup$toPrimitiveBlocks, lang, str));
	});
var $author$project$Parser$PrimitiveBlock$eq = F2(
	function (b1, b2) {
		return (!_Utils_eq(b1.h7, b2.h7)) ? false : ((!_Utils_eq(b1.fA, b2.fA)) ? false : ((!_Utils_eq(b1.gn, b2.gn)) ? false : true));
	});
var $toastal$either$Either$Left = function (a) {
	return {$: 0, a: a};
};
var $author$project$Parser$Block$VerbatimBlock = function (a) {
	return {$: 2, a: a};
};
var $author$project$Parser$Block$empty_ = {
	gn: _List_Nil,
	dW: $author$project$Parser$Block$VerbatimBlock(_List_Nil),
	bM: $toastal$either$Either$Left('-'),
	fb: $elm$core$Maybe$Nothing,
	g7: '-',
	hb: 0,
	eo: 0,
	eq: _List_Nil,
	fA: $elm$core$Maybe$Nothing,
	hA: 0,
	w: $elm$core$Dict$empty,
	h7: '-',
	ii: '-'
};
var $author$project$Parser$Block$empty = $author$project$Parser$Block$empty_;
var $zwilias$elm_rosetree$Tree$children = function (_v0) {
	var c = _v0.b;
	return c;
};
var $author$project$Parser$Tree$EmptyBlocks = 0;
var $zwilias$elm_rosetree$Tree$Zipper$Zipper = $elm$core$Basics$identity;
var $zwilias$elm_rosetree$Tree$Zipper$fromTree = function (t) {
	return {d: _List_Nil, f: _List_Nil, u: _List_Nil, gZ: t};
};
var $zwilias$elm_rosetree$Tree$Tree = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $zwilias$elm_rosetree$Tree$tree = $zwilias$elm_rosetree$Tree$Tree;
var $author$project$Parser$Tree$init = F3(
	function (defaultNode, indentation, blocks) {
		var _v0 = $elm$core$List$head(blocks);
		if (_v0.$ === 1) {
			return $elm$core$Result$Err(0);
		} else {
			var rootBlock = _v0.a;
			return $elm$core$Result$Ok(
				{
					ai: A2($elm$core$List$drop, 1, blocks),
					e9: $zwilias$elm_rosetree$Tree$Zipper$fromTree(
						A2($zwilias$elm_rosetree$Tree$tree, defaultNode, _List_Nil)),
					hb: 0,
					cO: indentation,
					a8: _List_Nil,
					en: 0,
					aA: $zwilias$elm_rosetree$Tree$Zipper$fromTree(
						A2($zwilias$elm_rosetree$Tree$tree, defaultNode, _List_Nil))
				});
		}
	});
var $author$project$Parser$Tree$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Parser$Tree$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$Tree$Loop = function (a) {
	return {$: 0, a: a};
};
var $zwilias$elm_rosetree$Tree$appendChild = F2(
	function (c, _v0) {
		var v = _v0.a;
		var cs = _v0.b;
		return A2(
			$zwilias$elm_rosetree$Tree$Tree,
			v,
			_Utils_ap(
				cs,
				_List_fromArray(
					[c])));
	});
var $zwilias$elm_rosetree$Tree$Zipper$tree = function (_v0) {
	var focus = _v0.gZ;
	return focus;
};
var $author$project$Parser$Tree$appendChild = F2(
	function (t, z) {
		return A2(
			$zwilias$elm_rosetree$Tree$appendChild,
			t,
			$zwilias$elm_rosetree$Tree$Zipper$tree(z));
	});
var $zwilias$elm_rosetree$Tree$Zipper$replaceTree = F2(
	function (t, _v0) {
		var zipper = _v0;
		return _Utils_update(
			zipper,
			{gZ: t});
	});
var $author$project$Parser$Tree$attachAtFocus = F2(
	function (t, z) {
		return A2(
			$zwilias$elm_rosetree$Tree$Zipper$replaceTree,
			A2($author$project$Parser$Tree$appendChild, t, z),
			z);
	});
var $zwilias$elm_rosetree$Tree$singleton = function (v) {
	return A2($zwilias$elm_rosetree$Tree$Tree, v, _List_Nil);
};
var $author$project$Parser$Tree$handleEQ = F3(
	function (indent, block, state) {
		var newTree = $zwilias$elm_rosetree$Tree$singleton(block);
		return _Utils_update(
			state,
			{
				ai: A2($elm$core$List$drop, 1, state.ai),
				hb: indent,
				aA: A2($author$project$Parser$Tree$attachAtFocus, newTree, state.aA)
			});
	});
var $zwilias$elm_rosetree$Tree$label = function (_v0) {
	var v = _v0.a;
	return v;
};
var $zwilias$elm_rosetree$Tree$Zipper$lastChild = function (_v0) {
	var zipper = _v0;
	var _v1 = $elm$core$List$reverse(
		$zwilias$elm_rosetree$Tree$children(zipper.gZ));
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var c = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			{
				d: _List_Nil,
				f: rest,
				u: A2(
					$elm$core$List$cons,
					{
						d: zipper.d,
						f: zipper.f,
						dB: $zwilias$elm_rosetree$Tree$label(zipper.gZ)
					},
					zipper.u),
				gZ: c
			});
	}
};
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $author$project$Parser$Tree$pushIndentationChange = F2(
	function (k, ks) {
		return A2(
			$elm$core$List$cons,
			k - $elm$core$List$sum(ks),
			ks);
	});
var $author$project$Parser$Tree$handleGT = F3(
	function (indent, block, state) {
		var newTree = $zwilias$elm_rosetree$Tree$singleton(block);
		var _v0 = $zwilias$elm_rosetree$Tree$Zipper$lastChild(state.aA);
		if (_v0.$ === 1) {
			return _Utils_update(
				state,
				{
					ai: A2($elm$core$List$drop, 1, state.ai),
					hb: indent,
					a8: A2(
						$author$project$Parser$Tree$pushIndentationChange,
						state.cO(block),
						state.a8),
					en: state.en + 1,
					aA: A2($author$project$Parser$Tree$attachAtFocus, newTree, state.aA)
				});
		} else {
			var newZipper = _v0.a;
			return _Utils_update(
				state,
				{
					ai: A2($elm$core$List$drop, 1, state.ai),
					hb: indent,
					a8: A2(
						$author$project$Parser$Tree$pushIndentationChange,
						state.cO(block),
						state.a8),
					en: state.en + 1,
					aA: A2($author$project$Parser$Tree$attachAtFocus, newTree, newZipper)
				});
		}
	});
var $zwilias$elm_rosetree$Tree$Zipper$reconstruct = F4(
	function (focus, before, after, l) {
		return A2(
			$zwilias$elm_rosetree$Tree$tree,
			l,
			_Utils_ap(
				$elm$core$List$reverse(before),
				_Utils_ap(
					_List_fromArray(
						[focus]),
					after)));
	});
var $zwilias$elm_rosetree$Tree$Zipper$parent = function (_v0) {
	var zipper = _v0;
	var _v1 = zipper.u;
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var crumb = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			{
				d: crumb.d,
				f: crumb.f,
				u: rest,
				gZ: A4($zwilias$elm_rosetree$Tree$Zipper$reconstruct, zipper.gZ, zipper.f, zipper.d, crumb.dB)
			});
	}
};
var $author$project$Parser$Tree$popUntilAux = F2(
	function (goal, _v0) {
		popUntilAux:
		while (true) {
			var sum = _v0.c6;
			var popped = _v0.b6;
			var remaining = _v0.cc;
			var _v1 = $elm$core$List$head(remaining);
			if (_v1.$ === 1) {
				return {b6: popped, cc: remaining, c6: sum};
			} else {
				var k = _v1.a;
				var newSum = sum + k;
				if (_Utils_cmp(newSum, goal) < 0) {
					var $temp$goal = goal,
						$temp$_v0 = {
						b6: popped + 1,
						cc: A2($elm$core$List$drop, 1, remaining),
						c6: newSum
					};
					goal = $temp$goal;
					_v0 = $temp$_v0;
					continue popUntilAux;
				} else {
					return {
						b6: popped + 1,
						cc: A2($elm$core$List$drop, 1, remaining),
						c6: newSum
					};
				}
			}
		}
	});
var $author$project$Parser$Tree$popUntil = F2(
	function (goal, input) {
		return A2(
			$author$project$Parser$Tree$popUntilAux,
			goal,
			{b6: 0, cc: input, c6: 0});
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (!maybeValue.$) {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Parser$Tree$repeatM = F3(
	function (n, f, x) {
		repeatM:
		while (true) {
			if (!n) {
				return x;
			} else {
				var $temp$n = n - 1,
					$temp$f = f,
					$temp$x = A2($elm$core$Maybe$andThen, f, x);
				n = $temp$n;
				f = $temp$f;
				x = $temp$x;
				continue repeatM;
			}
		}
	});
var $author$project$Parser$Tree$repeat = F3(
	function (n, f, x) {
		var _v0 = A3(
			$author$project$Parser$Tree$repeatM,
			n,
			f,
			$elm$core$Maybe$Just(x));
		if (_v0.$ === 1) {
			return x;
		} else {
			var y = _v0.a;
			return y;
		}
	});
var $author$project$Parser$Tree$handleLT = F3(
	function (indent, block, state) {
		var newTree = $zwilias$elm_rosetree$Tree$singleton(block);
		var deltaInfo = A2($author$project$Parser$Tree$popUntil, state.hb - indent, state.a8);
		var deltaLevel = deltaInfo.b6;
		return _Utils_update(
			state,
			{
				ai: A2($elm$core$List$drop, 1, state.ai),
				hb: indent,
				a8: deltaInfo.cc,
				en: state.en - deltaLevel,
				aA: A2(
					$author$project$Parser$Tree$attachAtFocus,
					newTree,
					A3($author$project$Parser$Tree$repeat, deltaLevel, $zwilias$elm_rosetree$Tree$Zipper$parent, state.aA))
			});
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $zwilias$elm_rosetree$Tree$Zipper$previousSibling = function (_v0) {
	var zipper = _v0;
	var _v1 = zipper.f;
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var previous = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			{
				d: A2($elm$core$List$cons, zipper.gZ, zipper.d),
				f: rest,
				u: zipper.u,
				gZ: previous
			});
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$firstSibling = function (zipper) {
	firstSibling:
	while (true) {
		var _v0 = $zwilias$elm_rosetree$Tree$Zipper$previousSibling(zipper);
		if (_v0.$ === 1) {
			return zipper;
		} else {
			var z = _v0.a;
			var $temp$zipper = z;
			zipper = $temp$zipper;
			continue firstSibling;
		}
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$root = function (zipper) {
	root:
	while (true) {
		var _v0 = $zwilias$elm_rosetree$Tree$Zipper$parent(zipper);
		if (_v0.$ === 1) {
			return $zwilias$elm_rosetree$Tree$Zipper$firstSibling(zipper);
		} else {
			var z = _v0.a;
			var $temp$zipper = z;
			zipper = $temp$zipper;
			continue root;
		}
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$toTree = A2($elm$core$Basics$composeL, $zwilias$elm_rosetree$Tree$Zipper$tree, $zwilias$elm_rosetree$Tree$Zipper$root);
var $author$project$Parser$Tree$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.ai);
	if (_v0.$ === 1) {
		return $author$project$Parser$Tree$Done(
			$zwilias$elm_rosetree$Tree$Zipper$toTree(state.aA));
	} else {
		var block = _v0.a;
		var blockIndentaton = state.cO(block);
		var _v1 = A2($elm$core$Basics$compare, blockIndentaton, state.hb);
		switch (_v1) {
			case 2:
				return $author$project$Parser$Tree$Loop(
					A3($author$project$Parser$Tree$handleGT, blockIndentaton, block, state));
			case 1:
				return $author$project$Parser$Tree$Loop(
					A3($author$project$Parser$Tree$handleEQ, blockIndentaton, block, state));
			default:
				return $author$project$Parser$Tree$Loop(
					A3($author$project$Parser$Tree$handleLT, blockIndentaton, block, state));
		}
	}
};
var $author$project$Parser$Tree$fromBlocks = F3(
	function (defaultNode, indentation, blocks) {
		var _v0 = A3($author$project$Parser$Tree$init, defaultNode, indentation, blocks);
		if (_v0.$ === 1) {
			var error = _v0.a;
			return $elm$core$Result$Err(error);
		} else {
			var initialState = _v0.a;
			return $elm$core$Result$Ok(
				A2($author$project$Parser$Tree$loop, initialState, $author$project$Parser$Tree$nextStep));
		}
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (!ra.$) {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $author$project$Parser$Tree$forestFromBlocks = F3(
	function (defaultNode, indentation, blocks) {
		return A2(
			$elm$core$Result$map,
			$zwilias$elm_rosetree$Tree$children,
			A3(
				$author$project$Parser$Tree$fromBlocks,
				defaultNode,
				indentation,
				A2($elm$core$List$cons, defaultNode, blocks)));
	});
var $author$project$Compiler$DifferentialParser$indentation = function (_v0) {
	var data = _v0;
	return data.hb;
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (!result.$) {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$Compiler$DifferentialParser$forestFromBlocks = function (blocks) {
	return A2(
		$elm$core$Result$withDefault,
		_List_Nil,
		A3($author$project$Parser$Tree$forestFromBlocks, $author$project$Parser$Block$empty, $author$project$Compiler$DifferentialParser$indentation, blocks));
};
var $author$project$Parser$Block$getLineNumber = function (_v0) {
	var lineNumber = _v0.eo;
	return lineNumber;
};
var $zwilias$elm_rosetree$Tree$foldlHelp = F4(
	function (f, acc, trees, nextSets) {
		foldlHelp:
		while (true) {
			if (!trees.b) {
				if (nextSets.b) {
					var set = nextSets.a;
					var sets = nextSets.b;
					var $temp$f = f,
						$temp$acc = acc,
						$temp$trees = set,
						$temp$nextSets = sets;
					f = $temp$f;
					acc = $temp$acc;
					trees = $temp$trees;
					nextSets = $temp$nextSets;
					continue foldlHelp;
				} else {
					return acc;
				}
			} else {
				if (!trees.a.b.b) {
					var _v2 = trees.a;
					var d = _v2.a;
					var rest = trees.b;
					var $temp$f = f,
						$temp$acc = A2(f, d, acc),
						$temp$trees = rest,
						$temp$nextSets = nextSets;
					f = $temp$f;
					acc = $temp$acc;
					trees = $temp$trees;
					nextSets = $temp$nextSets;
					continue foldlHelp;
				} else {
					var _v3 = trees.a;
					var d = _v3.a;
					var xs = _v3.b;
					var rest = trees.b;
					var $temp$f = f,
						$temp$acc = A2(f, d, acc),
						$temp$trees = xs,
						$temp$nextSets = A2($elm$core$List$cons, rest, nextSets);
					f = $temp$f;
					acc = $temp$acc;
					trees = $temp$trees;
					nextSets = $temp$nextSets;
					continue foldlHelp;
				}
			}
		}
	});
var $zwilias$elm_rosetree$Tree$foldl = F3(
	function (f, acc, t) {
		return A4(
			$zwilias$elm_rosetree$Tree$foldlHelp,
			f,
			acc,
			_List_fromArray(
				[t]),
			_List_Nil);
	});
var $zwilias$elm_rosetree$Tree$foldr = F3(
	function (f, acc, t) {
		return A3(
			$elm$core$List$foldl,
			f,
			acc,
			A3($zwilias$elm_rosetree$Tree$foldl, $elm$core$List$cons, _List_Nil, t));
	});
var $zwilias$elm_rosetree$Tree$flatten = function (t) {
	return A3($zwilias$elm_rosetree$Tree$foldr, $elm$core$List$cons, _List_Nil, t);
};
var $author$project$Parser$Transform$getMessages = function (_v0) {
	var messages = _v0.eq;
	return messages;
};
var $author$project$Markup$messagesFromTree = function (tree) {
	return $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$author$project$Parser$Transform$getMessages,
			$zwilias$elm_rosetree$Tree$flatten(tree)));
};
var $author$project$Markup$messagesFromForest = function (forest) {
	return $elm$core$List$concat(
		A2($elm$core$List$map, $author$project$Markup$messagesFromTree, forest));
};
var $author$project$Scripta$Language$L0Lang = 0;
var $author$project$Scripta$Language$PlainTextLang = 2;
var $author$project$Scripta$Language$XMarkdownLang = 3;
var $author$project$MicroLaTeX$Parser$Expression$initWithTokens = F2(
	function (lineNumber, tokens) {
		return {
			g: _List_Nil,
			eo: lineNumber,
			eq: _List_Nil,
			b2: $elm$core$List$length(tokens),
			k: _List_Nil,
			dL: 0,
			Y: 0,
			cq: $elm$core$List$reverse(tokens)
		};
	});
var $author$project$Parser$Helpers$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Parser$Helpers$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$Helpers$Loop = function (a) {
	return {$: 0, a: a};
};
var $rtfeldman$console_print$Console$bgBlue = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[44m', str, '\u001B[49m']));
};
var $author$project$Tools$forklog_ = F6(
	function (fg, bg, label, width, f, a) {
		return a;
	});
var $rtfeldman$console_print$Console$white = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[37m', str, '\u001B[39m']));
};
var $author$project$Tools$forklogBlue = F4(
	function (label, width, f, a) {
		return A6($author$project$Tools$forklog_, $rtfeldman$console_print$Console$white, $rtfeldman$console_print$Console$bgBlue, label, width, f, a);
	});
var $rtfeldman$console_print$Console$bgCyan = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[46m', str, '\u001B[49m']));
};
var $rtfeldman$console_print$Console$black = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[30m', str, '\u001B[39m']));
};
var $author$project$Tools$forklogCyan = F4(
	function (label, width, f, a) {
		return A6($author$project$Tools$forklog_, $rtfeldman$console_print$Console$black, $rtfeldman$console_print$Console$bgCyan, label, width, f, a);
	});
var $rtfeldman$console_print$Console$bgRed = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[41m', str, '\u001B[49m']));
};
var $author$project$Tools$forklogRed = F4(
	function (label, width, f, a) {
		return A6($author$project$Tools$forklog_, $rtfeldman$console_print$Console$white, $rtfeldman$console_print$Console$bgRed, label, width, f, a);
	});
var $author$project$Parser$Expr$Fun = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $author$project$Parser$Expr$Text = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$MicroLaTeX$Parser$Expression$boostMeta = F2(
	function (lineNumber, meta) {
		return _Utils_update(
			meta,
			{
				g7: $elm$core$String$fromInt(lineNumber) + ('.' + meta.g7)
			});
	});
var $author$project$MicroLaTeX$Parser$Expression$exprOfToken = F2(
	function (lineNumber, token) {
		switch (token.$) {
			case 3:
				var str = token.a;
				var meta = token.b;
				return $elm$core$Maybe$Just(
					A3(
						$author$project$Parser$Expr$Fun,
						str,
						_List_Nil,
						A2($author$project$MicroLaTeX$Parser$Expression$boostMeta, lineNumber, meta)));
			case 6:
				var str = token.a;
				var meta = token.b;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Parser$Expr$Text,
						str,
						A2($author$project$MicroLaTeX$Parser$Expression$boostMeta, lineNumber, meta)));
			case 7:
				var str = token.a;
				var meta = token.b;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Parser$Expr$Text,
						str,
						A2($author$project$MicroLaTeX$Parser$Expression$boostMeta, lineNumber, meta)));
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$MicroLaTeX$Parser$Expression$commit = F2(
	function (token, state) {
		var _v0 = A2($author$project$MicroLaTeX$Parser$Expression$exprOfToken, state.eo, token);
		if (_v0.$ === 1) {
			return state;
		} else {
			var expr = _v0.a;
			return _Utils_update(
				state,
				{
					g: A2($elm$core$List$cons, expr, state.g)
				});
		}
	});
var $author$project$MicroLaTeX$Parser$Expression$pushOnStack = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				k: A2($elm$core$List$cons, token, state.k)
			});
	});
var $author$project$MicroLaTeX$Parser$Expression$push = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				k: A2($elm$core$List$cons, token, state.k)
			});
	});
var $author$project$MicroLaTeX$Parser$Expression$pushOrCommit = F2(
	function (token, state) {
		return $elm$core$List$isEmpty(state.k) ? A2($author$project$MicroLaTeX$Parser$Expression$commit, token, state) : A2($author$project$MicroLaTeX$Parser$Expression$push, token, state);
	});
var $author$project$MicroLaTeX$Parser$Expression$pushToken = F2(
	function (token, state) {
		switch (token.$) {
			case 6:
				return A2($author$project$MicroLaTeX$Parser$Expression$pushOrCommit, token, state);
			case 3:
				return A2($author$project$MicroLaTeX$Parser$Expression$commit, token, state);
			case 7:
				return A2($author$project$MicroLaTeX$Parser$Expression$pushOrCommit, token, state);
			case 8:
				return A2($author$project$MicroLaTeX$Parser$Expression$pushOnStack, token, state);
			case 4:
				return A2($author$project$MicroLaTeX$Parser$Expression$pushOnStack, token, state);
			case 5:
				return A2($author$project$MicroLaTeX$Parser$Expression$pushOnStack, token, state);
			case 9:
				return A2($author$project$MicroLaTeX$Parser$Expression$pushOnStack, token, state);
			case 0:
				return A2($author$project$MicroLaTeX$Parser$Expression$pushOnStack, token, state);
			case 1:
				return A2($author$project$MicroLaTeX$Parser$Expression$pushOnStack, token, state);
			case 2:
				return A2($author$project$MicroLaTeX$Parser$Expression$pushOnStack, token, state);
			default:
				return A2($author$project$MicroLaTeX$Parser$Expression$pushOnStack, token, state);
		}
	});
var $author$project$MicroLaTeX$Parser$Expression$dummyTokenIndex = 0;
var $author$project$MicroLaTeX$Parser$Expression$dummyLocWithId = {bl: 0, bp: 0, g7: 'dummy (3)', dy: $author$project$MicroLaTeX$Parser$Expression$dummyTokenIndex};
var $author$project$MicroLaTeX$Parser$Expression$errorMessage = function (message) {
	return A3(
		$author$project$Parser$Expr$Fun,
		'errorHighlight',
		_List_fromArray(
			[
				A2($author$project$Parser$Expr$Text, message, $author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Parser$Expression$errorMessage2 = function (message) {
	return A3(
		$author$project$Parser$Expr$Fun,
		'blue',
		_List_fromArray(
			[
				A2($author$project$Parser$Expr$Text, message, $author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Parser$Expression$errorMessageBold = function (message) {
	return A3(
		$author$project$Parser$Expr$Fun,
		'bold',
		_List_fromArray(
			[
				A3(
				$author$project$Parser$Expr$Fun,
				'red',
				_List_fromArray(
					[
						A2($author$project$Parser$Expr$Text, message, $author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Parser$Expression$errorSuffix = function (rest) {
	if (!rest.b) {
		return ']?';
	} else {
		if ((rest.a.$ === 7) && (!rest.b.b)) {
			var _v1 = rest.a;
			return ']?';
		} else {
			return '';
		}
	}
};
var $author$project$Parser$Helpers$prependMessage = F3(
	function (lineNumber, message, messages) {
		return A2(
			$elm$core$List$cons,
			message + (' (line ' + ($elm$core$String$fromInt(lineNumber) + ')')),
			A2($elm$core$List$take, 2, messages));
	});
var $author$project$MicroLaTeX$Parser$Token$RB = function (a) {
	return {$: 2, a: a};
};
var $author$project$MicroLaTeX$Parser$Expression$addErrorMessage = F2(
	function (message, state) {
		var committed = A2(
			$elm$core$List$cons,
			$author$project$MicroLaTeX$Parser$Expression$errorMessage(message),
			state.g);
		return _Utils_update(
			state,
			{g: committed});
	});
var $author$project$MicroLaTeX$Parser$Symbol$value = function (symbol) {
	switch (symbol) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return -1;
		case 3:
			return 0;
		case 4:
			return 0;
		case 5:
			return 1;
		case 6:
			return -1;
		case 7:
			return 0;
		case 8:
			return 0;
		case 9:
			return 0;
		default:
			return 0;
	}
};
var $author$project$MicroLaTeX$Parser$Symbol$balance = function (symbols) {
	return $elm$core$List$sum(
		A2($elm$core$List$map, $author$project$MicroLaTeX$Parser$Symbol$value, symbols));
};
var $author$project$MicroLaTeX$Parser$Expression$makeId = F2(
	function (a, b) {
		return $elm$core$String$fromInt(a) + ('.' + $elm$core$String$fromInt(b));
	});
var $author$project$MicroLaTeX$Parser$Expression$boostMeta_ = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.bl;
		var end = _v0.bp;
		var index = _v0.dy;
		return {
			bl: begin,
			bp: end,
			g7: A2($author$project$MicroLaTeX$Parser$Expression$makeId, lineNumber, tokenIndex),
			dy: index
		};
	});
var $author$project$MicroLaTeX$Parser$Expression$braceErrorAsString = function (k) {
	return (k < 0) ? ('Too many right braces (' + ($elm$core$String$fromInt(-k) + ')')) : ('Too many left braces (' + ($elm$core$String$fromInt(k) + ')'));
};
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $author$project$MicroLaTeX$Parser$Expression$bracketError = function (k) {
	if (k < 0) {
		var braces = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, -k, ']'));
		return $author$project$MicroLaTeX$Parser$Expression$errorMessage(
			' ' + (braces + (' extra { (' + ($elm$core$String$fromInt(-k) + ')'))));
	} else {
		var braces = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, k, '{'));
		return $author$project$MicroLaTeX$Parser$Expression$errorMessage(' ' + ('\\' + (braces + '?')));
	}
};
var $author$project$MicroLaTeX$Parser$Symbol$B = 0;
var $author$project$MicroLaTeX$Parser$Symbol$C = 7;
var $author$project$MicroLaTeX$Parser$Symbol$Fn = 8;
var $author$project$MicroLaTeX$Parser$Symbol$L = 1;
var $author$project$MicroLaTeX$Parser$Symbol$LM = 5;
var $author$project$MicroLaTeX$Parser$Symbol$M = 4;
var $author$project$MicroLaTeX$Parser$Symbol$R = 2;
var $author$project$MicroLaTeX$Parser$Symbol$RM = 6;
var $author$project$MicroLaTeX$Parser$Symbol$St = 3;
var $author$project$MicroLaTeX$Parser$Symbol$TEs = 10;
var $author$project$MicroLaTeX$Parser$Symbol$Ws = 9;
var $author$project$MicroLaTeX$Parser$Symbol$toSymbol2 = function (token) {
	switch (token.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 8:
			return 4;
		case 4:
			return 5;
		case 5:
			return 6;
		case 9:
			return 7;
		case 6:
			return 3;
		case 3:
			return 8;
		case 7:
			return 9;
		default:
			return 10;
	}
};
var $author$project$MicroLaTeX$Parser$Symbol$convertTokens2 = function (tokens) {
	return A2($elm$core$List$map, $author$project$MicroLaTeX$Parser$Symbol$toSymbol2, tokens);
};
var $author$project$MicroLaTeX$Parser$Expression$dummyLoc = {bl: 0, bp: 0, dy: $author$project$MicroLaTeX$Parser$Expression$dummyTokenIndex};
var $author$project$MicroLaTeX$Parser$Token$TLB = 1;
var $author$project$MicroLaTeX$Parser$Match$getSegment = F2(
	function (sym, symbols) {
		var seg_ = A2(
			$elm_community$list_extra$List$Extra$takeWhile,
			function (sym_) {
				return !_Utils_eq(sym_, sym);
			},
			A2($elm$core$List$drop, 1, symbols));
		var n = $elm$core$List$length(seg_);
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, n + 1, symbols);
		if (_v0.$ === 1) {
			return A2($elm$core$List$cons, sym, seg_);
		} else {
			var last = _v0.a;
			return A2(
				$elm$core$List$cons,
				sym,
				_Utils_ap(
					seg_,
					_List_fromArray(
						[last])));
		}
	});
var $author$project$Compiler$Util$middle = function (list) {
	return $author$project$Compiler$Util$dropLast(
		A2($elm$core$List$drop, 1, list));
};
var $author$project$MicroLaTeX$Parser$Match$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.c7);
	if (_v0.$ === 1) {
		return $author$project$Parser$Helpers$Done($elm$core$Maybe$Nothing);
	} else {
		var sym = _v0.a;
		var brackets = state.dg + $author$project$MicroLaTeX$Parser$Symbol$value(sym);
		return (brackets < 0) ? $author$project$Parser$Helpers$Done($elm$core$Maybe$Nothing) : ((!brackets) ? $author$project$Parser$Helpers$Done(
			$elm$core$Maybe$Just(state.dy)) : $author$project$Parser$Helpers$Loop(
			{
				dg: brackets,
				dy: state.dy + 1,
				c7: A2($elm$core$List$drop, 1, state.c7)
			}));
	}
};
var $author$project$MicroLaTeX$Parser$Match$match = function (symbols) {
	var _v0 = $elm$core$List$head(symbols);
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var symbol = _v0.a;
		return A2(
			$elm$core$List$member,
			symbol,
			_List_fromArray(
				[7, 4])) ? $elm$core$Maybe$Just(
			$elm$core$List$length(
				A2($author$project$MicroLaTeX$Parser$Match$getSegment, symbol, symbols)) - 1) : (($author$project$MicroLaTeX$Parser$Symbol$value(symbol) < 0) ? $elm$core$Maybe$Nothing : A2(
			$author$project$Parser$Helpers$loop,
			{
				dg: $author$project$MicroLaTeX$Parser$Symbol$value(symbol),
				dy: 1,
				c7: A2($elm$core$List$drop, 1, symbols)
			},
			$author$project$MicroLaTeX$Parser$Match$nextStep));
	}
};
var $author$project$MicroLaTeX$Parser$Match$splitAt = F2(
	function (k, list) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, k, list),
			A2($elm$core$List$drop, k, list));
	});
var $author$project$MicroLaTeX$Parser$Match$split = function (symbols) {
	var _v0 = $author$project$MicroLaTeX$Parser$Match$match(symbols);
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var k = _v0.a;
		return $elm$core$Maybe$Just(
			A2($author$project$MicroLaTeX$Parser$Match$splitAt, k + 1, symbols));
	}
};
var $author$project$MicroLaTeX$Parser$Match$hasReducibleArgs = function (symbols) {
	hasReducibleArgs:
	while (true) {
		_v15$7:
		while (true) {
			if (!symbols.b) {
				return true;
			} else {
				switch (symbols.a) {
					case 5:
						if (((symbols.b.b && (symbols.b.a === 3)) && symbols.b.b.b) && (symbols.b.b.a === 6)) {
							var _v16 = symbols.a;
							var _v17 = symbols.b;
							var _v18 = _v17.a;
							var _v19 = _v17.b;
							var _v20 = _v19.a;
							var _v21 = $author$project$MicroLaTeX$Parser$Match$split(symbols);
							if (_v21.$ === 1) {
								return false;
							} else {
								var _v22 = _v21.a;
								var a = _v22.a;
								var b = _v22.b;
								return $author$project$MicroLaTeX$Parser$Match$hasReducibleArgs(
									$author$project$Compiler$Util$middle(a)) && $author$project$MicroLaTeX$Parser$Match$hasReducibleArgs(b);
							}
						} else {
							break _v15$7;
						}
					case 1:
						var _v23 = symbols.a;
						var _v24 = $author$project$MicroLaTeX$Parser$Match$split(symbols);
						if (_v24.$ === 1) {
							return false;
						} else {
							var _v25 = _v24.a;
							var a = _v25.a;
							var b = _v25.b;
							return $author$project$MicroLaTeX$Parser$Match$hasReducibleArgs(
								$author$project$Compiler$Util$middle(a)) && $author$project$MicroLaTeX$Parser$Match$hasReducibleArgs(b);
						}
					case 7:
						var _v26 = symbols.a;
						return $author$project$MicroLaTeX$Parser$Match$reducibleAux(symbols);
					case 4:
						var _v27 = symbols.a;
						var seg = A2($author$project$MicroLaTeX$Parser$Match$getSegment, 4, symbols);
						if ($author$project$MicroLaTeX$Parser$Match$reducible(seg)) {
							var $temp$symbols = A2(
								$elm$core$List$drop,
								$elm$core$List$length(seg),
								symbols);
							symbols = $temp$symbols;
							continue hasReducibleArgs;
						} else {
							return false;
						}
					case 0:
						var _v28 = symbols.a;
						var rest = symbols.b;
						var $temp$symbols = rest;
						symbols = $temp$symbols;
						continue hasReducibleArgs;
					case 3:
						var _v29 = symbols.a;
						var rest = symbols.b;
						var $temp$symbols = rest;
						symbols = $temp$symbols;
						continue hasReducibleArgs;
					default:
						break _v15$7;
				}
			}
		}
		return false;
	}
};
var $author$project$MicroLaTeX$Parser$Match$reducible = function (symbols) {
	_v2$4:
	while (true) {
		if (symbols.b) {
			switch (symbols.a) {
				case 5:
					if ((((symbols.b.b && (symbols.b.a === 3)) && symbols.b.b.b) && (symbols.b.b.a === 6)) && (!symbols.b.b.b.b)) {
						var _v3 = symbols.a;
						var _v4 = symbols.b;
						var _v5 = _v4.a;
						var _v6 = _v4.b;
						var _v7 = _v6.a;
						return true;
					} else {
						break _v2$4;
					}
				case 4:
					var _v8 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just(4));
				case 7:
					var _v9 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just(7));
				case 0:
					if (symbols.b.b && (symbols.b.a === 3)) {
						var _v10 = symbols.a;
						var _v11 = symbols.b;
						var _v12 = _v11.a;
						var rest = _v11.b;
						var _v13 = $elm_community$list_extra$List$Extra$last(rest);
						if ((!_v13.$) && (_v13.a === 2)) {
							var _v14 = _v13.a;
							return $author$project$MicroLaTeX$Parser$Match$hasReducibleArgs(rest);
						} else {
							return false;
						}
					} else {
						break _v2$4;
					}
				default:
					break _v2$4;
			}
		} else {
			break _v2$4;
		}
	}
	return false;
};
var $author$project$MicroLaTeX$Parser$Match$reducibleAux = function (symbols) {
	var _v0 = $author$project$MicroLaTeX$Parser$Match$split(symbols);
	if (_v0.$ === 1) {
		return false;
	} else {
		var _v1 = _v0.a;
		var a = _v1.a;
		var b = _v1.b;
		return $author$project$MicroLaTeX$Parser$Match$reducible(a) && $author$project$MicroLaTeX$Parser$Match$hasReducibleArgs(b);
	}
};
var $author$project$MicroLaTeX$Parser$Expression$isReducible = function (tokens) {
	var symbols = $author$project$MicroLaTeX$Parser$Symbol$convertTokens2(
		$elm$core$List$reverse(tokens));
	return _Utils_eq(symbols, _List_Nil) ? false : $author$project$MicroLaTeX$Parser$Match$reducible(symbols);
};
var $rtfeldman$console_print$Console$bgYellow = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[43m', str, '\u001B[49m']));
};
var $author$project$Tools$forklogYellow = F4(
	function (label, width, f, a) {
		return A6($author$project$Tools$forklog_, $rtfeldman$console_print$Console$black, $rtfeldman$console_print$Console$bgYellow, label, width, f, a);
	});
var $author$project$Parser$Expr$Verbatim = F3(
	function (a, b, c) {
		return {$: 2, a: a, b: b, c: c};
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $author$project$MicroLaTeX$Parser$Token$stringValue = function (token) {
	switch (token.$) {
		case 0:
			return '\\';
		case 3:
			return 'F';
		case 1:
			return '{';
		case 2:
			return '}';
		case 4:
			return '\\[';
		case 5:
			return '\\]';
		case 6:
			var str = token.a;
			return str;
		case 7:
			var str = token.a;
			return str;
		case 8:
			return '$';
		case 9:
			return '`';
		default:
			return 'tokenError';
	}
};
var $author$project$MicroLaTeX$Parser$Token$toString = function (tokens) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$MicroLaTeX$Parser$Token$stringValue, tokens));
};
var $author$project$MicroLaTeX$Parser$Expression$handleBracketedMath = function (state) {
	var content = $author$project$MicroLaTeX$Parser$Token$toString(
		$elm$core$List$reverse(state.k));
	var trailing = A2($elm$core$String$right, 1, content);
	var committed = (trailing === ']') ? A2(
		$elm$core$List$cons,
		A3(
			$author$project$Parser$Expr$Verbatim,
			'math',
			A2(
				$elm$core$String$dropRight,
				2,
				A2($elm$core$String$dropLeft, 2, content)),
			A3(
				$author$project$MicroLaTeX$Parser$Expression$boostMeta_,
				state.Y,
				2,
				{bl: 0, bp: 0, dy: 0})),
		state.g) : A2(
		$elm$core$List$cons,
		A3(
			$author$project$Parser$Expr$Fun,
			'red',
			_List_fromArray(
				[
					A2($author$project$Parser$Expr$Text, '$', $author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
				]),
			$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId),
		A2(
			$elm$core$List$cons,
			A3(
				$author$project$Parser$Expr$Verbatim,
				'math',
				A3($elm$core$String$replace, '$', '', content),
				{
					bl: 0,
					bp: 0,
					g7: A2($author$project$MicroLaTeX$Parser$Expression$makeId, state.eo, state.Y),
					dy: 0
				}),
			state.g));
	return _Utils_update(
		state,
		{g: committed, k: _List_Nil});
};
var $author$project$MicroLaTeX$Parser$Expression$handleCode = function (state) {
	var content = $author$project$MicroLaTeX$Parser$Token$toString(
		$elm$core$List$reverse(state.k));
	var trailing = A2($elm$core$String$right, 1, content);
	var committed = function () {
		if ((trailing === '`') && (content === '`')) {
			var _v0 = function () {
				var _v1 = state.g;
				if (_v1.b) {
					var first = _v1.a;
					var rest = _v1.b;
					return _Utils_Tuple2(first, rest);
				} else {
					return _Utils_Tuple2(
						A3(
							$author$project$Parser$Expr$Fun,
							'red',
							_List_fromArray(
								[
									A2(
									$author$project$Parser$Expr$Text,
									'????(4)',
									A3($author$project$MicroLaTeX$Parser$Expression$boostMeta_, state.eo, state.Y, $author$project$MicroLaTeX$Parser$Expression$dummyLoc))
								]),
							$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId),
						_List_Nil);
				}
			}();
			var first_ = _v0.a;
			var rest_ = _v0.b;
			return A2(
				$elm$core$List$cons,
				first_,
				A2(
					$elm$core$List$cons,
					A3(
						$author$project$Parser$Expr$Fun,
						'red',
						_List_fromArray(
							[
								A2(
								$author$project$Parser$Expr$Text,
								'`',
								A3($author$project$MicroLaTeX$Parser$Expression$boostMeta_, state.eo, state.Y, $author$project$MicroLaTeX$Parser$Expression$dummyLoc))
							]),
						$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId),
					rest_));
		} else {
			if (trailing === '`') {
				return A2(
					$elm$core$List$cons,
					A3(
						$author$project$Parser$Expr$Verbatim,
						'code',
						A3($elm$core$String$replace, '`', '', content),
						A3(
							$author$project$MicroLaTeX$Parser$Expression$boostMeta_,
							state.eo,
							state.Y,
							{bl: 0, bp: 0, dy: 0})),
					state.g);
			} else {
				return A2(
					$elm$core$List$cons,
					A3(
						$author$project$Parser$Expr$Fun,
						'red',
						_List_fromArray(
							[
								A2($author$project$Parser$Expr$Text, '`', $author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
							]),
						$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId),
					A2(
						$elm$core$List$cons,
						A3(
							$author$project$Parser$Expr$Verbatim,
							'code',
							A3($elm$core$String$replace, '`', '', content),
							A3(
								$author$project$MicroLaTeX$Parser$Expression$boostMeta_,
								state.eo,
								state.Y,
								{bl: 0, bp: 0, dy: 0})),
						state.g));
			}
		}
	}();
	return _Utils_update(
		state,
		{g: committed, k: _List_Nil});
};
var $author$project$MicroLaTeX$Parser$Expression$handleMath = function (state) {
	var _v0 = state.k;
	if ((((((_v0.b && (_v0.a.$ === 8)) && _v0.b.b) && (_v0.b.a.$ === 6)) && _v0.b.b.b) && (_v0.b.b.a.$ === 8)) && (!_v0.b.b.b.b)) {
		var _v1 = _v0.b;
		var _v2 = _v1.a;
		var str = _v2.a;
		var m2 = _v2.b;
		var _v3 = _v1.b;
		return _Utils_update(
			state,
			{
				g: A2(
					$elm$core$List$cons,
					A3(
						$author$project$Parser$Expr$Verbatim,
						'math',
						str,
						A2($author$project$MicroLaTeX$Parser$Expression$boostMeta, state.eo, m2)),
					state.g),
				k: _List_Nil
			});
	} else {
		return state;
	}
};
var $author$project$MicroLaTeX$Parser$Token$BS = function (a) {
	return {$: 0, a: a};
};
var $author$project$MicroLaTeX$Parser$Expression$errorMessage1Part = function (a) {
	return A3(
		$author$project$Parser$Expr$Fun,
		'errorHighlight',
		_List_fromArray(
			[
				A2($author$project$Parser$Expr$Text, a, $author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Parser$Expression$errorMessage3Part = F3(
	function (a, b, c) {
		return _List_fromArray(
			[
				A3(
				$author$project$Parser$Expr$Fun,
				'blue',
				_List_fromArray(
					[
						A2($author$project$Parser$Expr$Text, a, $author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId),
				A3(
				$author$project$Parser$Expr$Fun,
				'errorHighlight',
				_List_fromArray(
					[
						A2($author$project$Parser$Expr$Text, b, $author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId),
				A3(
				$author$project$Parser$Expr$Fun,
				'errorHighlight',
				_List_fromArray(
					[
						A2($author$project$Parser$Expr$Text, c, $author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Parser$Expression$dummyLocWithId)
			]);
	});
var $author$project$MicroLaTeX$Parser$Expression$isLBToken = function (maybeTok) {
	if ((!maybeTok.$) && (maybeTok.a.$ === 1)) {
		return true;
	} else {
		return false;
	}
};
var $author$project$MicroLaTeX$Parser$Expression$split = function (tokens) {
	var _v0 = $author$project$MicroLaTeX$Parser$Match$match(
		$author$project$MicroLaTeX$Parser$Symbol$convertTokens2(tokens));
	if (_v0.$ === 1) {
		return _Utils_Tuple2(tokens, _List_Nil);
	} else {
		var k = _v0.a;
		return A2($author$project$MicroLaTeX$Parser$Match$splitAt, k + 1, tokens);
	}
};
var $author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens = F3(
	function (macroName, lineNumber, tokens) {
		_v7$5:
		while (true) {
			if (tokens.b) {
				switch (tokens.a.$) {
					case 0:
						return A2($author$project$MicroLaTeX$Parser$Expression$reduceTokens, lineNumber, tokens);
					case 6:
						var _v8 = tokens.a;
						var str = _v8.a;
						var m1 = _v8.b;
						var rest = tokens.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$author$project$Parser$Expr$Text,
								str,
								A2($author$project$MicroLaTeX$Parser$Expression$boostMeta, lineNumber, m1)),
							A3($author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, rest));
					case 1:
						var _v9 = $author$project$MicroLaTeX$Parser$Match$match(
							$author$project$MicroLaTeX$Parser$Symbol$convertTokens2(tokens));
						if (_v9.$ === 1) {
							return A3(
								$author$project$MicroLaTeX$Parser$Expression$errorMessage3Part,
								'\\' + A2($elm$core$Maybe$withDefault, 'x', macroName),
								$author$project$MicroLaTeX$Parser$Token$toString(tokens),
								' ?}');
						} else {
							var k = _v9.a;
							var _v10 = A2($author$project$MicroLaTeX$Parser$Match$splitAt, k + 1, tokens);
							var a = _v10.a;
							var b = _v10.b;
							var aa = A2(
								$elm$core$List$drop,
								1,
								A2(
									$elm$core$List$take,
									$elm$core$List$length(a) - 1,
									a));
							return _Utils_ap(
								A2($author$project$MicroLaTeX$Parser$Expression$reduceTokens, lineNumber, aa),
								A3($author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, b));
						}
					case 8:
						if (((tokens.b.b && (tokens.b.a.$ === 6)) && tokens.b.b.b) && (tokens.b.b.a.$ === 8)) {
							var _v11 = tokens.b;
							var _v12 = _v11.a;
							var str = _v12.a;
							var m2 = _v12.b;
							var _v13 = _v11.b;
							var more = _v13.b;
							return A2(
								$elm$core$List$cons,
								A3(
									$author$project$Parser$Expr$Verbatim,
									'math',
									str,
									A2($author$project$MicroLaTeX$Parser$Expression$boostMeta, lineNumber, m2)),
								A3($author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, more));
						} else {
							break _v7$5;
						}
					case 4:
						if (((tokens.b.b && (tokens.b.a.$ === 6)) && tokens.b.b.b) && (tokens.b.b.a.$ === 5)) {
							var _v14 = tokens.b;
							var _v15 = _v14.a;
							var str = _v15.a;
							var m2 = _v15.b;
							var _v16 = _v14.b;
							var more = _v16.b;
							return A2(
								$elm$core$List$cons,
								A3(
									$author$project$Parser$Expr$Verbatim,
									'math',
									str,
									A2($author$project$MicroLaTeX$Parser$Expression$boostMeta, lineNumber, m2)),
								A3($author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, more));
						} else {
							break _v7$5;
						}
					default:
						break _v7$5;
				}
			} else {
				return _List_Nil;
			}
		}
		var token = tokens.a;
		var more = tokens.b;
		var _v17 = A2($author$project$MicroLaTeX$Parser$Expression$exprOfToken, lineNumber, token);
		if (!_v17.$) {
			var expr = _v17.a;
			return A2(
				$elm$core$List$cons,
				expr,
				A3($author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, more));
		} else {
			return _List_fromArray(
				[
					$author$project$MicroLaTeX$Parser$Expression$errorMessage('•••?(7)')
				]);
		}
	});
var $author$project$MicroLaTeX$Parser$Expression$reduceTokens = F2(
	function (lineNumber, tokens) {
		_v0$3:
		while (true) {
			if (tokens.b) {
				switch (tokens.a.$) {
					case 6:
						if (tokens.b.b && (!tokens.b.a.$)) {
							var _v1 = tokens.a;
							var t = _v1.a;
							var m1 = _v1.b;
							var _v2 = tokens.b;
							var m2 = _v2.a.a;
							var rest = _v2.b;
							return A2(
								$elm$core$List$cons,
								A2(
									$author$project$Parser$Expr$Text,
									t,
									A2($author$project$MicroLaTeX$Parser$Expression$boostMeta, lineNumber, m1)),
								A2(
									$author$project$MicroLaTeX$Parser$Expression$reduceTokens,
									lineNumber,
									A2(
										$elm$core$List$cons,
										$author$project$MicroLaTeX$Parser$Token$BS(m2),
										rest)));
						} else {
							var _v3 = tokens.a;
							var t = _v3.a;
							var m2 = _v3.b;
							var rest = tokens.b;
							return A2(
								$elm$core$List$cons,
								A2(
									$author$project$Parser$Expr$Text,
									t,
									A2($author$project$MicroLaTeX$Parser$Expression$boostMeta, lineNumber, m2)),
								A3($author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, rest));
						}
					case 0:
						if (tokens.b.b && (tokens.b.a.$ === 6)) {
							var m1 = tokens.a.a;
							var _v4 = tokens.b;
							var _v5 = _v4.a;
							var name = _v5.a;
							var rest = _v4.b;
							var _v6 = $author$project$MicroLaTeX$Parser$Expression$split(rest);
							var a = _v6.a;
							var b = _v6.b;
							return _Utils_eq(b, _List_Nil) ? _List_fromArray(
								[
									A3(
									$author$project$Parser$Expr$Fun,
									name,
									A3(
										$author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens,
										$elm$core$Maybe$Just(name),
										lineNumber,
										rest),
									m1)
								]) : ($author$project$MicroLaTeX$Parser$Expression$isLBToken(
								$elm$core$List$head(b)) ? _List_fromArray(
								[
									A3(
									$author$project$Parser$Expr$Fun,
									name,
									_Utils_ap(
										A3(
											$author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens,
											$elm$core$Maybe$Just(name),
											lineNumber,
											a),
										A3(
											$author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens,
											$elm$core$Maybe$Just(name),
											lineNumber,
											b)),
									m1)
								]) : _Utils_ap(
								_List_fromArray(
									[
										A3(
										$author$project$Parser$Expr$Fun,
										name,
										A3(
											$author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens,
											$elm$core$Maybe$Just(name),
											lineNumber,
											a),
										m1)
									]),
								A3(
									$author$project$MicroLaTeX$Parser$Expression$reduceRestOfTokens,
									$elm$core$Maybe$Just(name),
									lineNumber,
									b)));
						} else {
							break _v0$3;
						}
					default:
						break _v0$3;
				}
			} else {
				break _v0$3;
			}
		}
		return _List_fromArray(
			[
				$author$project$MicroLaTeX$Parser$Expression$errorMessage1Part('{??}')
			]);
	});
var $author$project$MicroLaTeX$Parser$Expression$reduceState_ = function (state) {
	var symbols = A4(
		$author$project$Tools$forklogYellow,
		'Symbols (reduceState_)',
		12,
		$elm$core$Basics$identity,
		$elm$core$List$reverse(
			$author$project$MicroLaTeX$Parser$Symbol$convertTokens2(state.k)));
	var _v0 = $elm$core$List$head(symbols);
	_v0$4:
	while (true) {
		if (!_v0.$) {
			switch (_v0.a) {
				case 0:
					var _v1 = _v0.a;
					var _v2 = A2(
						$author$project$MicroLaTeX$Parser$Expression$reduceTokens,
						state.eo,
						$elm$core$List$reverse(state.k));
					if (((((_v2.b && (!_v2.a.$)) && (_v2.a.a === 'ERROR')) && _v2.a.b.b) && (_v2.a.b.a.$ === 1)) && (!_v2.a.b.b.b)) {
						var _v3 = _v2.a;
						var _v4 = _v3.b;
						var _v5 = _v4.a;
						var message = _v5.a;
						var rest = _v2.b;
						return _Utils_update(
							state,
							{
								g: _Utils_ap(rest, state.g),
								eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, message, state.eq),
								k: _List_Nil
							});
					} else {
						var exprs = _v2;
						return _Utils_update(
							state,
							{
								g: _Utils_ap(exprs, state.g),
								k: _List_Nil
							});
					}
				case 4:
					var _v6 = _v0.a;
					return $author$project$MicroLaTeX$Parser$Expression$handleMath(state);
				case 5:
					var _v7 = _v0.a;
					return $author$project$MicroLaTeX$Parser$Expression$handleBracketedMath(state);
				case 7:
					var _v8 = _v0.a;
					return $author$project$MicroLaTeX$Parser$Expression$handleCode(state);
				default:
					break _v0$4;
			}
		} else {
			break _v0$4;
		}
	}
	return state;
};
var $author$project$MicroLaTeX$Parser$Token$TBS = 0;
var $author$project$MicroLaTeX$Parser$Token$TCode = 9;
var $author$project$MicroLaTeX$Parser$Token$TF = 3;
var $author$project$MicroLaTeX$Parser$Token$TLMathBrace = 4;
var $author$project$MicroLaTeX$Parser$Token$TMath = 8;
var $author$project$MicroLaTeX$Parser$Token$TRB = 2;
var $author$project$MicroLaTeX$Parser$Token$TRMathBrace = 5;
var $author$project$MicroLaTeX$Parser$Token$TS = 6;
var $author$project$MicroLaTeX$Parser$Token$TTokenError = 10;
var $author$project$MicroLaTeX$Parser$Token$TW = 7;
var $author$project$MicroLaTeX$Parser$Token$type_ = function (token) {
	switch (token.$) {
		case 0:
			return 0;
		case 3:
			return 3;
		case 1:
			return 1;
		case 2:
			return 2;
		case 4:
			return 4;
		case 5:
			return 5;
		case 6:
			return 6;
		case 7:
			return 7;
		case 8:
			return 8;
		case 9:
			return 9;
		default:
			return 10;
	}
};
var $author$project$MicroLaTeX$Parser$Expression$reduceState = function (state) {
	var peek = A2($elm_community$list_extra$List$Extra$getAt, state.Y, state.cq);
	return ($author$project$MicroLaTeX$Parser$Expression$isReducible(state.k) && (!_Utils_eq(
		A2($elm$core$Maybe$map, $author$project$MicroLaTeX$Parser$Token$type_, peek),
		$elm$core$Maybe$Just(1)))) ? $author$project$MicroLaTeX$Parser$Expression$reduceState_(state) : A4(
		$author$project$Tools$forklogRed,
		'Not reducible',
		12,
		function (state_) {
			return $elm$core$List$reverse(
				$author$project$MicroLaTeX$Parser$Symbol$convertTokens2(state_.k));
		},
		state);
};
var $author$project$MicroLaTeX$Parser$Expression$recoverFromError1 = function (state) {
	var k = $author$project$MicroLaTeX$Parser$Symbol$balance(
		$author$project$MicroLaTeX$Parser$Symbol$convertTokens2(
			$elm$core$List$reverse(state.k)));
	var newStack = _Utils_ap(
		A2(
			$elm$core$List$repeat,
			k,
			$author$project$MicroLaTeX$Parser$Token$RB(
				A3($author$project$MicroLaTeX$Parser$Expression$boostMeta_, state.eo, state.Y, $author$project$MicroLaTeX$Parser$Expression$dummyLoc))),
		state.k);
	var newSymbols = $author$project$MicroLaTeX$Parser$Symbol$convertTokens2(
		$elm$core$List$reverse(newStack));
	var reducible = $author$project$MicroLaTeX$Parser$Match$reducible(newSymbols);
	return reducible ? $author$project$Parser$Helpers$Done(
		A2(
			$author$project$MicroLaTeX$Parser$Expression$addErrorMessage,
			' ]? ',
			$author$project$MicroLaTeX$Parser$Expression$reduceState(
				_Utils_update(
					state,
					{
						g: A2(
							$elm$core$List$cons,
							$author$project$MicroLaTeX$Parser$Expression$errorMessage('{'),
							state.g),
						b2: $elm$core$List$length(newStack),
						k: newStack,
						Y: 0
					})))) : $author$project$Parser$Helpers$Done(
		_Utils_update(
			state,
			{
				g: A2(
					$elm$core$List$cons,
					$author$project$MicroLaTeX$Parser$Expression$bracketError(k),
					state.g),
				eq: A3(
					$author$project$Parser$Helpers$prependMessage,
					state.eo,
					$author$project$MicroLaTeX$Parser$Expression$braceErrorAsString(k),
					state.eq)
			}));
};
var $author$project$MicroLaTeX$Parser$Expression$recoverFromError = function (state) {
	var _v0 = $elm$core$List$reverse(state.k);
	_v0$10:
	while (true) {
		if (_v0.b) {
			switch (_v0.a.$) {
				case 0:
					if (_v0.b.b && (_v0.b.a.$ === 6)) {
						if (!_v0.b.b.b) {
							var _v1 = _v0.b;
							var _v2 = _v1.a;
							var fname = _v2.a;
							var m = _v2.b;
							return $author$project$Parser$Helpers$Done(
								_Utils_update(
									state,
									{
										g: A2(
											$elm$core$List$cons,
											A3($author$project$Parser$Expr$Fun, fname, _List_Nil, m),
											state.g),
										k: _List_Nil
									}));
						} else {
							if (_v0.b.b.a.$ === 1) {
								var _v3 = _v0.b;
								var _v4 = _v3.a;
								var fname = _v4.a;
								var _v5 = _v3.b;
								var m3 = _v5.a.a;
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Parser$Expression$errorMessage('\\' + (fname + '{')),
												state.g),
											eq: A3(
												$author$project$Parser$Helpers$prependMessage,
												state.eo,
												'Missing right brace, column ' + $elm$core$String$fromInt(m3.bl),
												state.eq),
											k: _List_Nil,
											Y: m3.dy + 1
										}));
							} else {
								break _v0$10;
							}
						}
					} else {
						break _v0$10;
					}
				case 1:
					if (_v0.b.b) {
						switch (_v0.b.a.$) {
							case 2:
								var _v6 = _v0.b;
								var meta = _v6.a.a;
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Parser$Expression$errorMessage('{?}'),
												state.g),
											eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'Brackets need to enclose something', state.eq),
											k: _List_Nil,
											Y: meta.dy + 1
										}));
							case 1:
								var _v7 = _v0.b;
								var meta = _v7.a.a;
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Parser$Expression$errorMessage('{'),
												state.g),
											eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'You have consecutive left brackets', state.eq),
											k: _List_Nil,
											Y: meta.dy
										}));
							case 6:
								var _v8 = _v0.b;
								var _v9 = _v8.a;
								var fName = _v9.a;
								var meta = _v9.b;
								var rest = _v8.b;
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Parser$Expression$errorMessage(
													$author$project$MicroLaTeX$Parser$Expression$errorSuffix(rest)),
												A2(
													$elm$core$List$cons,
													$author$project$MicroLaTeX$Parser$Expression$errorMessage2('{' + fName),
													state.g)),
											eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'Missing right bracket', state.eq),
											k: _List_Nil,
											Y: meta.dy + 1
										}));
							case 7:
								if (_v0.b.a.a === ' ') {
									var _v10 = _v0.b;
									var _v11 = _v10.a;
									var meta = _v11.b;
									return $author$project$Parser$Helpers$Loop(
										_Utils_update(
											state,
											{
												g: A2(
													$elm$core$List$cons,
													$author$project$MicroLaTeX$Parser$Expression$errorMessage('{ - can\'t have space after the brace '),
													state.g),
												eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'Can\'t have space after left bracket - try [something ...', state.eq),
												k: _List_Nil,
												Y: meta.dy + 1
											}));
								} else {
									break _v0$10;
								}
							default:
								break _v0$10;
						}
					} else {
						return $author$project$Parser$Helpers$Done(
							_Utils_update(
								state,
								{
									g: A2(
										$elm$core$List$cons,
										$author$project$MicroLaTeX$Parser$Expression$errorMessage('..extra{?'),
										state.g),
									eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'That left bracket needs something after it', state.eq),
									b2: 0,
									k: _List_Nil,
									Y: 0
								}));
					}
				case 2:
					var meta = _v0.a.a;
					return $author$project$Parser$Helpers$Loop(
						_Utils_update(
							state,
							{
								g: A2(
									$elm$core$List$cons,
									$author$project$MicroLaTeX$Parser$Expression$errorMessage(' extra }?'),
									state.g),
								eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'Extra right braces(s)', state.eq),
								k: _List_Nil,
								Y: meta.dy + 1
							}));
				case 8:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$MicroLaTeX$Parser$Token$toString(rest);
					var message = (content === '') ? '$?$' : '$ ';
					return $author$project$Parser$Helpers$Loop(
						_Utils_update(
							state,
							{
								g: A2(
									$elm$core$List$cons,
									$author$project$MicroLaTeX$Parser$Expression$errorMessage(message),
									state.g),
								eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'opening dollar sign needs to be matched with a closing one', state.eq),
								b2: 0,
								k: _List_Nil,
								Y: meta.dy + 1
							}));
				case 9:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$MicroLaTeX$Parser$Token$toString(rest);
					var message = (content === '') ? '`?`' : '` ';
					return $author$project$Parser$Helpers$Loop(
						_Utils_update(
							state,
							{
								g: A2(
									$elm$core$List$cons,
									$author$project$MicroLaTeX$Parser$Expression$errorMessageBold(message),
									state.g),
								eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'opening backtick needs to be matched with a closing one', state.eq),
								b2: 0,
								k: _List_Nil,
								Y: meta.dy + 1
							}));
				default:
					break _v0$10;
			}
		} else {
			break _v0$10;
		}
	}
	return $author$project$MicroLaTeX$Parser$Expression$recoverFromError1(state);
};
var $author$project$Parser$Expr$SFun = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Parser$Expr$SText = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$Expr$SVerbatim = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$Parser$Expr$simplify = function (expr) {
	switch (expr.$) {
		case 0:
			var str = expr.a;
			var exprs = expr.b;
			return A2(
				$author$project$Parser$Expr$SFun,
				str,
				A2($elm$core$List$map, $author$project$Parser$Expr$simplify, exprs));
		case 1:
			var str = expr.a;
			return $author$project$Parser$Expr$SText(str);
		default:
			var a = expr.a;
			var b = expr.b;
			return A2($author$project$Parser$Expr$SVerbatim, a, b);
	}
};
var $author$project$MicroLaTeX$Parser$Token$stringValue2 = function (token) {
	switch (token.$) {
		case 0:
			var m = token.a;
			return 'BS:' + $elm$core$String$fromInt(m.dy);
		case 3:
			var m = token.b;
			return 'F:' + $elm$core$String$fromInt(m.dy);
		case 1:
			var m = token.a;
			return 'LB:' + $elm$core$String$fromInt(m.dy);
		case 2:
			var m = token.a;
			return 'RB:' + $elm$core$String$fromInt(m.dy);
		case 4:
			var m = token.a;
			return 'LTB:' + $elm$core$String$fromInt(m.dy);
		case 5:
			var m = token.a;
			return 'RTB:' + $elm$core$String$fromInt(m.dy);
		case 6:
			var str = token.a;
			var m = token.b;
			return 'S ' + (str + (': ' + $elm$core$String$fromInt(m.dy)));
		case 7:
			var m = token.b;
			return 'W:' + $elm$core$String$fromInt(m.dy);
		case 8:
			var m = token.a;
			return '$:' + $elm$core$String$fromInt(m.dy);
		case 9:
			var m = token.a;
			return 'C:' + $elm$core$String$fromInt(m.dy);
		default:
			var m = token.b;
			return 'tokenError:' + $elm$core$String$fromInt(m.dy);
	}
};
var $author$project$MicroLaTeX$Parser$Token$toString2 = function (tokens) {
	return A2(
		$elm$core$String$join,
		'; ',
		A2($elm$core$List$map, $author$project$MicroLaTeX$Parser$Token$stringValue2, tokens));
};
var $author$project$MicroLaTeX$Parser$Expression$show = function (state) {
	return _Utils_Tuple2(
		$author$project$MicroLaTeX$Parser$Token$toString2(
			$elm$core$List$reverse(state.k)),
		A2($elm$core$List$map, $author$project$Parser$Expr$simplify, state.g));
};
var $author$project$MicroLaTeX$Parser$Expression$nextStep = function (state) {
	var _v0 = A2($elm_community$list_extra$List$Extra$getAt, state.Y, state.cq);
	if (_v0.$ === 1) {
		return $elm$core$List$isEmpty(state.k) ? $author$project$Parser$Helpers$Done(
			A4($author$project$Tools$forklogBlue, 'Done', 12, $author$project$MicroLaTeX$Parser$Expression$show, state)) : $author$project$MicroLaTeX$Parser$Expression$recoverFromError(
			A4($author$project$Tools$forklogRed, 'Recover', 12, $author$project$MicroLaTeX$Parser$Expression$show, state));
	} else {
		var token = _v0.a;
		return $author$project$Parser$Helpers$Loop(
			A4(
				$author$project$Tools$forklogCyan,
				'Push-Reduce',
				12,
				$author$project$MicroLaTeX$Parser$Expression$show,
				function (st) {
					return _Utils_update(
						st,
						{dL: st.dL + 1});
				}(
					$author$project$MicroLaTeX$Parser$Expression$reduceState(
						A2(
							$author$project$MicroLaTeX$Parser$Expression$pushToken,
							token,
							_Utils_update(
								state,
								{Y: state.Y + 1}))))));
	}
};
var $author$project$MicroLaTeX$Parser$Expression$run = function (state) {
	return function (state_) {
		return _Utils_update(
			state_,
			{
				g: $elm$core$List$reverse(state_.g)
			});
	}(
		A2($author$project$Parser$Helpers$loop, state, $author$project$MicroLaTeX$Parser$Expression$nextStep));
};
var $author$project$MicroLaTeX$Parser$Token$Normal = 0;
var $author$project$MicroLaTeX$Parser$Token$init = function (str) {
	return {
		bn: $elm$core$Maybe$Nothing,
		cS: 0,
		bz: 0,
		eI: str,
		eJ: $elm$core$String$length(str),
		Y: 0,
		cq: _List_Nil
	};
};
var $author$project$MicroLaTeX$Parser$Token$finish = function (state) {
	var _v0 = state.bn;
	if (!_v0.$) {
		var token = _v0.a;
		return $author$project$Parser$Helpers$Done(
			A2($elm$core$List$cons, token, state.cq));
	} else {
		return $author$project$Parser$Helpers$Done(state.cq);
	}
};
var $elm$core$Basics$ge = _Utils_ge;
var $author$project$MicroLaTeX$Parser$Token$TokenError = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $author$project$MicroLaTeX$Parser$Token$makeId = F2(
	function (a, b) {
		return $elm$core$String$fromInt(a) + ('.' + $elm$core$String$fromInt(b));
	});
var $author$project$MicroLaTeX$Parser$Token$CodeToken = function (a) {
	return {$: 9, a: a};
};
var $author$project$Parser$Tools$ExpectingPrefix = {$: 0};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return function (s) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.hB, s.fV);
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{bK: 1, b: s.b, hb: s.hb, hB: s.hB + 1, cg: s.cg + 1, fV: s.fV}) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{bK: s.bK + 1, b: s.b, hb: s.hb, hB: newOffset, cg: s.cg, fV: s.fV}));
		};
	});
var $author$project$Parser$Tools$text = F2(
	function (prefix, _continue) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (start, finish, content) {
								return {
									bl: start,
									bM: A3($elm$core$String$slice, start, finish, content),
									bp: finish
								};
							})),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$getOffset,
							A2(
								$elm$parser$Parser$Advanced$chompIf,
								function (c) {
									return prefix(c);
								},
								$author$project$Parser$Tools$ExpectingPrefix)),
						$elm$parser$Parser$Advanced$chompWhile(
							function (c) {
								return _continue(c);
							}))),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$MicroLaTeX$Parser$Token$codeParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Parser$Token$CodeToken(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '`';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Parser$Token$S = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$MicroLaTeX$Parser$Token$codeChars = _List_fromArray(
	['`']);
var $author$project$MicroLaTeX$Parser$Token$languageChars = _List_fromArray(
	['\\', '{', '}', '`', '$']);
var $author$project$MicroLaTeX$Parser$Token$codeTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Parser$Token$S,
					data.bM,
					{
						bl: start,
						bp: ((start + data.bp) - data.bl) - 1,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Parser$Token$codeChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Parser$Token$languageChars));
				}));
	});
var $author$project$MicroLaTeX$Parser$Token$W = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $author$project$MicroLaTeX$Parser$Token$whiteSpaceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Parser$Token$W,
					data.bM,
					{
						bl: start,
						bp: start,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === ' ';
				},
				function (c) {
					return c === ' ';
				}));
	});
var $author$project$MicroLaTeX$Parser$Token$codeParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Parser$Token$codeTextParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$codeParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Parser$Token$LMathBracket = function (a) {
	return {$: 4, a: a};
};
var $author$project$Parser$Tools$ExpectingSymbol = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$Tools$symbol = function (symb) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (start, finish) {
						return {bl: start, bM: symb, bp: finish};
					})),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$getOffset,
				$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						symb,
						$author$project$Parser$Tools$ExpectingSymbol(symb))))),
		$elm$parser$Parser$Advanced$getOffset);
};
var $author$project$MicroLaTeX$Parser$Token$leftMathBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$MicroLaTeX$Parser$Token$LMathBracket(
					{
						bl: start,
						bp: start + 1,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			$author$project$Parser$Tools$symbol('\\['));
	});
var $author$project$MicroLaTeX$Parser$Token$MathToken = function (a) {
	return {$: 8, a: a};
};
var $author$project$MicroLaTeX$Parser$Token$mathParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Parser$Token$MathToken(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '$';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Parser$Token$mathChars = _List_fromArray(
	['$']);
var $author$project$MicroLaTeX$Parser$Token$mathTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Parser$Token$S,
					data.bM,
					{
						bl: start,
						bp: ((start + data.bp) - data.bl) - 1,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Parser$Token$mathChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Parser$Token$languageChars));
				}));
	});
var $author$project$MicroLaTeX$Parser$Token$RMathBracket = function (a) {
	return {$: 5, a: a};
};
var $author$project$MicroLaTeX$Parser$Token$rightMathBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$MicroLaTeX$Parser$Token$RMathBracket(
					{
						bl: start,
						bp: start + 1,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			$author$project$Parser$Tools$symbol('\\]'));
	});
var $author$project$MicroLaTeX$Parser$Token$mathParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Parser$Token$mathTextParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$mathParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$leftMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$rightMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Parser$Token$backslashParser1 = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Parser$Token$BS(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '\\';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Parser$Token$F = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0;
		return function (s0) {
			var _v1 = parseA(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				var _v2 = callback(a);
				var parseB = _v2;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
				}
			}
		};
	});
var $author$project$MicroLaTeX$Parser$Token$first = F2(
	function (p, q) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (x) {
				return A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return x;
					},
					q);
			},
			p);
	});
var $author$project$MicroLaTeX$Parser$Token$backslashParser2 = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Parser$Token$F,
					A2($elm$core$String$dropLeft, 1, data.bM),
					{
						bl: start,
						bp: ((start + data.bp) - data.bl) - 1,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Parser$Token$first,
				A2(
					$author$project$Parser$Tools$text,
					function (c) {
						return c === '\\';
					},
					function (c) {
						return (c !== ' ') && (c !== '{');
					}),
				$author$project$Parser$Tools$symbol(' ')));
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0;
	return function (s0) {
		var _v1 = parse(s0);
		if (_v1.$ === 1) {
			var x = _v1.b;
			return A2($elm$parser$Parser$Advanced$Bad, false, x);
		} else {
			var a = _v1.b;
			var s1 = _v1.c;
			return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
		}
	};
};
var $author$project$MicroLaTeX$Parser$Token$backslashParser = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$backtrackable(
					A2($author$project$MicroLaTeX$Parser$Token$backslashParser2, start, index)),
					A2($author$project$MicroLaTeX$Parser$Token$backslashParser1, start, index)
				]));
	});
var $author$project$MicroLaTeX$Parser$Token$LB = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroLaTeX$Parser$Token$leftBraceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Parser$Token$LB(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '{';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Parser$Token$rightBraceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Parser$Token$RB(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '}';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Parser$Token$textParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Parser$Token$S,
					data.bM,
					{
						bl: start,
						bp: ((start + data.bp) - data.bl) - 1,
						g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Parser$Token$languageChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Parser$Token$languageChars));
				}));
	});
var $author$project$MicroLaTeX$Parser$Token$tokenParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Parser$Token$textParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$leftMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$rightMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$backslashParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$leftBraceParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$rightBraceParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$mathParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$codeParser, start, index),
					A2($author$project$MicroLaTeX$Parser$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Parser$Token$tokenParser = F3(
	function (mode, start, index) {
		switch (mode) {
			case 0:
				return A2($author$project$MicroLaTeX$Parser$Token$tokenParser_, start, index);
			case 1:
				return A2($author$project$MicroLaTeX$Parser$Token$mathParser_, start, index);
			default:
				return A2($author$project$MicroLaTeX$Parser$Token$codeParser_, start, index);
		}
	});
var $author$project$MicroLaTeX$Parser$Token$get = F3(
	function (state, start, input) {
		var _v0 = A2(
			$elm$parser$Parser$Advanced$run,
			A3($author$project$MicroLaTeX$Parser$Token$tokenParser, state.cS, start, state.Y),
			input);
		if (!_v0.$) {
			var token = _v0.a;
			return token;
		} else {
			var errorList = _v0.a;
			return A2(
				$author$project$MicroLaTeX$Parser$Token$TokenError,
				errorList,
				{
					bl: start,
					bp: start + 1,
					g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, start, state.Y),
					dy: state.Y
				});
		}
	});
var $author$project$MicroLaTeX$Parser$Token$setIndex = F2(
	function (k, token) {
		switch (token.$) {
			case 0:
				var meta = token.a;
				return $author$project$MicroLaTeX$Parser$Token$BS(
					_Utils_update(
						meta,
						{dy: k}));
			case 3:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Parser$Token$F,
					str,
					_Utils_update(
						meta,
						{dy: k}));
			case 1:
				var meta = token.a;
				return $author$project$MicroLaTeX$Parser$Token$LB(
					_Utils_update(
						meta,
						{dy: k}));
			case 2:
				var meta = token.a;
				return $author$project$MicroLaTeX$Parser$Token$RB(
					_Utils_update(
						meta,
						{dy: k}));
			case 4:
				var meta = token.a;
				return $author$project$MicroLaTeX$Parser$Token$LMathBracket(
					_Utils_update(
						meta,
						{dy: k}));
			case 5:
				var meta = token.a;
				return $author$project$MicroLaTeX$Parser$Token$RMathBracket(
					_Utils_update(
						meta,
						{dy: k}));
			case 6:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Parser$Token$S,
					str,
					_Utils_update(
						meta,
						{dy: k}));
			case 7:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Parser$Token$W,
					str,
					_Utils_update(
						meta,
						{dy: k}));
			case 8:
				var meta = token.a;
				return $author$project$MicroLaTeX$Parser$Token$MathToken(
					_Utils_update(
						meta,
						{dy: k}));
			case 9:
				var meta = token.a;
				return $author$project$MicroLaTeX$Parser$Token$CodeToken(
					_Utils_update(
						meta,
						{dy: k}));
			default:
				var list = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Parser$Token$TokenError,
					list,
					_Utils_update(
						meta,
						{dy: k}));
		}
	});
var $author$project$MicroLaTeX$Parser$Token$handleBS = F2(
	function (state, token) {
		var _v0 = state.bn;
		if (_v0.$ === 1) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Parser$Token$setIndex, state.Y, token),
					state.cq),
				state.Y + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Parser$Token$setIndex, state.Y + 1, token),
					A2(
						$elm$core$List$cons,
						A2($author$project$MicroLaTeX$Parser$Token$setIndex, state.Y, textToken),
						state.cq)),
				state.Y + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$MicroLaTeX$Parser$Token$handleDefault = F2(
	function (state, token) {
		var _v0 = state.bn;
		if (_v0.$ === 1) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Parser$Token$setIndex, state.Y, token),
					state.cq),
				state.Y + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Parser$Token$setIndex, state.Y + 1, token),
					A2($elm$core$List$cons, textToken, state.cq)),
				state.Y + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$MicroLaTeX$Parser$Token$handleLB = F2(
	function (state, token) {
		var _v0 = state.bn;
		if (_v0.$ === 1) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Parser$Token$setIndex, state.Y, token),
					state.cq),
				state.Y + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Parser$Token$setIndex, state.Y + 1, token),
					A2(
						$elm$core$List$cons,
						A2($author$project$MicroLaTeX$Parser$Token$setIndex, state.Y, textToken),
						state.cq)),
				state.Y + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$MicroLaTeX$Parser$Token$boostMeta = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.bl;
		var end = _v0.bp;
		var index = _v0.dy;
		return {
			bl: begin,
			bp: end,
			g7: A2($author$project$MicroLaTeX$Parser$Token$makeId, lineNumber, tokenIndex),
			dy: index
		};
	});
var $author$project$MicroLaTeX$Parser$Token$getMeta = function (token) {
	switch (token.$) {
		case 0:
			var m = token.a;
			return m;
		case 3:
			var m = token.b;
			return m;
		case 1:
			var m = token.a;
			return m;
		case 2:
			var m = token.a;
			return m;
		case 4:
			var m = token.a;
			return m;
		case 5:
			var m = token.a;
			return m;
		case 6:
			var m = token.b;
			return m;
		case 7:
			var m = token.b;
			return m;
		case 8:
			var m = token.a;
			return m;
		case 9:
			var m = token.a;
			return m;
		default:
			var m = token.b;
			return m;
	}
};
var $author$project$MicroLaTeX$Parser$Token$mergeToken = F2(
	function (lastToken, currentToken) {
		var lastTokenMeta = $author$project$MicroLaTeX$Parser$Token$getMeta(lastToken);
		var currentTokenMeta = $author$project$MicroLaTeX$Parser$Token$getMeta(currentToken);
		var meta = {bl: lastTokenMeta.bl, bp: currentTokenMeta.bp, dy: -1};
		return A2(
			$author$project$MicroLaTeX$Parser$Token$S,
			_Utils_ap(
				$author$project$MicroLaTeX$Parser$Token$stringValue(lastToken),
				$author$project$MicroLaTeX$Parser$Token$stringValue(currentToken)),
			A3($author$project$MicroLaTeX$Parser$Token$boostMeta, meta.bl, meta.bp, meta));
	});
var $author$project$MicroLaTeX$Parser$Token$updateCurrentToken = F3(
	function (index, token, currentToken) {
		if (currentToken.$ === 1) {
			return $elm$core$Maybe$Just(
				A2($author$project$MicroLaTeX$Parser$Token$setIndex, index, token));
		} else {
			var token_ = currentToken.a;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$MicroLaTeX$Parser$Token$setIndex,
					index,
					A2($author$project$MicroLaTeX$Parser$Token$mergeToken, token_, token)));
		}
	});
var $author$project$MicroLaTeX$Parser$Token$handleMerge = F2(
	function (state, token) {
		return _Utils_Tuple3(
			state.cq,
			state.Y,
			A3($author$project$MicroLaTeX$Parser$Token$updateCurrentToken, state.Y, token, state.bn));
	});
var $author$project$MicroLaTeX$Parser$Token$isTextToken = function (token) {
	return A2(
		$elm$core$List$member,
		$author$project$MicroLaTeX$Parser$Token$type_(token),
		_List_fromArray(
			[7, 6]));
};
var $author$project$MicroLaTeX$Parser$Token$length = function (token) {
	switch (token.$) {
		case 0:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 3:
			var meta = token.b;
			return meta.bp - meta.bl;
		case 1:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 2:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 4:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 5:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 6:
			var meta = token.b;
			return meta.bp - meta.bl;
		case 8:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 9:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 7:
			var meta = token.b;
			return meta.bp - meta.bl;
		default:
			var meta = token.b;
			return meta.bp - meta.bl;
	}
};
var $author$project$MicroLaTeX$Parser$Token$InCode = 2;
var $author$project$MicroLaTeX$Parser$Token$InMath = 1;
var $author$project$MicroLaTeX$Parser$Token$newMode = F2(
	function (token, currentMode) {
		switch (currentMode) {
			case 0:
				switch (token.$) {
					case 8:
						return 1;
					case 9:
						return 2;
					default:
						return 0;
				}
			case 1:
				if (token.$ === 8) {
					return 0;
				} else {
					return 1;
				}
			default:
				if (token.$ === 9) {
					return 0;
				} else {
					return 2;
				}
		}
	});
var $author$project$MicroLaTeX$Parser$Token$nextStep = function (state) {
	if (_Utils_cmp(state.bz, state.eJ) > -1) {
		return $author$project$MicroLaTeX$Parser$Token$finish(state);
	} else {
		var token = A3(
			$author$project$MicroLaTeX$Parser$Token$get,
			state,
			state.bz,
			A2($elm$core$String$dropLeft, state.bz, state.eI));
		var newScanPointer = (state.bz + $author$project$MicroLaTeX$Parser$Token$length(token)) + 1;
		var _v0 = $author$project$MicroLaTeX$Parser$Token$isTextToken(token) ? A2($author$project$MicroLaTeX$Parser$Token$handleMerge, state, token) : ((!$author$project$MicroLaTeX$Parser$Token$type_(token)) ? A2($author$project$MicroLaTeX$Parser$Token$handleBS, state, token) : (($author$project$MicroLaTeX$Parser$Token$type_(token) === 1) ? A2($author$project$MicroLaTeX$Parser$Token$handleLB, state, token) : A2($author$project$MicroLaTeX$Parser$Token$handleDefault, state, token)));
		var tokens = _v0.a;
		var tokenIndex = _v0.b;
		var currentToken_ = _v0.c;
		var currentToken = $author$project$MicroLaTeX$Parser$Token$isTextToken(token) ? currentToken_ : $elm$core$Maybe$Nothing;
		return $author$project$Parser$Helpers$Loop(
			_Utils_update(
				state,
				{
					bn: currentToken,
					cS: A2($author$project$MicroLaTeX$Parser$Token$newMode, token, state.cS),
					bz: newScanPointer,
					Y: tokenIndex,
					cq: tokens
				}));
	}
};
var $author$project$MicroLaTeX$Parser$Token$run = function (source) {
	return A2(
		$author$project$Parser$Helpers$loop,
		$author$project$MicroLaTeX$Parser$Token$init(source),
		$author$project$MicroLaTeX$Parser$Token$nextStep);
};
var $author$project$MicroLaTeX$Parser$Expression$parse = F2(
	function (lineNumber, str) {
		var state = $author$project$MicroLaTeX$Parser$Expression$run(
			A2(
				$author$project$MicroLaTeX$Parser$Expression$initWithTokens,
				lineNumber,
				$author$project$MicroLaTeX$Parser$Token$run(str)));
		var messages = state.eq;
		var exprs = state.g;
		return _Utils_Tuple2(exprs, messages);
	});
var $author$project$XMarkdown$Expression$forkLogWidth = 12;
var $author$project$XMarkdown$Expression$initWithTokens = F2(
	function (lineNumber, tokens) {
		return {
			g: _List_Nil,
			eo: lineNumber,
			eq: _List_Nil,
			b2: $elm$core$List$length(tokens),
			k: _List_Nil,
			dL: 0,
			Y: 0,
			cq: $elm$core$List$reverse(tokens)
		};
	});
var $author$project$XMarkdown$Expression$advanceTokenIndex = function (state) {
	return _Utils_update(
		state,
		{Y: state.Y + 1});
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $author$project$XMarkdown$Token$Bold = function (a) {
	return {$: 6, a: a};
};
var $author$project$XMarkdown$Token$Italic = function (a) {
	return {$: 7, a: a};
};
var $author$project$XMarkdown$Expression$push = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				k: A2($elm$core$List$cons, token, state.k)
			});
	});
var $author$project$XMarkdown$Expression$pushOnStack = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				k: A2($elm$core$List$cons, token, state.k)
			});
	});
var $author$project$XMarkdown$Expression$exprOfToken = function (token) {
	switch (token.$) {
		case 8:
			var str = token.a;
			var loc = token.b;
			return $elm$core$Maybe$Just(
				A2($author$project$Parser$Expr$Text, str, loc));
		case 9:
			var str = token.a;
			var loc = token.b;
			return $elm$core$Maybe$Just(
				A2($author$project$Parser$Expr$Text, str, loc));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$XMarkdown$Expression$commit = F2(
	function (token, state) {
		var _v0 = $author$project$XMarkdown$Expression$exprOfToken(token);
		if (_v0.$ === 1) {
			return state;
		} else {
			var expr = _v0.a;
			return _Utils_update(
				state,
				{
					g: A2($elm$core$List$cons, expr, state.g)
				});
		}
	});
var $author$project$XMarkdown$Expression$pushOrCommit = F2(
	function (token, state) {
		return $elm$core$List$isEmpty(state.k) ? A2($author$project$XMarkdown$Expression$commit, token, state) : A2($author$project$XMarkdown$Expression$push, token, state);
	});
var $author$project$XMarkdown$Expression$pushToken = F2(
	function (token, state) {
		switch (token.$) {
			case 8:
				var str = token.a;
				var meta = token.b;
				if (A2($elm$core$String$right, 1, str) === ' ') {
					return A2($author$project$XMarkdown$Expression$pushOrCommit, token, state);
				} else {
					var _v1 = A2($elm_community$list_extra$List$Extra$getAt, meta.dy + 1, state.cq);
					_v1$2:
					while (true) {
						if (!_v1.$) {
							switch (_v1.a.$) {
								case 7:
									var meta_ = _v1.a.a;
									return $author$project$XMarkdown$Expression$advanceTokenIndex(
										A2(
											$author$project$XMarkdown$Expression$push,
											$author$project$XMarkdown$Token$Italic(meta_),
											A2($author$project$XMarkdown$Expression$push, token, state)));
								case 6:
									var meta_ = _v1.a.a;
									return $author$project$XMarkdown$Expression$advanceTokenIndex(
										A2(
											$author$project$XMarkdown$Expression$push,
											$author$project$XMarkdown$Token$Bold(meta_),
											A2($author$project$XMarkdown$Expression$push, token, state)));
								default:
									break _v1$2;
							}
						} else {
							break _v1$2;
						}
					}
					return A2($author$project$XMarkdown$Expression$pushOrCommit, token, state);
				}
			case 9:
				return A2($author$project$XMarkdown$Expression$pushOrCommit, token, state);
			default:
				return A2($author$project$XMarkdown$Expression$pushOnStack, token, state);
		}
	});
var $author$project$XMarkdown$Token$S = F2(
	function (a, b) {
		return {$: 8, a: a, b: b};
	});
var $elm_community$list_extra$List$Extra$updateAt = F3(
	function (index, fn, list) {
		if (index < 0) {
			return list;
		} else {
			var tail = A2($elm$core$List$drop, index, list);
			if (tail.b) {
				var x = tail.a;
				var xs = tail.b;
				return _Utils_ap(
					A2($elm$core$List$take, index, list),
					A2(
						$elm$core$List$cons,
						fn(x),
						xs));
			} else {
				return list;
			}
		}
	});
var $elm_community$list_extra$List$Extra$setAt = F2(
	function (index, value) {
		return A2(
			$elm_community$list_extra$List$Extra$updateAt,
			index,
			$elm$core$Basics$always(value));
	});
var $author$project$XMarkdown$Token$changeTokenContentAt = F3(
	function (k, newContent, tokens) {
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, k, tokens);
		if (_v0.$ === 1) {
			return tokens;
		} else {
			var tok = _v0.a;
			if (tok.$ === 8) {
				var meta = tok.b;
				return A3(
					$elm_community$list_extra$List$Extra$setAt,
					k,
					A2($author$project$XMarkdown$Token$S, newContent, meta),
					tokens);
			} else {
				return tokens;
			}
		}
	});
var $author$project$XMarkdown$Token$indexOf = function (token) {
	switch (token.$) {
		case 0:
			var meta = token.a;
			return meta.dy;
		case 1:
			var meta = token.a;
			return meta.dy;
		case 8:
			var meta = token.b;
			return meta.dy;
		case 9:
			var meta = token.b;
			return meta.dy;
		case 10:
			var meta = token.a;
			return meta.dy;
		case 11:
			var meta = token.a;
			return meta.dy;
		case 12:
			var meta = token.b;
			return meta.dy;
		case 2:
			var meta = token.a;
			return meta.dy;
		case 3:
			var meta = token.a;
			return meta.dy;
		case 4:
			var meta = token.a;
			return meta.dy;
		case 5:
			var meta = token.a;
			return meta.dy;
		case 6:
			var meta = token.a;
			return meta.dy;
		default:
			var meta = token.a;
			return meta.dy;
	}
};
var $author$project$XMarkdown$Token$AT = function (a) {
	return {$: 5, a: a};
};
var $author$project$XMarkdown$Token$CodeToken = function (a) {
	return {$: 11, a: a};
};
var $author$project$XMarkdown$Token$Image = function (a) {
	return {$: 4, a: a};
};
var $author$project$XMarkdown$Token$LB = function (a) {
	return {$: 0, a: a};
};
var $author$project$XMarkdown$Token$LP = function (a) {
	return {$: 2, a: a};
};
var $author$project$XMarkdown$Token$MathToken = function (a) {
	return {$: 10, a: a};
};
var $author$project$XMarkdown$Token$RB = function (a) {
	return {$: 1, a: a};
};
var $author$project$XMarkdown$Token$RP = function (a) {
	return {$: 3, a: a};
};
var $author$project$XMarkdown$Token$TokenError = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $author$project$XMarkdown$Token$W = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $author$project$XMarkdown$Token$setIndex = F2(
	function (k, token) {
		switch (token.$) {
			case 0:
				var meta = token.a;
				return $author$project$XMarkdown$Token$LB(
					_Utils_update(
						meta,
						{dy: k}));
			case 1:
				var meta = token.a;
				return $author$project$XMarkdown$Token$RB(
					_Utils_update(
						meta,
						{dy: k}));
			case 2:
				var meta = token.a;
				return $author$project$XMarkdown$Token$LP(
					_Utils_update(
						meta,
						{dy: k}));
			case 3:
				var meta = token.a;
				return $author$project$XMarkdown$Token$RP(
					_Utils_update(
						meta,
						{dy: k}));
			case 6:
				var meta = token.a;
				return $author$project$XMarkdown$Token$Bold(
					_Utils_update(
						meta,
						{dy: k}));
			case 7:
				var meta = token.a;
				return $author$project$XMarkdown$Token$Italic(
					_Utils_update(
						meta,
						{dy: k}));
			case 4:
				var meta = token.a;
				return $author$project$XMarkdown$Token$Image(
					_Utils_update(
						meta,
						{dy: k}));
			case 5:
				var meta = token.a;
				return $author$project$XMarkdown$Token$AT(
					_Utils_update(
						meta,
						{dy: k}));
			case 8:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$XMarkdown$Token$S,
					str,
					_Utils_update(
						meta,
						{dy: k}));
			case 9:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$XMarkdown$Token$W,
					str,
					_Utils_update(
						meta,
						{dy: k}));
			case 10:
				var meta = token.a;
				return $author$project$XMarkdown$Token$MathToken(
					_Utils_update(
						meta,
						{dy: k}));
			case 11:
				var meta = token.a;
				return $author$project$XMarkdown$Token$CodeToken(
					_Utils_update(
						meta,
						{dy: k}));
			default:
				var list = token.a;
				var meta = token.b;
				return A2(
					$author$project$XMarkdown$Token$TokenError,
					list,
					_Utils_update(
						meta,
						{dy: k}));
		}
	});
var $author$project$XMarkdown$Token$changeTokenIndicesFrom = F3(
	function (from, delta, tokens) {
		var f = function (token) {
			var k = $author$project$XMarkdown$Token$indexOf(token);
			return (_Utils_cmp(k, from) > -1) ? A2($author$project$XMarkdown$Token$setIndex, k + delta, token) : token;
		};
		return A2(
			$elm$core$List$map,
			function (token) {
				return f(token);
			},
			tokens);
	});
var $author$project$Parser$Meta$dummy = {bl: 0, bp: 0, g7: 'dummyId', dy: 0};
var $author$project$XMarkdown$Expression$dummyTokenIndex = 0;
var $author$project$XMarkdown$Expression$dummyLocWithId = {bl: 0, bp: 0, g7: 'dummy (3)', dy: $author$project$XMarkdown$Expression$dummyTokenIndex};
var $author$project$XMarkdown$Expression$errorMessage = function (message) {
	return A3(
		$author$project$Parser$Expr$Fun,
		'red',
		_List_fromArray(
			[
				A2($author$project$Parser$Expr$Text, message, $author$project$XMarkdown$Expression$dummyLocWithId)
			]),
		$author$project$XMarkdown$Expression$dummyLocWithId);
};
var $author$project$XMarkdown$Expression$errorMessageBold = function (message) {
	return A3(
		$author$project$Parser$Expr$Fun,
		'bold',
		_List_fromArray(
			[
				A3(
				$author$project$Parser$Expr$Fun,
				'red',
				_List_fromArray(
					[
						A2($author$project$Parser$Expr$Text, message, $author$project$XMarkdown$Expression$dummyLocWithId)
					]),
				$author$project$XMarkdown$Expression$dummyLocWithId)
			]),
		$author$project$XMarkdown$Expression$dummyLocWithId);
};
var $elm_community$list_extra$List$Extra$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, xs),
			A2($elm$core$List$drop, n, xs));
	});
var $author$project$XMarkdown$Expression$insertAt = F3(
	function (k, a, list) {
		var _v0 = A2($elm_community$list_extra$List$Extra$splitAt, k, list);
		var p = _v0.a;
		var q = _v0.b;
		return _Utils_ap(
			p,
			A2($elm$core$List$cons, a, q));
	});
var $author$project$XMarkdown$Token$stringValue = function (token) {
	switch (token.$) {
		case 0:
			return '[';
		case 1:
			return ']';
		case 2:
			return '(';
		case 3:
			return ')';
		case 6:
			return '**';
		case 7:
			return '*';
		case 4:
			return 'image';
		case 5:
			return '@';
		case 8:
			var str = token.a;
			return str;
		case 9:
			var str = token.a;
			return str;
		case 10:
			return '$';
		case 11:
			return '`';
		default:
			return 'tokenError';
	}
};
var $author$project$XMarkdown$Token$toString = function (tokens) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$XMarkdown$Token$stringValue, tokens));
};
var $author$project$XMarkdown$Token$stringValue2 = function (token) {
	switch (token.$) {
		case 0:
			return 'LB';
		case 1:
			return 'RB';
		case 2:
			return 'LP';
		case 3:
			return 'RP';
		case 6:
			return 'BOLD';
		case 7:
			return 'ITALIC';
		case 4:
			return 'IMAGE';
		case 5:
			return '@';
		case 8:
			var str = token.a;
			return str;
		case 9:
			var str = token.a;
			return str;
		case 10:
			return 'M';
		case 11:
			return 'C';
		default:
			return 'tokenError';
	}
};
var $author$project$XMarkdown$Token$toString2 = function (tokens) {
	return A2(
		$elm$core$String$join,
		', ',
		A2($elm$core$List$map, $author$project$XMarkdown$Token$stringValue2, tokens));
};
var $author$project$XMarkdown$Expression$recoverFromError = function (state) {
	var _v0 = $elm$core$List$reverse(state.k);
	_v0$14:
	while (true) {
		if (_v0.b) {
			switch (_v0.a.$) {
				case 8:
					if (_v0.b.b) {
						switch (_v0.b.a.$) {
							case 7:
								var _v1 = _v0.a;
								var content = _v1.a;
								var meta = _v1.b;
								var _v2 = _v0.b;
								var rest = _v2.b;
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: A2(
												$elm$core$List$cons,
												A3(
													$author$project$Parser$Expr$Fun,
													'pink',
													_List_fromArray(
														[
															A2($author$project$Parser$Expr$Text, ' *', $author$project$XMarkdown$Expression$dummyLocWithId)
														]),
													$author$project$XMarkdown$Expression$dummyLocWithId),
												state.g),
											k: _List_Nil,
											Y: meta.dy,
											cq: A3(
												$author$project$XMarkdown$Token$changeTokenIndicesFrom,
												meta.dy + 1,
												1,
												A3(
													$author$project$XMarkdown$Expression$insertAt,
													meta.dy,
													$author$project$XMarkdown$Token$Italic(meta),
													A3(
														$author$project$XMarkdown$Token$changeTokenContentAt,
														meta.dy,
														$elm$core$String$trim(content),
														state.cq)))
										}));
							case 6:
								var _v3 = _v0.a;
								var content = _v3.a;
								var meta = _v3.b;
								var _v4 = _v0.b;
								var rest = _v4.b;
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: A2(
												$elm$core$List$cons,
												A3(
													$author$project$Parser$Expr$Fun,
													'pink',
													_List_fromArray(
														[
															A2($author$project$Parser$Expr$Text, ' **', $author$project$XMarkdown$Expression$dummyLocWithId)
														]),
													$author$project$XMarkdown$Expression$dummyLocWithId),
												state.g),
											k: _List_Nil,
											Y: meta.dy,
											cq: A3(
												$author$project$XMarkdown$Token$changeTokenIndicesFrom,
												meta.dy + 1,
												1,
												A3(
													$author$project$XMarkdown$Expression$insertAt,
													meta.dy,
													$author$project$XMarkdown$Token$Bold(meta),
													A3(
														$author$project$XMarkdown$Token$changeTokenContentAt,
														meta.dy,
														$elm$core$String$trim(content),
														state.cq)))
										}));
							default:
								break _v0$14;
						}
					} else {
						break _v0$14;
					}
				case 0:
					if ((((_v0.b.b && (_v0.b.a.$ === 8)) && _v0.b.b.b) && (_v0.b.b.a.$ === 1)) && (!_v0.b.b.b.b)) {
						var _v5 = _v0.b;
						var _v6 = _v5.a;
						var txt = _v6.a;
						var meta = _v6.b;
						var _v7 = _v5.b;
						return $author$project$Parser$Helpers$Loop(
							_Utils_update(
								state,
								{
									g: A2(
										$elm$core$List$cons,
										A2($author$project$Parser$Expr$Text, '[' + (txt + ']'), meta),
										_List_Nil),
									k: _List_Nil
								}));
					} else {
						break _v0$14;
					}
				case 7:
					if (!_v0.b.b) {
						var meta = _v0.a.a;
						if ($elm$core$List$isEmpty(state.g)) {
							return $author$project$Parser$Helpers$Loop(
								_Utils_update(
									state,
									{
										g: A2(
											$elm$core$List$cons,
											$author$project$XMarkdown$Expression$errorMessage('*'),
											_List_Nil),
										k: _List_Nil
									}));
						} else {
							var expr = function () {
								var _v8 = $elm$core$List$head(state.g);
								if ((!_v8.$) && (_v8.a.$ === 1)) {
									var _v9 = _v8.a;
									var str1 = _v9.a;
									var meta1 = _v9.b;
									return A3(
										$author$project$Parser$Expr$Fun,
										'italic',
										_List_fromArray(
											[
												A2($author$project$Parser$Expr$Text, str1, meta1)
											]),
										meta1);
								} else {
									return A3(
										$author$project$Parser$Expr$Fun,
										'italic',
										_List_fromArray(
											[
												A2($author$project$Parser$Expr$Text, '??', meta)
											]),
										meta);
								}
							}();
							return $author$project$Parser$Helpers$Loop(
								_Utils_update(
									state,
									{
										g: A2(
											$elm$core$List$cons,
											expr,
											A2(
												$elm$core$List$cons,
												$author$project$XMarkdown$Expression$errorMessage('*?1'),
												A2($elm$core$List$drop, 1, state.g))),
										eq: _List_fromArray(
											['!!']),
										k: _List_Nil,
										Y: meta.dy + 1
									}));
						}
					} else {
						if (_v0.b.a.$ === 8) {
							if (!_v0.b.b.b) {
								var meta1 = _v0.a.a;
								var _v10 = _v0.b;
								var _v11 = _v10.a;
								var str = _v11.a;
								var meta2 = _v11.b;
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: A2(
												$elm$core$List$cons,
												A3(
													$author$project$Parser$Expr$Fun,
													'pink',
													_List_fromArray(
														[
															A2($author$project$Parser$Expr$Text, '* ', $author$project$XMarkdown$Expression$dummyLocWithId)
														]),
													$author$project$XMarkdown$Expression$dummyLocWithId),
												A2(
													$elm$core$List$cons,
													A3(
														$author$project$Parser$Expr$Fun,
														'italic',
														_List_fromArray(
															[
																A2($author$project$Parser$Expr$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
															]),
														$author$project$XMarkdown$Expression$dummyLocWithId),
													state.g)),
											k: _List_Nil,
											Y: meta2.dy + 1
										}));
							} else {
								if (_v0.b.b.a.$ === 6) {
									if (!_v0.b.b.b.b) {
										var meta1 = _v0.a.a;
										var _v12 = _v0.b;
										var _v13 = _v12.a;
										var str = _v13.a;
										var meta2 = _v13.b;
										var _v14 = _v12.b;
										var meta3 = _v14.a.a;
										return $author$project$Parser$Helpers$Loop(
											_Utils_update(
												state,
												{
													g: A2(
														$elm$core$List$cons,
														A3(
															$author$project$Parser$Expr$Fun,
															'pink',
															_List_fromArray(
																[
																	A2($author$project$Parser$Expr$Text, '* << extra? ', $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														A2(
															$elm$core$List$cons,
															A3(
																$author$project$Parser$Expr$Fun,
																'italic',
																_List_fromArray(
																	[
																		A2($author$project$Parser$Expr$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																	]),
																$author$project$XMarkdown$Expression$dummyLocWithId),
															state.g)),
													k: _List_Nil,
													Y: meta3.dy + 1
												}));
									} else {
										var meta1 = _v0.a.a;
										var _v15 = _v0.b;
										var _v16 = _v15.a;
										var str = _v16.a;
										var meta2 = _v16.b;
										var _v17 = _v15.b;
										var meta3 = _v17.a.a;
										var rest = _v17.b;
										return (A2($elm$core$String$right, 1, str) === ' ') ? $author$project$Parser$Helpers$Loop(
											_Utils_update(
												state,
												{
													g: A2(
														$elm$core$List$cons,
														A3(
															$author$project$Parser$Expr$Fun,
															'pink',
															_List_fromArray(
																[
																	A2($author$project$Parser$Expr$Text, '* ', $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														A2(
															$elm$core$List$cons,
															A3(
																$author$project$Parser$Expr$Fun,
																'italic',
																_List_fromArray(
																	[
																		A2($author$project$Parser$Expr$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																	]),
																$author$project$XMarkdown$Expression$dummyLocWithId),
															state.g)),
													k: _List_Nil,
													Y: meta3.dy
												})) : $author$project$Parser$Helpers$Loop(
											_Utils_update(
												state,
												{
													g: A2(
														$elm$core$List$cons,
														A3(
															$author$project$Parser$Expr$Fun,
															'pink',
															_List_fromArray(
																[
																	A2($author$project$Parser$Expr$Text, '* << extra? ', $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														A2(
															$elm$core$List$cons,
															A3(
																$author$project$Parser$Expr$Fun,
																'italic',
																_List_fromArray(
																	[
																		A2($author$project$Parser$Expr$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																	]),
																$author$project$XMarkdown$Expression$dummyLocWithId),
															state.g)),
													k: _List_Nil,
													Y: meta3.dy + 1
												}));
									}
								} else {
									var meta1 = _v0.a.a;
									var _v18 = _v0.b;
									var _v19 = _v18.a;
									var str = _v19.a;
									var meta2 = _v19.b;
									var rest = _v18.b;
									return $author$project$Parser$Helpers$Loop(
										_Utils_update(
											state,
											{
												g: A2(
													$elm$core$List$cons,
													A3(
														$author$project$Parser$Expr$Fun,
														'pink',
														_List_fromArray(
															[
																A2($author$project$Parser$Expr$Text, '* ', $author$project$XMarkdown$Expression$dummyLocWithId)
															]),
														$author$project$XMarkdown$Expression$dummyLocWithId),
													A2(
														$elm$core$List$cons,
														A3(
															$author$project$Parser$Expr$Fun,
															'italic',
															_List_fromArray(
																[
																	A2($author$project$Parser$Expr$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														state.g)),
												k: _List_Nil,
												Y: meta2.dy + 1
											}));
								}
							}
						} else {
							var meta1 = _v0.a.a;
							var rest = _v0.b;
							var _v20 = $elm_community$list_extra$List$Extra$last(rest);
							if (!_v20.$) {
								if (_v20.a.$ === 6) {
									var meta2 = _v20.a.a;
									return $author$project$Parser$Helpers$Loop(
										_Utils_update(
											state,
											{
												k: _List_Nil,
												Y: meta2.dy + 2,
												cq: A3(
													$author$project$XMarkdown$Token$changeTokenIndicesFrom,
													meta2.dy + 2,
													1,
													A3(
														$author$project$XMarkdown$Expression$insertAt,
														meta2.dy,
														A2(
															$author$project$XMarkdown$Token$S,
															'* << extra? ',
															_Utils_update(
																meta2,
																{dy: meta2.dy + 1})),
														A3(
															$elm_community$list_extra$List$Extra$setAt,
															meta2.dy,
															$author$project$XMarkdown$Token$Italic(meta2),
															state.cq)))
											}));
								} else {
									return $author$project$Parser$Helpers$Loop(
										_Utils_update(
											state,
											{
												g: _Utils_ap(
													state.g,
													A2(
														$elm$core$List$cons,
														$author$project$XMarkdown$Expression$errorMessage('*??1a'),
														A2($elm$core$List$drop, 1, state.g))),
												eq: _List_fromArray(
													['!!']),
												k: _List_Nil,
												Y: meta1.dy + 1
											}));
								}
							} else {
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: _Utils_ap(
												state.g,
												A2(
													$elm$core$List$cons,
													$author$project$XMarkdown$Expression$errorMessage('*??1b'),
													A2($elm$core$List$drop, 1, state.g))),
											eq: _List_fromArray(
												['!!']),
											k: _List_Nil,
											Y: meta1.dy + 1
										}));
							}
						}
					}
				case 6:
					if (!_v0.b.b) {
						var meta = _v0.a.a;
						if ($elm$core$List$isEmpty(state.g)) {
							return $author$project$Parser$Helpers$Loop(
								_Utils_update(
									state,
									{
										g: A2(
											$elm$core$List$cons,
											$author$project$XMarkdown$Expression$errorMessage('**'),
											_List_Nil),
										k: _List_Nil
									}));
						} else {
							var expr = function () {
								var _v21 = $elm$core$List$head(state.g);
								if ((!_v21.$) && (_v21.a.$ === 1)) {
									var _v22 = _v21.a;
									var str1 = _v22.a;
									var meta1 = _v22.b;
									return A3(
										$author$project$Parser$Expr$Fun,
										'bold',
										_List_fromArray(
											[
												A2($author$project$Parser$Expr$Text, str1, meta1)
											]),
										meta1);
								} else {
									return A3(
										$author$project$Parser$Expr$Fun,
										'bold',
										_List_fromArray(
											[
												A2($author$project$Parser$Expr$Text, '??', meta)
											]),
										meta);
								}
							}();
							return $author$project$Parser$Helpers$Loop(
								_Utils_update(
									state,
									{
										g: A2(
											$elm$core$List$cons,
											expr,
											A2(
												$elm$core$List$cons,
												$author$project$XMarkdown$Expression$errorMessage('**?2'),
												A2($elm$core$List$drop, 1, state.g))),
										eq: _List_fromArray(
											['!!']),
										k: _List_Nil,
										Y: meta.dy + 1
									}));
						}
					} else {
						if (_v0.b.a.$ === 8) {
							if (!_v0.b.b.b) {
								var _v23 = _v0.b;
								var _v24 = _v23.a;
								var str = _v24.a;
								var meta = _v24.b;
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: A2(
												$elm$core$List$cons,
												$author$project$XMarkdown$Expression$errorMessage('** '),
												A2(
													$elm$core$List$cons,
													A3(
														$author$project$Parser$Expr$Fun,
														'bold',
														_List_fromArray(
															[
																A2($author$project$Parser$Expr$Text, str, meta)
															]),
														meta),
													state.g)),
											eq: _List_fromArray(
												['!!']),
											k: _List_Nil,
											Y: meta.dy + 1
										}));
							} else {
								if (_v0.b.b.a.$ === 7) {
									var meta1 = _v0.a.a;
									var _v25 = _v0.b;
									var _v26 = _v25.a;
									var str = _v26.a;
									var meta2 = _v26.b;
									var _v27 = _v25.b;
									var meta3 = _v27.a.a;
									var rest = _v27.b;
									return $author$project$Parser$Helpers$Loop(
										_Utils_update(
											state,
											{
												g: A2(
													$elm$core$List$cons,
													$author$project$XMarkdown$Expression$errorMessage('* '),
													A2(
														$elm$core$List$cons,
														A3(
															$author$project$Parser$Expr$Fun,
															'bold',
															_List_fromArray(
																[
																	A2($author$project$Parser$Expr$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														state.g)),
												eq: _List_fromArray(
													['!!']),
												k: _List_Nil,
												Y: meta3.dy + 1
											}));
								} else {
									break _v0$14;
								}
							}
						} else {
							break _v0$14;
						}
					}
				case 10:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$XMarkdown$Token$toString2(rest);
					var message = (content === '') ? '$?$' : '$ ';
					return $author$project$Parser$Helpers$Loop(
						_Utils_update(
							state,
							{
								g: A2(
									$elm$core$List$cons,
									$author$project$XMarkdown$Expression$errorMessage(message),
									state.g),
								eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'opening dollar sign needs to be matched with a closing one', state.eq),
								b2: 0,
								k: _List_Nil,
								Y: meta.dy + 1
							}));
				case 11:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$XMarkdown$Token$toString2(rest);
					var message = (content === '') ? '`?`' : '` ';
					return $author$project$Parser$Helpers$Loop(
						_Utils_update(
							state,
							{
								g: A2(
									$elm$core$List$cons,
									$author$project$XMarkdown$Expression$errorMessageBold(message),
									state.g),
								eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'opening backtick needs to be matched with a closing one', state.eq),
								b2: 0,
								k: _List_Nil,
								Y: meta.dy + 1
							}));
				default:
					break _v0$14;
			}
		} else {
			break _v0$14;
		}
	}
	return $author$project$Parser$Helpers$Done(
		_Utils_update(
			state,
			{
				g: A2(
					$elm$core$List$cons,
					A3(
						$author$project$Parser$Expr$Fun,
						'red',
						_List_fromArray(
							[
								A2(
								$author$project$Parser$Expr$Text,
								$author$project$XMarkdown$Token$toString(
									$elm$core$List$reverse(state.k)),
								$author$project$Parser$Meta$dummy)
							]),
						$author$project$Parser$Meta$dummy),
					state.g),
				k: _List_Nil
			}));
};
var $author$project$XMarkdown$Symbol$LBracket = 0;
var $author$project$XMarkdown$Symbol$LParen = 2;
var $author$project$XMarkdown$Symbol$RBracket = 1;
var $author$project$XMarkdown$Symbol$RParen = 3;
var $author$project$XMarkdown$Symbol$C = 10;
var $author$project$XMarkdown$Symbol$M = 9;
var $author$project$XMarkdown$Symbol$SAT = 7;
var $author$project$XMarkdown$Symbol$SBold = 4;
var $author$project$XMarkdown$Symbol$SImage = 6;
var $author$project$XMarkdown$Symbol$SItalic = 5;
var $author$project$XMarkdown$Symbol$toSymbol = function (token) {
	switch (token.$) {
		case 0:
			return $elm$core$Maybe$Just(0);
		case 1:
			return $elm$core$Maybe$Just(1);
		case 2:
			return $elm$core$Maybe$Just(2);
		case 6:
			return $elm$core$Maybe$Just(4);
		case 7:
			return $elm$core$Maybe$Just(5);
		case 4:
			return $elm$core$Maybe$Just(6);
		case 5:
			return $elm$core$Maybe$Just(7);
		case 3:
			return $elm$core$Maybe$Just(3);
		case 10:
			return $elm$core$Maybe$Just(9);
		case 11:
			return $elm$core$Maybe$Just(10);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$maybe_extra$Maybe$Extra$cons = F2(
	function (item, list) {
		if (!item.$) {
			var v = item.a;
			return A2($elm$core$List$cons, v, list);
		} else {
			return list;
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$values = A2($elm$core$List$foldr, $elm_community$maybe_extra$Maybe$Extra$cons, _List_Nil);
var $author$project$XMarkdown$Symbol$convertTokens = function (tokens) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$XMarkdown$Symbol$toSymbol, tokens));
};
var $author$project$L0$Parser$Expression$initWithTokens = F2(
	function (lineNumber, tokens) {
		return {
			g: _List_Nil,
			eo: lineNumber,
			eq: _List_Nil,
			b2: $elm$core$List$length(tokens),
			k: _List_Nil,
			dL: 0,
			Y: 0,
			cq: $elm$core$List$reverse(tokens)
		};
	});
var $author$project$L0$Parser$Expression$advanceTokenIndex = function (state) {
	return _Utils_update(
		state,
		{Y: state.Y + 1});
};
var $author$project$L0$Parser$Expression$getToken = function (state) {
	return A2($elm_community$list_extra$List$Extra$getAt, state.Y, state.cq);
};
var $author$project$L0$Parser$Expression$pushOnStack_ = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				k: A2($elm$core$List$cons, token, state.k)
			});
	});
var $author$project$L0$Parser$Expression$makeId = F2(
	function (a, b) {
		return $elm$core$String$fromInt(a) + ('.' + $elm$core$String$fromInt(b));
	});
var $author$project$L0$Parser$Expression$boostMeta = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.bl;
		var end = _v0.bp;
		var index = _v0.dy;
		return {
			bl: begin,
			bp: end,
			g7: A2($author$project$L0$Parser$Expression$makeId, lineNumber, tokenIndex),
			dy: index
		};
	});
var $author$project$L0$Parser$Token$indexOf = function (token) {
	switch (token.$) {
		case 0:
			var meta = token.a;
			return meta.dy;
		case 1:
			var meta = token.a;
			return meta.dy;
		case 2:
			var meta = token.b;
			return meta.dy;
		case 3:
			var meta = token.b;
			return meta.dy;
		case 4:
			var meta = token.a;
			return meta.dy;
		case 5:
			var meta = token.b;
			return meta.dy;
		case 6:
			var meta = token.a;
			return meta.dy;
		default:
			var meta = token.b;
			return meta.dy;
	}
};
var $author$project$L0$Parser$Expression$stringTokenToExpr = function (token) {
	switch (token.$) {
		case 2:
			var str = token.a;
			var loc = token.b;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$Parser$Expr$Text,
					str,
					A3(
						$author$project$L0$Parser$Expression$boostMeta,
						0,
						$author$project$L0$Parser$Token$indexOf(token),
						loc)));
		case 3:
			var str = token.a;
			var loc = token.b;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$Parser$Expr$Text,
					str,
					A3(
						$author$project$L0$Parser$Expression$boostMeta,
						0,
						$author$project$L0$Parser$Token$indexOf(token),
						loc)));
		case 5:
			var str = token.a;
			var loc = token.b;
			return $elm$core$Maybe$Just(
				A3(
					$author$project$Parser$Expr$Verbatim,
					'math',
					str,
					A3(
						$author$project$L0$Parser$Expression$boostMeta,
						0,
						$author$project$L0$Parser$Token$indexOf(token),
						loc)));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$L0$Parser$Expression$commit = F2(
	function (token, state) {
		var _v0 = $author$project$L0$Parser$Expression$stringTokenToExpr(token);
		if (_v0.$ === 1) {
			return state;
		} else {
			var expr = _v0.a;
			return _Utils_update(
				state,
				{
					g: A2($elm$core$List$cons, expr, state.g)
				});
		}
	});
var $author$project$L0$Parser$Expression$push = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				k: A2($elm$core$List$cons, token, state.k)
			});
	});
var $author$project$L0$Parser$Expression$pushOrCommit_ = F2(
	function (token, state) {
		return $elm$core$List$isEmpty(state.k) ? A2($author$project$L0$Parser$Expression$commit, token, state) : A2($author$project$L0$Parser$Expression$push, token, state);
	});
var $author$project$L0$Parser$Expression$pushOrCommit = F2(
	function (token, state) {
		switch (token.$) {
			case 2:
				return A2($author$project$L0$Parser$Expression$pushOrCommit_, token, state);
			case 3:
				return A2($author$project$L0$Parser$Expression$pushOrCommit_, token, state);
			case 4:
				return A2($author$project$L0$Parser$Expression$pushOnStack_, token, state);
			case 5:
				return A2($author$project$L0$Parser$Expression$pushOrCommit_, token, state);
			case 6:
				return A2($author$project$L0$Parser$Expression$pushOnStack_, token, state);
			case 0:
				return A2($author$project$L0$Parser$Expression$pushOnStack_, token, state);
			case 1:
				return A2($author$project$L0$Parser$Expression$pushOnStack_, token, state);
			default:
				return A2($author$project$L0$Parser$Expression$pushOnStack_, token, state);
		}
	});
var $author$project$L0$Parser$Token$S = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$L0$Parser$Token$BracketedMath = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $author$project$L0$Parser$Token$CodeToken = function (a) {
	return {$: 6, a: a};
};
var $author$project$L0$Parser$Token$LB = function (a) {
	return {$: 0, a: a};
};
var $author$project$L0$Parser$Token$MathToken = function (a) {
	return {$: 4, a: a};
};
var $author$project$L0$Parser$Token$RB = function (a) {
	return {$: 1, a: a};
};
var $author$project$L0$Parser$Token$TokenError = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $author$project$L0$Parser$Token$W = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$L0$Parser$Token$setIndex = F2(
	function (k, token) {
		switch (token.$) {
			case 0:
				var meta = token.a;
				return $author$project$L0$Parser$Token$LB(
					_Utils_update(
						meta,
						{dy: k}));
			case 1:
				var meta = token.a;
				return $author$project$L0$Parser$Token$RB(
					_Utils_update(
						meta,
						{dy: k}));
			case 2:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$L0$Parser$Token$S,
					str,
					_Utils_update(
						meta,
						{dy: k}));
			case 3:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$L0$Parser$Token$W,
					str,
					_Utils_update(
						meta,
						{dy: k}));
			case 4:
				var meta = token.a;
				return $author$project$L0$Parser$Token$MathToken(
					_Utils_update(
						meta,
						{dy: k}));
			case 5:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$L0$Parser$Token$BracketedMath,
					str,
					_Utils_update(
						meta,
						{dy: k}));
			case 6:
				var meta = token.a;
				return $author$project$L0$Parser$Token$CodeToken(
					_Utils_update(
						meta,
						{dy: k}));
			default:
				var list = token.a;
				var meta = token.b;
				return A2(
					$author$project$L0$Parser$Token$TokenError,
					list,
					_Utils_update(
						meta,
						{dy: k}));
		}
	});
var $author$project$L0$Parser$Token$changeTokenIndicesFrom = F3(
	function (from, delta, tokens) {
		var f = function (token) {
			var k = $author$project$L0$Parser$Token$indexOf(token);
			return (_Utils_cmp(k, from) > -1) ? A2($author$project$L0$Parser$Token$setIndex, k + delta, token) : token;
		};
		return A2(
			$elm$core$List$map,
			function (token) {
				return f(token);
			},
			tokens);
	});
var $author$project$L0$Parser$Expression$dummyTokenIndex = 0;
var $author$project$L0$Parser$Expression$dummyLoc = {bl: 0, bp: 0, dy: $author$project$L0$Parser$Expression$dummyTokenIndex};
var $author$project$L0$Parser$Expression$dummyLocWithId = {bl: 0, bp: 0, g7: 'dummy (2)', dy: $author$project$L0$Parser$Expression$dummyTokenIndex};
var $author$project$L0$Parser$Expression$errorMessage = function (message) {
	return A3(
		$author$project$Parser$Expr$Fun,
		'errorHighlight',
		_List_fromArray(
			[
				A2($author$project$Parser$Expr$Text, message, $author$project$L0$Parser$Expression$dummyLocWithId)
			]),
		$author$project$L0$Parser$Expression$dummyLocWithId);
};
var $author$project$L0$Parser$Expression$errorSuffix = function (rest) {
	if (!rest.b) {
		return ']?';
	} else {
		if ((rest.a.$ === 3) && (!rest.b.b)) {
			var _v1 = rest.a;
			return ']?';
		} else {
			return '';
		}
	}
};
var $author$project$L0$Parser$Expression$addErrorMessage = F2(
	function (message, state) {
		var committed = A2(
			$elm$core$List$cons,
			$author$project$L0$Parser$Expression$errorMessage(message),
			state.g);
		return _Utils_update(
			state,
			{g: committed});
	});
var $author$project$L0$Parser$Symbol$value = function (symbol) {
	switch (symbol) {
		case 0:
			return 1;
		case 1:
			return -1;
		case 3:
			return 0;
		case 6:
			return 0;
		case 4:
			return 0;
		case 2:
			return 0;
		case 5:
			return 0;
		default:
			return 0;
	}
};
var $author$project$L0$Parser$Symbol$balance = function (symbols) {
	return $elm$core$List$sum(
		A2($elm$core$List$map, $author$project$L0$Parser$Symbol$value, symbols));
};
var $author$project$L0$Parser$Expression$bracketError = function (k) {
	if (k < 0) {
		var brackets = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, -k, ']'));
		return $author$project$L0$Parser$Expression$errorMessage(
			' ' + (brackets + (' << Too many right brackets (' + ($elm$core$String$fromInt(-k) + ')'))));
	} else {
		var brackets = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, k, '['));
		return $author$project$L0$Parser$Expression$errorMessage(
			' ' + (brackets + (' << Too many left brackets (' + ($elm$core$String$fromInt(k) + ')'))));
	}
};
var $author$project$L0$Parser$Expression$bracketErrorAsString = function (k) {
	return (k < 0) ? ('Too many right brackets (' + ($elm$core$String$fromInt(-k) + ')')) : ('Too many left brackets (' + ($elm$core$String$fromInt(k) + ')'));
};
var $author$project$L0$Parser$Symbol$C = 5;
var $author$project$L0$Parser$Symbol$M = 4;
var $author$project$L0$Parser$Symbol$WS = 6;
var $author$project$L0$Parser$Match$dropLast = function (list) {
	var n = $elm$core$List$length(list);
	return A2($elm$core$List$take, n - 1, list);
};
var $author$project$L0$Parser$Match$getSegment = F2(
	function (sym, symbols) {
		var seg_ = A2(
			$elm_community$list_extra$List$Extra$takeWhile,
			function (sym_) {
				return !_Utils_eq(sym_, sym);
			},
			A2($elm$core$List$drop, 1, symbols));
		var n = $elm$core$List$length(seg_);
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, n + 1, symbols);
		if (_v0.$ === 1) {
			return A2($elm$core$List$cons, sym, seg_);
		} else {
			var last = _v0.a;
			return A2(
				$elm$core$List$cons,
				sym,
				_Utils_ap(
					seg_,
					_List_fromArray(
						[last])));
		}
	});
var $author$project$L0$Parser$Match$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.c7);
	if (_v0.$ === 1) {
		return $author$project$Parser$Helpers$Done($elm$core$Maybe$Nothing);
	} else {
		var sym = _v0.a;
		var brackets = state.dg + $author$project$L0$Parser$Symbol$value(sym);
		return (brackets < 0) ? $author$project$Parser$Helpers$Done($elm$core$Maybe$Nothing) : ((!brackets) ? $author$project$Parser$Helpers$Done(
			$elm$core$Maybe$Just(state.dy)) : $author$project$Parser$Helpers$Loop(
			{
				dg: brackets,
				dy: state.dy + 1,
				c7: A2($elm$core$List$drop, 1, state.c7)
			}));
	}
};
var $author$project$L0$Parser$Match$match = function (symbols) {
	var _v0 = $elm$core$List$head(symbols);
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var symbol = _v0.a;
		return A2(
			$elm$core$List$member,
			symbol,
			_List_fromArray(
				[5, 4])) ? $elm$core$Maybe$Just(
			$elm$core$List$length(
				A2($author$project$L0$Parser$Match$getSegment, symbol, symbols)) - 1) : (($author$project$L0$Parser$Symbol$value(symbol) < 0) ? $elm$core$Maybe$Nothing : A2(
			$author$project$Parser$Helpers$loop,
			{
				dg: $author$project$L0$Parser$Symbol$value(symbol),
				dy: 1,
				c7: A2($elm$core$List$drop, 1, symbols)
			},
			$author$project$L0$Parser$Match$nextStep));
	}
};
var $author$project$L0$Parser$Match$splitAt = F2(
	function (k, list) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, k, list),
			A2($elm$core$List$drop, k, list));
	});
var $author$project$L0$Parser$Match$split = function (symbols) {
	var _v0 = $author$project$L0$Parser$Match$match(symbols);
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var k = _v0.a;
		return $elm$core$Maybe$Just(
			A2($author$project$L0$Parser$Match$splitAt, k + 1, symbols));
	}
};
var $author$project$L0$Parser$Match$hasReducibleArgs = function (symbols) {
	hasReducibleArgs:
	while (true) {
		if (!symbols.b) {
			return true;
		} else {
			switch (symbols.a) {
				case 0:
					var _v11 = symbols.a;
					return $author$project$L0$Parser$Match$reducibleAux(symbols);
				case 5:
					var _v12 = symbols.a;
					return $author$project$L0$Parser$Match$reducibleAux(symbols);
				case 4:
					var _v13 = symbols.a;
					var seg = A2($author$project$L0$Parser$Match$getSegment, 4, symbols);
					if ($author$project$L0$Parser$Match$isReducible(seg)) {
						var $temp$symbols = A2(
							$elm$core$List$drop,
							$elm$core$List$length(seg),
							symbols);
						symbols = $temp$symbols;
						continue hasReducibleArgs;
					} else {
						return false;
					}
				case 2:
					var _v14 = symbols.a;
					var rest = symbols.b;
					var $temp$symbols = rest;
					symbols = $temp$symbols;
					continue hasReducibleArgs;
				case 3:
					var _v15 = symbols.a;
					var rest = symbols.b;
					var $temp$symbols = rest;
					symbols = $temp$symbols;
					continue hasReducibleArgs;
				default:
					return false;
			}
		}
	}
};
var $author$project$L0$Parser$Match$isReducible = function (symbols_) {
	var symbols = A2(
		$elm$core$List$filter,
		function (sym) {
			return sym !== 6;
		},
		symbols_);
	_v2$3:
	while (true) {
		if (symbols.b) {
			switch (symbols.a) {
				case 4:
					var _v3 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just(4));
				case 5:
					var _v4 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just(5));
				case 0:
					if (symbols.b.b && (symbols.b.a === 3)) {
						var _v5 = symbols.a;
						var _v6 = symbols.b;
						var _v7 = _v6.a;
						var rest = _v6.b;
						var _v8 = $elm$core$List$head(
							$elm$core$List$reverse(rest));
						if ((!_v8.$) && (_v8.a === 1)) {
							var _v9 = _v8.a;
							return $author$project$L0$Parser$Match$hasReducibleArgs(
								$author$project$L0$Parser$Match$dropLast(rest));
						} else {
							return false;
						}
					} else {
						break _v2$3;
					}
				default:
					break _v2$3;
			}
		} else {
			break _v2$3;
		}
	}
	return false;
};
var $author$project$L0$Parser$Match$reducibleAux = function (symbols) {
	var _v0 = $author$project$L0$Parser$Match$split(symbols);
	if (_v0.$ === 1) {
		return false;
	} else {
		var _v1 = _v0.a;
		var a = _v1.a;
		var b = _v1.b;
		return $author$project$L0$Parser$Match$isReducible(a) && $author$project$L0$Parser$Match$hasReducibleArgs(b);
	}
};
var $author$project$L0$Parser$Expression$errorMessageInvisible = function (message) {
	return A3(
		$author$project$Parser$Expr$Fun,
		'invisible',
		_List_fromArray(
			[
				A2($author$project$Parser$Expr$Text, message, $author$project$L0$Parser$Expression$dummyLocWithId)
			]),
		$author$project$L0$Parser$Expression$dummyLocWithId);
};
var $author$project$L0$Parser$Token$TLB = 0;
var $author$project$L0$Parser$Token$TRB = 1;
var $author$project$L0$Parser$Token$TBracketedMath = 5;
var $author$project$L0$Parser$Token$TCode = 6;
var $author$project$L0$Parser$Token$TMath = 4;
var $author$project$L0$Parser$Token$TS = 2;
var $author$project$L0$Parser$Token$TTokenError = 7;
var $author$project$L0$Parser$Token$TW = 3;
var $author$project$L0$Parser$Token$type_ = function (token) {
	switch (token.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		case 4:
			return 4;
		case 5:
			return 5;
		case 6:
			return 6;
		default:
			return 7;
	}
};
var $author$project$L0$Parser$Expression$isExpr = function (tokens) {
	return _Utils_eq(
		A2(
			$elm$core$List$map,
			$author$project$L0$Parser$Token$type_,
			A2($elm$core$List$take, 1, tokens)),
		_List_fromArray(
			[0])) && _Utils_eq(
		A2(
			$elm$core$List$map,
			$author$project$L0$Parser$Token$type_,
			A2(
				$elm$core$List$take,
				1,
				$elm$core$List$reverse(tokens))),
		_List_fromArray(
			[1]));
};
var $author$project$L0$Parser$Symbol$BM = 2;
var $author$project$L0$Parser$Symbol$E = 7;
var $author$project$L0$Parser$Symbol$L = 0;
var $author$project$L0$Parser$Symbol$R = 1;
var $author$project$L0$Parser$Symbol$ST = 3;
var $author$project$L0$Parser$Symbol$toSymbol = function (token) {
	switch (token.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 3;
		case 3:
			return 6;
		case 4:
			return 4;
		case 5:
			return 2;
		case 6:
			return 5;
		default:
			return 7;
	}
};
var $author$project$L0$Parser$Symbol$toSymbols = function (tokens) {
	return A2($elm$core$List$map, $author$project$L0$Parser$Symbol$toSymbol, tokens);
};
var $author$project$L0$Parser$Expression$splitTokens = function (tokens) {
	var _v0 = $author$project$L0$Parser$Match$match(
		$author$project$L0$Parser$Symbol$toSymbols(tokens));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var k = _v0.a;
		return $elm$core$Maybe$Just(
			A2($author$project$L0$Parser$Match$splitAt, k + 1, tokens));
	}
};
var $author$project$L0$Parser$Expression$segLength = function (tokens) {
	return $elm$core$List$length(
		A2(
			$author$project$L0$Parser$Match$getSegment,
			4,
			$author$project$L0$Parser$Symbol$toSymbols(tokens)));
};
var $author$project$L0$Parser$Expression$splitTokensWithSegment = function (tokens) {
	return A2(
		$author$project$L0$Parser$Match$splitAt,
		$author$project$L0$Parser$Expression$segLength(tokens) + 1,
		tokens);
};
var $author$project$L0$Parser$Expression$unbracket = function (list) {
	return A2(
		$elm$core$List$drop,
		1,
		A2(
			$elm$core$List$take,
			$elm$core$List$length(list) - 1,
			list));
};
var $author$project$L0$Parser$Expression$reduceRestOfTokens = F2(
	function (lineNumber, tokens) {
		if (tokens.b) {
			switch (tokens.a.$) {
				case 0:
					var _v10 = $author$project$L0$Parser$Expression$splitTokens(tokens);
					if (_v10.$ === 1) {
						return _List_fromArray(
							[
								$author$project$L0$Parser$Expression$errorMessageInvisible('Error on match'),
								A2($author$project$Parser$Expr$Text, 'error on match', $author$project$L0$Parser$Expression$dummyLocWithId)
							]);
					} else {
						var _v11 = _v10.a;
						var a = _v11.a;
						var b = _v11.b;
						return _Utils_ap(
							A2($author$project$L0$Parser$Expression$reduceTokens, lineNumber, a),
							A2($author$project$L0$Parser$Expression$reduceRestOfTokens, lineNumber, b));
					}
				case 4:
					var _v12 = $author$project$L0$Parser$Expression$splitTokensWithSegment(tokens);
					var a = _v12.a;
					var b = _v12.b;
					return _Utils_ap(
						A2($author$project$L0$Parser$Expression$reduceTokens, lineNumber, a),
						A2($author$project$L0$Parser$Expression$reduceRestOfTokens, lineNumber, b));
				case 6:
					var _v13 = $author$project$L0$Parser$Expression$splitTokensWithSegment(tokens);
					var a = _v13.a;
					var b = _v13.b;
					return _Utils_ap(
						A2($author$project$L0$Parser$Expression$reduceTokens, lineNumber, a),
						A2($author$project$L0$Parser$Expression$reduceRestOfTokens, lineNumber, b));
				case 2:
					var _v14 = tokens.a;
					var str = _v14.a;
					var meta = _v14.b;
					return A2(
						$elm$core$List$cons,
						A2(
							$author$project$Parser$Expr$Text,
							str,
							A3(
								$author$project$L0$Parser$Expression$boostMeta,
								0,
								$author$project$L0$Parser$Token$indexOf(
									A2($author$project$L0$Parser$Token$S, str, meta)),
								meta)),
						A2(
							$author$project$L0$Parser$Expression$reduceRestOfTokens,
							lineNumber,
							A2($elm$core$List$drop, 1, tokens)));
				default:
					var token = tokens.a;
					var _v15 = $author$project$L0$Parser$Expression$stringTokenToExpr(token);
					if (!_v15.$) {
						var expr = _v15.a;
						return A2(
							$elm$core$List$cons,
							expr,
							A2(
								$author$project$L0$Parser$Expression$reduceRestOfTokens,
								lineNumber,
								A2($elm$core$List$drop, 1, tokens)));
					} else {
						return _List_fromArray(
							[
								$author$project$L0$Parser$Expression$errorMessage(
								'Line ' + ($elm$core$String$fromInt(lineNumber) + ', error converting token')),
								A2($author$project$Parser$Expr$Text, 'error converting Token', $author$project$L0$Parser$Expression$dummyLocWithId)
							]);
					}
			}
		} else {
			return _List_Nil;
		}
	});
var $author$project$L0$Parser$Expression$reduceTokens = F2(
	function (lineNumber, tokens) {
		if ($author$project$L0$Parser$Expression$isExpr(tokens)) {
			var args = $author$project$L0$Parser$Expression$unbracket(tokens);
			if (args.b && (args.a.$ === 2)) {
				var _v1 = args.a;
				var name = _v1.a;
				var meta = _v1.b;
				return _List_fromArray(
					[
						A3(
						$author$project$Parser$Expr$Fun,
						name,
						A2(
							$author$project$L0$Parser$Expression$reduceRestOfTokens,
							lineNumber,
							A2($elm$core$List$drop, 1, args)),
						A3($author$project$L0$Parser$Expression$boostMeta, lineNumber, meta.dy, meta))
					]);
			} else {
				return _List_fromArray(
					[
						$author$project$L0$Parser$Expression$errorMessage('[????]')
					]);
			}
		} else {
			_v2$2:
			while (true) {
				if (((tokens.b && tokens.b.b) && (tokens.b.a.$ === 2)) && tokens.b.b.b) {
					switch (tokens.a.$) {
						case 4:
							if (tokens.b.b.a.$ === 4) {
								var meta = tokens.a.a;
								var _v3 = tokens.b;
								var _v4 = _v3.a;
								var str = _v4.a;
								var _v5 = _v3.b;
								var rest = _v5.b;
								return A2(
									$elm$core$List$cons,
									A3(
										$author$project$Parser$Expr$Verbatim,
										'math',
										str,
										A3($author$project$L0$Parser$Expression$boostMeta, lineNumber, meta.dy, meta)),
									A2($author$project$L0$Parser$Expression$reduceRestOfTokens, lineNumber, rest));
							} else {
								break _v2$2;
							}
						case 6:
							if (tokens.b.b.a.$ === 6) {
								var meta = tokens.a.a;
								var _v6 = tokens.b;
								var _v7 = _v6.a;
								var str = _v7.a;
								var _v8 = _v6.b;
								var rest = _v8.b;
								return A2(
									$elm$core$List$cons,
									A3(
										$author$project$Parser$Expr$Verbatim,
										'code',
										str,
										A3($author$project$L0$Parser$Expression$boostMeta, lineNumber, meta.dy, meta)),
									A2($author$project$L0$Parser$Expression$reduceRestOfTokens, lineNumber, rest));
							} else {
								break _v2$2;
							}
						default:
							break _v2$2;
					}
				} else {
					break _v2$2;
				}
			}
			return _List_fromArray(
				[
					$author$project$L0$Parser$Expression$errorMessage('[????]')
				]);
		}
	});
var $author$project$L0$Parser$Expression$reduceStack = function (state) {
	return A2(
		$author$project$L0$Parser$Expression$reduceTokens,
		state.eo,
		$elm$core$List$reverse(state.k));
};
var $author$project$L0$Parser$Expression$tokensAreReducible = function (state) {
	return $author$project$L0$Parser$Match$isReducible(
		$elm$core$List$reverse(
			$author$project$L0$Parser$Symbol$toSymbols(state.k)));
};
var $author$project$L0$Parser$Expression$reduceState = function (state) {
	return $author$project$L0$Parser$Expression$tokensAreReducible(state) ? _Utils_update(
		state,
		{
			g: _Utils_ap(
				$author$project$L0$Parser$Expression$reduceStack(state),
				state.g),
			k: _List_Nil
		}) : state;
};
var $author$project$L0$Parser$Expression$recoverFromUnknownError = function (state) {
	var k = $author$project$L0$Parser$Symbol$balance(
		$author$project$L0$Parser$Symbol$toSymbols(
			$elm$core$List$reverse(state.k)));
	var newStack = _Utils_ap(
		A2(
			$elm$core$List$repeat,
			k,
			$author$project$L0$Parser$Token$RB($author$project$L0$Parser$Expression$dummyLoc)),
		state.k);
	var newSymbols = $author$project$L0$Parser$Symbol$toSymbols(
		$elm$core$List$reverse(newStack));
	var reducible = $author$project$L0$Parser$Match$isReducible(newSymbols);
	return reducible ? $author$project$Parser$Helpers$Done(
		A2(
			$author$project$L0$Parser$Expression$addErrorMessage,
			' ?!?(1) ',
			$author$project$L0$Parser$Expression$reduceState(
				_Utils_update(
					state,
					{
						g: A2(
							$elm$core$List$cons,
							$author$project$L0$Parser$Expression$errorMessage(' ?!?(2) '),
							state.g),
						eq: A3(
							$author$project$Parser$Helpers$prependMessage,
							state.eo,
							' ?!?(3) ' + ($elm$core$String$fromInt(k) + ' right brackets'),
							state.eq),
						b2: $elm$core$List$length(newStack),
						k: newStack,
						Y: 0
					})))) : $author$project$Parser$Helpers$Done(
		_Utils_update(
			state,
			{
				g: A2(
					$elm$core$List$cons,
					$author$project$L0$Parser$Expression$bracketError(k),
					state.g),
				eq: A3(
					$author$project$Parser$Helpers$prependMessage,
					state.eo,
					$author$project$L0$Parser$Expression$bracketErrorAsString(k),
					state.eq)
			}));
};
var $author$project$L0$Parser$Token$stringValue = function (token) {
	switch (token.$) {
		case 0:
			return '[';
		case 1:
			return ']';
		case 2:
			var str = token.a;
			return str;
		case 3:
			var str = token.a;
			return str;
		case 4:
			return '$';
		case 5:
			var s = token.a;
			return '\\[' + (s + '\\]');
		case 6:
			return '`';
		default:
			return 'tokenError';
	}
};
var $author$project$L0$Parser$Token$toString = function (tokens) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$L0$Parser$Token$stringValue, tokens));
};
var $author$project$L0$Parser$Expression$recoverFromError = function (state) {
	var _v0 = $elm$core$List$reverse(state.k);
	_v0$9:
	while (true) {
		if (_v0.b) {
			switch (_v0.a.$) {
				case 0:
					if (_v0.b.b) {
						switch (_v0.b.a.$) {
							case 1:
								var _v1 = _v0.b;
								var meta = _v1.a.a;
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: A2(
												$elm$core$List$cons,
												$author$project$L0$Parser$Expression$errorMessage('[?]'),
												state.g),
											eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'Brackets must enclose something', state.eq),
											k: _List_Nil,
											Y: meta.dy + 1
										}));
							case 0:
								var meta1 = _v0.a.a;
								var _v2 = _v0.b;
								var k = meta1.dy;
								var shiftedTokens = A3($author$project$L0$Parser$Token$changeTokenIndicesFrom, k + 1, 1, state.cq);
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'Consecutive left brackets', state.eq),
											k: _List_Nil,
											Y: meta1.dy,
											cq: _Utils_ap(
												A2($elm$core$List$take, k + 1, state.cq),
												A2(
													$elm$core$List$cons,
													A2(
														$author$project$L0$Parser$Token$S,
														'[??',
														_Utils_update(
															$author$project$L0$Parser$Expression$dummyLoc,
															{dy: k + 1})),
													A2($elm$core$List$drop, k + 1, shiftedTokens)))
										}));
							case 2:
								var _v3 = _v0.b;
								var _v4 = _v3.a;
								var fName = _v4.a;
								var meta = _v4.b;
								var rest = _v3.b;
								return $author$project$Parser$Helpers$Loop(
									_Utils_update(
										state,
										{
											g: A2(
												$elm$core$List$cons,
												$author$project$L0$Parser$Expression$errorMessage(
													$author$project$L0$Parser$Expression$errorSuffix(rest)),
												A2(
													$elm$core$List$cons,
													$author$project$L0$Parser$Expression$errorMessage('[' + fName),
													state.g)),
											eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'Missing right bracket', state.eq),
											k: _List_Nil,
											Y: meta.dy + 1
										}));
							case 3:
								if (_v0.b.a.a === ' ') {
									var _v5 = _v0.b;
									var _v6 = _v5.a;
									var meta = _v6.b;
									return $author$project$Parser$Helpers$Loop(
										_Utils_update(
											state,
											{
												g: A2(
													$elm$core$List$cons,
													$author$project$L0$Parser$Expression$errorMessage('[ - can\'t have space after the bracket '),
													state.g),
												eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'Can\'t have space after left bracket - try [something ...', state.eq),
												k: _List_Nil,
												Y: meta.dy + 1
											}));
								} else {
									break _v0$9;
								}
							default:
								break _v0$9;
						}
					} else {
						return $author$project$Parser$Helpers$Done(
							_Utils_update(
								state,
								{
									g: A2(
										$elm$core$List$cons,
										$author$project$L0$Parser$Expression$errorMessage('[...?'),
										state.g),
									eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'That left bracket needs something after it', state.eq),
									b2: 0,
									k: _List_Nil,
									Y: 0
								}));
					}
				case 1:
					var meta = _v0.a.a;
					return $author$project$Parser$Helpers$Loop(
						_Utils_update(
							state,
							{
								g: A2(
									$elm$core$List$cons,
									$author$project$L0$Parser$Expression$errorMessage(' extra ]?'),
									state.g),
								eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'Extra right bracket(s)', state.eq),
								k: _List_Nil,
								Y: meta.dy + 1
							}));
				case 4:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$L0$Parser$Token$toString(rest);
					var message = (content === '') ? '$?$' : '$ ';
					return $author$project$Parser$Helpers$Loop(
						_Utils_update(
							state,
							{
								g: A2(
									$elm$core$List$cons,
									$author$project$L0$Parser$Expression$errorMessage(message),
									state.g),
								eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'opening dollar sign needs to be matched with a closing one', state.eq),
								b2: 0,
								k: _List_Nil,
								Y: meta.dy + 1
							}));
				case 6:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$L0$Parser$Token$toString(rest);
					var message = (content === '') ? '`?`' : '` ';
					return $author$project$Parser$Helpers$Loop(
						_Utils_update(
							state,
							{
								g: A2(
									$elm$core$List$cons,
									$author$project$L0$Parser$Expression$errorMessage(message),
									state.g),
								eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'opening backtick needs to be matched with a closing one', state.eq),
								b2: 0,
								k: _List_Nil,
								Y: meta.dy + 1
							}));
				case 7:
					var _v7 = _v0.a;
					var meta = _v7.b;
					return $author$project$Parser$Helpers$Loop(
						_Utils_update(
							state,
							{
								g: A2(
									$elm$core$List$cons,
									$author$project$L0$Parser$Expression$errorMessage('\\[..??'),
									state.g),
								eq: A3($author$project$Parser$Helpers$prependMessage, state.eo, 'No mathching \\]??', state.eq),
								k: _List_Nil,
								Y: meta.dy + 1
							}));
				default:
					break _v0$9;
			}
		} else {
			break _v0$9;
		}
	}
	return $author$project$L0$Parser$Expression$recoverFromUnknownError(state);
};
var $author$project$L0$Parser$Expression$stackIsEmpty = function (state) {
	return $elm$core$List$isEmpty(state.k);
};
var $author$project$L0$Parser$Expression$nextStep = function (state) {
	var _v0 = $author$project$L0$Parser$Expression$getToken(state);
	if (_v0.$ === 1) {
		return $author$project$L0$Parser$Expression$stackIsEmpty(state) ? $author$project$Parser$Helpers$Done(state) : $author$project$L0$Parser$Expression$recoverFromError(state);
	} else {
		var token = _v0.a;
		return $author$project$Parser$Helpers$Loop(
			function (st) {
				return _Utils_update(
					st,
					{dL: st.dL + 1});
			}(
				$author$project$L0$Parser$Expression$reduceState(
					A2(
						$author$project$L0$Parser$Expression$pushOrCommit,
						token,
						$author$project$L0$Parser$Expression$advanceTokenIndex(state)))));
	}
};
var $author$project$L0$Parser$Expression$run = function (state) {
	return function (state_) {
		return _Utils_update(
			state_,
			{
				g: $elm$core$List$reverse(state_.g)
			});
	}(
		A2($author$project$Parser$Helpers$loop, state, $author$project$L0$Parser$Expression$nextStep));
};
var $author$project$L0$Parser$Expression$parseTokenListToState = F2(
	function (lineNumber, tokens) {
		var state = $author$project$L0$Parser$Expression$run(
			A2($author$project$L0$Parser$Expression$initWithTokens, lineNumber, tokens));
		return state;
	});
var $author$project$L0$Parser$Token$Normal = 0;
var $author$project$L0$Parser$Token$init = function (str) {
	return {
		bn: $elm$core$Maybe$Nothing,
		cS: 0,
		bz: 0,
		eI: str,
		eJ: $elm$core$String$length(str),
		Y: 0,
		cq: _List_Nil
	};
};
var $author$project$L0$Parser$Token$codeParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$L0$Parser$Token$CodeToken(
					{bl: start, bp: start, dy: index});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '`';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$L0$Parser$Token$codeChars = _List_fromArray(
	['`']);
var $author$project$L0$Parser$Token$languageChars = _List_fromArray(
	['[', ']', '`', '$', '\\']);
var $author$project$L0$Parser$Token$codeTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$L0$Parser$Token$S,
					data.bM,
					{bl: start, bp: ((start + data.bp) - data.bl) - 1, dy: index});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$L0$Parser$Token$codeChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$L0$Parser$Token$languageChars));
				}));
	});
var $author$project$L0$Parser$Token$whiteSpaceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$L0$Parser$Token$W,
					data.bM,
					{bl: start, bp: start, dy: index});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === ' ';
				},
				function (c) {
					return c === ' ';
				}));
	});
var $author$project$L0$Parser$Token$codeParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$L0$Parser$Token$codeTextParser, start, index),
					A2($author$project$L0$Parser$Token$codeParser, start, index),
					A2($author$project$L0$Parser$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$L0$Parser$Token$mathParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$L0$Parser$Token$MathToken(
					{bl: start, bp: start, dy: index});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '$';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$L0$Parser$Token$mathChars = _List_fromArray(
	['$']);
var $author$project$L0$Parser$Token$mathTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$L0$Parser$Token$S,
					data.bM,
					{bl: start, bp: ((start + data.bp) - data.bl) - 1, dy: index});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$L0$Parser$Token$mathChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$L0$Parser$Token$languageChars));
				}));
	});
var $author$project$L0$Parser$Token$mathParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$L0$Parser$Token$mathTextParser, start, index),
					A2($author$project$L0$Parser$Token$mathParser, start, index),
					A2($author$project$L0$Parser$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$L0$Parser$Token$bracketedMathParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							F3(
								function (a, b, content) {
									return A2(
										$author$project$L0$Parser$Token$BracketedMath,
										A3($elm$core$String$slice, a, b - 2, content),
										{bl: start, bp: ((start + b) - a) + 1, dy: index});
								})),
						$elm$parser$Parser$Advanced$symbol(
							A2(
								$elm$parser$Parser$Advanced$Token,
								'\\[',
								$author$project$Parser$Tools$ExpectingSymbol('\\[')))),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$getOffset,
							$elm$parser$Parser$Advanced$chompUntil(
								A2(
									$elm$parser$Parser$Advanced$Token,
									'\\]',
									$author$project$Parser$Tools$ExpectingSymbol('\\]')))),
						$elm$parser$Parser$Advanced$symbol(
							A2(
								$elm$parser$Parser$Advanced$Token,
								'\\]',
								$author$project$Parser$Tools$ExpectingSymbol('\\]'))))),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$L0$Parser$Token$leftBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$L0$Parser$Token$LB(
					{bl: start, bp: start, dy: index});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '[';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$L0$Parser$Token$rightBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$L0$Parser$Token$RB(
					{bl: start, bp: start, dy: index});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === ']';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$L0$Parser$Token$textParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$L0$Parser$Token$S,
					data.bM,
					{bl: start, bp: ((start + data.bp) - data.bl) - 1, dy: index});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$L0$Parser$Token$languageChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$L0$Parser$Token$languageChars));
				}));
	});
var $author$project$L0$Parser$Token$tokenParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$L0$Parser$Token$textParser, start, index),
					A2($author$project$L0$Parser$Token$leftBracketParser, start, index),
					A2($author$project$L0$Parser$Token$rightBracketParser, start, index),
					A2($author$project$L0$Parser$Token$bracketedMathParser, start, index),
					A2($author$project$L0$Parser$Token$mathParser, start, index),
					A2($author$project$L0$Parser$Token$codeParser, start, index),
					A2($author$project$L0$Parser$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$L0$Parser$Token$tokenParser = F3(
	function (mode, start, index) {
		switch (mode) {
			case 0:
				return A2($author$project$L0$Parser$Token$tokenParser_, start, index);
			case 1:
				return A2($author$project$L0$Parser$Token$mathParser_, start, index);
			default:
				return A2($author$project$L0$Parser$Token$codeParser_, start, index);
		}
	});
var $author$project$L0$Parser$Token$get = F3(
	function (state, start, input) {
		var _v0 = A2(
			$elm$parser$Parser$Advanced$run,
			A3($author$project$L0$Parser$Token$tokenParser, state.cS, start, state.Y),
			input);
		if (!_v0.$) {
			var token = _v0.a;
			return token;
		} else {
			var errorList = _v0.a;
			return A2(
				$author$project$L0$Parser$Token$TokenError,
				errorList,
				{bl: start, bp: start + 1, dy: state.Y});
		}
	});
var $author$project$L0$Parser$Token$isTextToken = function (token) {
	return A2(
		$elm$core$List$member,
		$author$project$L0$Parser$Token$type_(token),
		_List_fromArray(
			[3, 2]));
};
var $author$project$L0$Parser$Token$length = function (token) {
	switch (token.$) {
		case 0:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 1:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 2:
			var meta = token.b;
			return meta.bp - meta.bl;
		case 4:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 6:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 5:
			var meta = token.b;
			return meta.bp - meta.bl;
		case 3:
			var meta = token.b;
			return meta.bp - meta.bl;
		default:
			var meta = token.b;
			return meta.bp - meta.bl;
	}
};
var $author$project$L0$Parser$Token$InCode = 2;
var $author$project$L0$Parser$Token$InMath = 1;
var $author$project$L0$Parser$Token$newMode = F2(
	function (token, currentMode) {
		switch (currentMode) {
			case 0:
				switch (token.$) {
					case 4:
						return 1;
					case 6:
						return 2;
					default:
						return 0;
				}
			case 1:
				if (token.$ === 4) {
					return 0;
				} else {
					return 1;
				}
			default:
				if (token.$ === 6) {
					return 0;
				} else {
					return 2;
				}
		}
	});
var $author$project$L0$Parser$Token$getMeta = function (token) {
	switch (token.$) {
		case 0:
			var m = token.a;
			return m;
		case 1:
			var m = token.a;
			return m;
		case 2:
			var m = token.b;
			return m;
		case 3:
			var m = token.b;
			return m;
		case 4:
			var m = token.a;
			return m;
		case 5:
			var m = token.b;
			return m;
		case 6:
			var m = token.a;
			return m;
		default:
			var m = token.b;
			return m;
	}
};
var $author$project$L0$Parser$Token$mergeToken = F2(
	function (lastToken, currentToken) {
		var lastTokenMeta = $author$project$L0$Parser$Token$getMeta(lastToken);
		var currentTokenMeta = $author$project$L0$Parser$Token$getMeta(currentToken);
		var meta = {bl: lastTokenMeta.bl, bp: currentTokenMeta.bp, dy: -1};
		return A2(
			$author$project$L0$Parser$Token$S,
			_Utils_ap(
				$author$project$L0$Parser$Token$stringValue(lastToken),
				$author$project$L0$Parser$Token$stringValue(currentToken)),
			meta);
	});
var $author$project$L0$Parser$Token$updateCurrentToken = F3(
	function (index, token, currentToken) {
		if (currentToken.$ === 1) {
			return $elm$core$Maybe$Just(
				A2($author$project$L0$Parser$Token$setIndex, index, token));
		} else {
			var token_ = currentToken.a;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$L0$Parser$Token$setIndex,
					index,
					A2($author$project$L0$Parser$Token$mergeToken, token_, token)));
		}
	});
var $author$project$L0$Parser$Token$nextStep = function (state) {
	if (_Utils_cmp(state.bz, state.eJ) > -1) {
		var _v0 = state.bn;
		if (!_v0.$) {
			var token = _v0.a;
			return $author$project$Parser$Helpers$Done(
				A2($elm$core$List$cons, token, state.cq));
		} else {
			return $author$project$Parser$Helpers$Done(state.cq);
		}
	} else {
		var token = A3(
			$author$project$L0$Parser$Token$get,
			state,
			state.bz,
			A2($elm$core$String$dropLeft, state.bz, state.eI));
		var newScanPointer = (state.bz + $author$project$L0$Parser$Token$length(token)) + 1;
		var _v1 = function () {
			if ($author$project$L0$Parser$Token$isTextToken(token)) {
				return _Utils_eq(
					A2(
						$elm$core$Maybe$map,
						$author$project$L0$Parser$Token$type_,
						$elm$core$List$head(state.cq)),
					$elm$core$Maybe$Just(0)) ? _Utils_Tuple3(
					A2(
						$elm$core$List$cons,
						A2($author$project$L0$Parser$Token$setIndex, state.Y, token),
						state.cq),
					state.Y + 1,
					$elm$core$Maybe$Nothing) : _Utils_Tuple3(
					state.cq,
					state.Y,
					A3($author$project$L0$Parser$Token$updateCurrentToken, state.Y, token, state.bn));
			} else {
				if (!$author$project$L0$Parser$Token$type_(token)) {
					var _v2 = state.bn;
					if (_v2.$ === 1) {
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$L0$Parser$Token$setIndex, state.Y, token),
								state.cq),
							state.Y + 1,
							$elm$core$Maybe$Nothing);
					} else {
						var textToken = _v2.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$L0$Parser$Token$setIndex, state.Y + 1, token),
								A2(
									$elm$core$List$cons,
									A2($author$project$L0$Parser$Token$setIndex, state.Y, textToken),
									state.cq)),
							state.Y + 2,
							$elm$core$Maybe$Nothing);
					}
				} else {
					var _v3 = state.bn;
					if (_v3.$ === 1) {
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$L0$Parser$Token$setIndex, state.Y, token),
								state.cq),
							state.Y + 1,
							$elm$core$Maybe$Nothing);
					} else {
						var textToken = _v3.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$L0$Parser$Token$setIndex, state.Y + 1, token),
								A2($elm$core$List$cons, textToken, state.cq)),
							state.Y + 2,
							$elm$core$Maybe$Nothing);
					}
				}
			}
		}();
		var tokens = _v1.a;
		var tokenIndex = _v1.b;
		var currentToken_ = _v1.c;
		var currentToken = $author$project$L0$Parser$Token$isTextToken(token) ? currentToken_ : $elm$core$Maybe$Nothing;
		return $author$project$Parser$Helpers$Loop(
			_Utils_update(
				state,
				{
					bn: currentToken,
					cS: A2($author$project$L0$Parser$Token$newMode, token, state.cS),
					bz: newScanPointer,
					Y: tokenIndex,
					cq: tokens
				}));
	}
};
var $author$project$L0$Parser$Token$run = function (source) {
	return A2(
		$author$project$Parser$Helpers$loop,
		$author$project$L0$Parser$Token$init(source),
		$author$project$L0$Parser$Token$nextStep);
};
var $author$project$L0$Parser$Expression$parseToState = F2(
	function (lineNumber, str) {
		return A2(
			$author$project$L0$Parser$Expression$parseTokenListToState,
			lineNumber,
			$author$project$L0$Parser$Token$run(str));
	});
var $author$project$L0$Parser$Expression$parseWithMessages = F2(
	function (lineNumber, str) {
		var state = A2($author$project$L0$Parser$Expression$parseToState, lineNumber, str);
		return _Utils_Tuple2(state.g, state.eq);
	});
var $author$project$XMarkdown$Expression$handleAt = function (state) {
	var content = A4(
		$author$project$Tools$forklogRed,
		'STACK (AT)',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		A2(
			$elm$core$String$dropLeft,
			1,
			$author$project$XMarkdown$Token$toString(
				$elm$core$List$reverse(state.k))));
	var expr = A2($author$project$L0$Parser$Expression$parseWithMessages, 0, content).a;
	return _Utils_update(
		state,
		{
			g: _Utils_ap(expr, state.g),
			k: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$makeId = F2(
	function (a, b) {
		return $elm$core$String$fromInt(a) + ('.' + $elm$core$String$fromInt(b));
	});
var $author$project$XMarkdown$Expression$takeMiddle = function (list) {
	return A2(
		$elm$core$List$drop,
		1,
		$elm$core$List$reverse(
			A2($elm$core$List$drop, 1, list)));
};
var $author$project$XMarkdown$Expression$handleBoldItalic = function (state) {
	var meta = {
		bl: 0,
		bp: 0,
		g7: A2($author$project$XMarkdown$Expression$makeId, state.eo, state.Y),
		dy: 0
	};
	var content = $author$project$XMarkdown$Token$toString2(
		$author$project$XMarkdown$Expression$takeMiddle(
			$author$project$XMarkdown$Expression$takeMiddle(state.k)));
	var expr = A3(
		$author$project$Parser$Expr$Fun,
		'bold',
		_List_fromArray(
			[
				A3(
				$author$project$Parser$Expr$Fun,
				'italic',
				_List_fromArray(
					[
						A2($author$project$Parser$Expr$Text, content, meta)
					]),
				meta)
			]),
		meta);
	return _Utils_update(
		state,
		{
			g: A2($elm$core$List$cons, expr, state.g),
			k: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$handleBoldSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			symbols,
			_List_fromArray(
				[4, 4]))) {
			var meta = {
				bl: 0,
				bp: 0,
				g7: A2($author$project$XMarkdown$Expression$makeId, state.eo, state.Y),
				dy: 0
			};
			var content = $author$project$XMarkdown$Token$toString2(
				$author$project$XMarkdown$Expression$takeMiddle(state.k));
			var expr = A3(
				$author$project$Parser$Expr$Fun,
				'bold',
				_List_fromArray(
					[
						A2($author$project$Parser$Expr$Text, content, meta)
					]),
				meta);
			return _Utils_update(
				state,
				{
					g: A2($elm$core$List$cons, expr, state.g),
					k: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$handleBracketedText = function (state) {
	var str = function () {
		var _v0 = state.k;
		if ((((((_v0.b && (_v0.a.$ === 3)) && _v0.b.b) && (_v0.b.a.$ === 8)) && _v0.b.b.b) && (_v0.b.b.a.$ === 2)) && (!_v0.b.b.b.b)) {
			var _v1 = _v0.b;
			var _v2 = _v1.a;
			var str_ = _v2.a;
			var _v3 = _v1.b;
			return '[' + (str_ + ']');
		} else {
			return $author$project$XMarkdown$Token$toString(
				$elm$core$List$reverse(state.k));
		}
	}();
	var meta = {
		bl: 0,
		bp: 0,
		g7: A2($author$project$XMarkdown$Expression$makeId, state.eo, state.Y),
		dy: 0
	};
	var expr = A2($author$project$Parser$Expr$Text, str, meta);
	return _Utils_update(
		state,
		{
			g: A2($elm$core$List$cons, expr, state.g),
			k: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$handleCodeSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			symbols,
			_List_fromArray(
				[10, 10]))) {
			var content = $author$project$XMarkdown$Token$toString2(
				$author$project$XMarkdown$Expression$takeMiddle(state.k));
			var expr = A3(
				$author$project$Parser$Expr$Verbatim,
				'code',
				content,
				{
					bl: 0,
					bp: 0,
					g7: A2($author$project$XMarkdown$Expression$makeId, state.eo, state.Y),
					dy: 0
				});
			return _Utils_update(
				state,
				{
					g: A2($elm$core$List$cons, expr, state.g),
					k: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$handleImage = function (state) {
	var meta = {
		bl: 0,
		bp: 0,
		g7: A2($author$project$XMarkdown$Expression$makeId, state.eo, state.Y),
		dy: 0
	};
	var data = function () {
		var _v0 = state.k;
		if ((((((((((((((_v0.b && (_v0.a.$ === 3)) && _v0.b.b) && (_v0.b.a.$ === 8)) && _v0.b.b.b) && (_v0.b.b.a.$ === 2)) && _v0.b.b.b.b) && (_v0.b.b.b.a.$ === 1)) && _v0.b.b.b.b.b) && (_v0.b.b.b.b.a.$ === 8)) && _v0.b.b.b.b.b.b) && (!_v0.b.b.b.b.b.a.$)) && _v0.b.b.b.b.b.b.b) && (_v0.b.b.b.b.b.b.a.$ === 4)) && (!_v0.b.b.b.b.b.b.b.b)) {
			var _v1 = _v0.b;
			var _v2 = _v1.a;
			var url = _v2.a;
			var _v3 = _v1.b;
			var _v4 = _v3.b;
			var _v5 = _v4.b;
			var _v6 = _v5.a;
			var label = _v6.a;
			var _v7 = _v5.b;
			var _v8 = _v7.b;
			return {dB: label, f1: url};
		} else {
			return {dB: 'no image label', f1: 'no image url'};
		}
	}();
	var expr = A4(
		$author$project$Tools$forklogRed,
		'EXPR',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		A3(
			$author$project$Parser$Expr$Fun,
			'image',
			_List_fromArray(
				[
					A2($author$project$Parser$Expr$Text, data.f1 + (' ' + data.dB), meta)
				]),
			meta));
	return _Utils_update(
		state,
		{
			g: A2($elm$core$List$cons, expr, state.g),
			k: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$handleItalicSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			symbols,
			_List_fromArray(
				[5, 5]))) {
			var meta = {
				bl: 0,
				bp: 0,
				g7: A2($author$project$XMarkdown$Expression$makeId, state.eo, state.Y),
				dy: 0
			};
			var content = $author$project$XMarkdown$Token$toString2(
				$author$project$XMarkdown$Expression$takeMiddle(state.k));
			var expr = A3(
				$author$project$Parser$Expr$Fun,
				'italic',
				_List_fromArray(
					[
						A2($author$project$Parser$Expr$Text, content, meta)
					]),
				meta);
			return _Utils_update(
				state,
				{
					g: A2($elm$core$List$cons, expr, state.g),
					k: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$handleLink = function (state) {
	var meta = {
		bl: 0,
		bp: 0,
		g7: A2($author$project$XMarkdown$Expression$makeId, state.eo, state.Y),
		dy: 0
	};
	var expr = function () {
		var _v0 = state.k;
		_v0$3:
		while (true) {
			if (((((_v0.b && (_v0.a.$ === 3)) && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
				if (_v0.b.b.b.b.b.b) {
					if ((((((_v0.b.a.$ === 8) && (_v0.b.b.a.$ === 2)) && (_v0.b.b.b.a.$ === 1)) && (_v0.b.b.b.b.a.$ === 8)) && (!_v0.b.b.b.b.b.a.$)) && (!_v0.b.b.b.b.b.b.b)) {
						var _v1 = _v0.b;
						var _v2 = _v1.a;
						var url = _v2.a;
						var _v3 = _v1.b;
						var _v4 = _v3.b;
						var _v5 = _v4.b;
						var _v6 = _v5.a;
						var linkText = _v6.a;
						var _v7 = _v5.b;
						return A3(
							$author$project$Parser$Expr$Fun,
							'link',
							_List_fromArray(
								[
									A2($author$project$Parser$Expr$Text, linkText + (' ' + url), meta)
								]),
							meta);
					} else {
						break _v0$3;
					}
				} else {
					if (!_v0.b.b.b.b.a.$) {
						switch (_v0.b.a.$) {
							case 2:
								if ((_v0.b.b.a.$ === 1) && (_v0.b.b.b.a.$ === 8)) {
									var _v8 = _v0.b;
									var _v9 = _v8.b;
									var _v10 = _v9.b;
									var _v11 = _v10.a;
									var linkText = _v11.a;
									var _v12 = _v10.b;
									return A3(
										$author$project$Parser$Expr$Fun,
										'red',
										_List_fromArray(
											[
												A2($author$project$Parser$Expr$Text, '[' + (linkText + '](no label)'), meta)
											]),
										meta);
								} else {
									break _v0$3;
								}
							case 8:
								if ((_v0.b.b.a.$ === 2) && (_v0.b.b.b.a.$ === 1)) {
									var _v13 = _v0.b;
									var _v14 = _v13.a;
									var url = _v14.a;
									var _v15 = _v13.b;
									var _v16 = _v15.b;
									var _v17 = _v16.b;
									return A3(
										$author$project$Parser$Expr$Fun,
										'red',
										_List_fromArray(
											[
												A2($author$project$Parser$Expr$Text, '[Link: no label](' + (url + ')'), meta)
											]),
										meta);
								} else {
									break _v0$3;
								}
							default:
								break _v0$3;
						}
					} else {
						break _v0$3;
					}
				}
			} else {
				break _v0$3;
			}
		}
		return A3(
			$author$project$Parser$Expr$Fun,
			'red',
			_List_fromArray(
				[
					A2($author$project$Parser$Expr$Text, '[Link: no label or url]', meta)
				]),
			meta);
	}();
	return _Utils_update(
		state,
		{
			g: A2($elm$core$List$cons, expr, state.g),
			k: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$handleMathSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			symbols,
			_List_fromArray(
				[9, 9]))) {
			var content = $author$project$XMarkdown$Token$toString2(
				$author$project$XMarkdown$Expression$takeMiddle(state.k));
			var expr = A3(
				$author$project$Parser$Expr$Verbatim,
				'math',
				content,
				{
					bl: 0,
					bp: 0,
					g7: A2($author$project$XMarkdown$Expression$makeId, state.eo, state.Y),
					dy: 0
				});
			return _Utils_update(
				state,
				{
					g: A2($elm$core$List$cons, expr, state.g),
					k: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$handleParens = function (state) {
	var str = function () {
		var _v0 = state.k;
		if ((((((_v0.b && (_v0.a.$ === 3)) && _v0.b.b) && (_v0.b.a.$ === 8)) && _v0.b.b.b) && (_v0.b.b.a.$ === 2)) && (!_v0.b.b.b.b)) {
			var _v1 = _v0.b;
			var _v2 = _v1.a;
			var str_ = _v2.a;
			var _v3 = _v1.b;
			return '(' + (str_ + ')');
		} else {
			return $author$project$XMarkdown$Token$toString(
				$elm$core$List$reverse(state.k));
		}
	}();
	var meta = {
		bl: 0,
		bp: 0,
		g7: A2($author$project$XMarkdown$Expression$makeId, state.eo, state.Y),
		dy: 0
	};
	var expr = A2($author$project$Parser$Expr$Text, str, meta);
	return _Utils_update(
		state,
		{
			g: A2($elm$core$List$cons, expr, state.g),
			k: _List_Nil
		});
};
var $author$project$XMarkdown$Symbol$O = 8;
var $author$project$XMarkdown$Match$reducibleAux = function (symbols) {
	reducibleAux:
	while (true) {
		if ($elm$core$List$isEmpty(symbols)) {
			return true;
		} else {
			if (_Utils_eq(
				$elm$core$List$head(symbols),
				$elm$core$Maybe$Just(0)) && _Utils_eq(
				$elm_community$list_extra$List$Extra$last(symbols),
				$elm$core$Maybe$Just(1))) {
				var $temp$symbols = $author$project$Compiler$Util$middle(symbols);
				symbols = $temp$symbols;
				continue reducibleAux;
			} else {
				return false;
			}
		}
	}
};
var $author$project$XMarkdown$Match$reducibleF = function (symbols) {
	return _Utils_eq(
		symbols,
		_List_fromArray(
			[0, 1, 2, 3])) || _Utils_eq(
		symbols,
		_List_fromArray(
			[2, 3]));
};
var $author$project$XMarkdown$Match$reducible = function (symbols) {
	var _v0 = $elm$core$List$head(symbols);
	_v0$7:
	while (true) {
		if (!_v0.$) {
			switch (_v0.a) {
				case 9:
					var _v1 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just(9));
				case 10:
					var _v2 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just(10));
				case 4:
					var _v3 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just(4));
				case 5:
					var _v4 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just(5));
				case 6:
					var _v5 = _v0.a;
					return _Utils_eq(
						symbols,
						_List_fromArray(
							[6, 0, 1, 2, 3]));
				case 0:
					var _v6 = _v0.a;
					return _Utils_eq(
						symbols,
						_List_fromArray(
							[0, 1, 2, 3])) ? true : false;
				case 7:
					var _v7 = _v0.a;
					return ($elm$core$List$length(symbols) > 1) ? $author$project$XMarkdown$Match$reducibleAux(
						A2($elm$core$List$drop, 1, symbols)) : false;
				default:
					break _v0$7;
			}
		} else {
			break _v0$7;
		}
	}
	return $author$project$XMarkdown$Match$reducibleF(symbols);
};
var $author$project$XMarkdown$Expression$isReducible = function (tokens) {
	var preliminary = A4(
		$author$project$Tools$forklogYellow,
		'SYMBOLS',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		A2(
			$elm$core$List$filter,
			function (sym) {
				return sym !== 8;
			},
			$author$project$XMarkdown$Symbol$convertTokens(
				$elm$core$List$reverse(tokens))));
	return _Utils_eq(preliminary, _List_Nil) ? false : A4(
		$author$project$Tools$forklogYellow,
		'REDUCIBLE ?',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		$author$project$XMarkdown$Match$reducible(preliminary));
};
var $author$project$XMarkdown$Expression$reduceState = function (state) {
	var reducible1 = A4(
		$author$project$Tools$forklogRed,
		'SYMBOLS (!!)',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		$author$project$XMarkdown$Expression$isReducible(state.k));
	if ((_Utils_cmp(state.Y, state.b2) > -1) || reducible1) {
		var symbols = A4(
			$author$project$Tools$forklogRed,
			'SYMBOLS',
			$author$project$XMarkdown$Expression$forkLogWidth,
			$elm$core$Basics$identity,
			$elm$core$List$reverse(
				$author$project$XMarkdown$Symbol$convertTokens(state.k)));
		var _v0 = $elm$core$List$head(symbols);
		_v0$8:
		while (true) {
			if (!_v0.$) {
				switch (_v0.a) {
					case 7:
						var _v1 = _v0.a;
						return $author$project$XMarkdown$Expression$handleAt(state);
					case 9:
						var _v2 = _v0.a;
						return A2($author$project$XMarkdown$Expression$handleMathSymbol, symbols, state);
					case 10:
						var _v3 = _v0.a;
						return A2($author$project$XMarkdown$Expression$handleCodeSymbol, symbols, state);
					case 4:
						var _v4 = _v0.a;
						if ((((((((symbols.b && (symbols.a === 4)) && symbols.b.b) && (symbols.b.a === 5)) && symbols.b.b.b) && (symbols.b.b.a === 5)) && symbols.b.b.b.b) && (symbols.b.b.b.a === 4)) && (!symbols.b.b.b.b.b)) {
							var _v6 = symbols.a;
							var _v7 = symbols.b;
							var _v8 = _v7.a;
							var _v9 = _v7.b;
							var _v10 = _v9.a;
							var _v11 = _v9.b;
							var _v12 = _v11.a;
							return $author$project$XMarkdown$Expression$handleBoldItalic(state);
						} else {
							return A2($author$project$XMarkdown$Expression$handleBoldSymbol, symbols, state);
						}
					case 5:
						var _v13 = _v0.a;
						return A2($author$project$XMarkdown$Expression$handleItalicSymbol, symbols, state);
					case 0:
						var _v14 = _v0.a;
						return _Utils_eq(
							symbols,
							_List_fromArray(
								[0, 1, 2, 3])) ? $author$project$XMarkdown$Expression$handleLink(state) : A4(
							$author$project$Tools$forklogRed,
							'HANDLE[]',
							$author$project$XMarkdown$Expression$forkLogWidth,
							$elm$core$Basics$identity,
							$author$project$XMarkdown$Expression$handleBracketedText(state));
					case 6:
						var _v15 = _v0.a;
						return $author$project$XMarkdown$Expression$handleImage(state);
					case 2:
						var _v16 = _v0.a;
						return $author$project$XMarkdown$Expression$handleParens(state);
					default:
						break _v0$8;
				}
			} else {
				break _v0$8;
			}
		}
		return state;
	} else {
		return state;
	}
};
var $author$project$XMarkdown$Expression$nextStep = function (state) {
	var _v0 = A2($elm_community$list_extra$List$Extra$getAt, state.Y, state.cq);
	if (_v0.$ === 1) {
		return $elm$core$List$isEmpty(state.k) ? $author$project$Parser$Helpers$Done(state) : $author$project$XMarkdown$Expression$recoverFromError(
			A4(
				$author$project$Tools$forklogBlue,
				'RECOVER',
				12,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.k;
					},
					A2($elm$core$Basics$composeR, $elm$core$List$reverse, $author$project$XMarkdown$Token$toString2)),
				state));
	} else {
		var token = _v0.a;
		return $author$project$Parser$Helpers$Loop(
			function (st) {
				return _Utils_update(
					st,
					{dL: st.dL + 1});
			}(
				$author$project$XMarkdown$Expression$reduceState(
					A4(
						$author$project$Tools$forklogBlue,
						'STACK',
						$author$project$XMarkdown$Expression$forkLogWidth,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.k;
							},
							$author$project$XMarkdown$Token$toString2),
						A2(
							$author$project$XMarkdown$Expression$pushToken,
							token,
							$author$project$XMarkdown$Expression$advanceTokenIndex(state))))));
	}
};
var $author$project$XMarkdown$Expression$run = function (state) {
	return function (state_) {
		return _Utils_update(
			state_,
			{
				g: $elm$core$List$reverse(state_.g)
			});
	}(
		A2($author$project$Parser$Helpers$loop, state, $author$project$XMarkdown$Expression$nextStep));
};
var $author$project$XMarkdown$Token$Normal = 0;
var $author$project$XMarkdown$Token$init = function (str) {
	return {
		bn: $elm$core$Maybe$Nothing,
		cS: 0,
		bz: 0,
		eI: str,
		eJ: $elm$core$String$length(str),
		Y: 0,
		cq: _List_Nil
	};
};
var $author$project$XMarkdown$Token$TLB = 0;
var $author$project$XMarkdown$Token$fakeDebugLog = function (_v0) {
	return $elm$core$Basics$identity;
};
var $author$project$XMarkdown$Token$finish = function (state) {
	var _v0 = state.bn;
	if (!_v0.$) {
		var token = _v0.a;
		return $author$project$Parser$Helpers$Done(
			A2($elm$core$List$cons, token, state.cq));
	} else {
		return $author$project$Parser$Helpers$Done(state.cq);
	}
};
var $author$project$XMarkdown$Token$makeId = F2(
	function (a, b) {
		return $elm$core$String$fromInt(a) + ('.' + $elm$core$String$fromInt(b));
	});
var $author$project$XMarkdown$Token$codeParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$CodeToken(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '`';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$codeChars = _List_fromArray(
	['`']);
var $author$project$XMarkdown$Token$languageChars = _List_fromArray(
	['\\', '[', ']', '(', ')', '`', '*', '$']);
var $author$project$XMarkdown$Token$codeTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$S,
					data.bM,
					{
						bl: start,
						bp: ((start + data.bp) - data.bl) - 1,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$codeChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$languageChars));
				}));
	});
var $author$project$XMarkdown$Token$whiteSpaceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$W,
					data.bM,
					{
						bl: start,
						bp: start,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === ' ';
				},
				function (c) {
					return c === ' ';
				}));
	});
var $author$project$XMarkdown$Token$codeParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$XMarkdown$Token$codeTextParser, start, index),
					A2($author$project$XMarkdown$Token$codeParser, start, index),
					A2($author$project$XMarkdown$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$XMarkdown$Token$mathParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$MathToken(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '$';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$mathChars = _List_fromArray(
	['$']);
var $author$project$XMarkdown$Token$mathTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$S,
					data.bM,
					{
						bl: start,
						bp: ((start + data.bp) - data.bl) - 1,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$mathChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$languageChars));
				}));
	});
var $author$project$XMarkdown$Token$mathParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$XMarkdown$Token$mathTextParser, start, index),
					A2($author$project$XMarkdown$Token$mathParser, start, index),
					A2($author$project$XMarkdown$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$Parser$Tools$ExpectingATStart = {$: 3};
var $author$project$XMarkdown$Token$atParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$XMarkdown$Token$AT(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '@[', $author$project$Parser$Tools$ExpectingATStart)));
	});
var $author$project$XMarkdown$Token$boldParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$XMarkdown$Token$Bold(
					{
						bl: start,
						bp: start + 1,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'**',
					$author$project$Parser$Tools$ExpectingSymbol('**'))));
	});
var $author$project$Parser$Tools$ExpectingImageStart = {$: 2};
var $author$project$XMarkdown$Token$imageParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$XMarkdown$Token$Image(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '![', $author$project$Parser$Tools$ExpectingImageStart)));
	});
var $author$project$XMarkdown$Token$italicParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$Italic(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '*';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$leftBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$LB(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '[';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$leftParenParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$LP(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === '(';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$rightBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$RB(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === ']';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$rightParenParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$RP(
					{
						bl: start,
						bp: start,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return c === ')';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$textParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$S,
					data.bM,
					{
						bl: start,
						bp: ((start + data.bp) - data.bl) - 1,
						g7: A2($author$project$XMarkdown$Token$makeId, start, index),
						dy: index
					});
			},
			A2(
				$author$project$Parser$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$languageChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$languageChars));
				}));
	});
var $author$project$XMarkdown$Token$tokenParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$XMarkdown$Token$imageParser, start, index),
					A2($author$project$XMarkdown$Token$atParser, start, index),
					A2($author$project$XMarkdown$Token$textParser, start, index),
					A2($author$project$XMarkdown$Token$leftBracketParser, start, index),
					A2($author$project$XMarkdown$Token$rightBracketParser, start, index),
					A2($author$project$XMarkdown$Token$leftParenParser, start, index),
					A2($author$project$XMarkdown$Token$rightParenParser, start, index),
					A2($author$project$XMarkdown$Token$boldParser, start, index),
					A2($author$project$XMarkdown$Token$italicParser, start, index),
					A2($author$project$XMarkdown$Token$mathParser, start, index),
					A2($author$project$XMarkdown$Token$codeParser, start, index),
					A2($author$project$XMarkdown$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$XMarkdown$Token$tokenParser = F3(
	function (mode, start, index) {
		switch (mode) {
			case 0:
				return A2($author$project$XMarkdown$Token$tokenParser_, start, index);
			case 1:
				return A2($author$project$XMarkdown$Token$mathParser_, start, index);
			default:
				return A2($author$project$XMarkdown$Token$codeParser_, start, index);
		}
	});
var $author$project$XMarkdown$Token$get = F3(
	function (state, start, input) {
		var _v0 = A2(
			$elm$parser$Parser$Advanced$run,
			A3($author$project$XMarkdown$Token$tokenParser, state.cS, start, state.Y),
			input);
		if (!_v0.$) {
			var token = _v0.a;
			return token;
		} else {
			var errorList = _v0.a;
			return A2(
				$author$project$XMarkdown$Token$TokenError,
				errorList,
				{
					bl: start,
					bp: start + 1,
					g7: A2($author$project$XMarkdown$Token$makeId, start, state.Y),
					dy: state.Y
				});
		}
	});
var $author$project$XMarkdown$Token$handleDefault = F2(
	function (state, token) {
		var _v0 = state.bn;
		if (_v0.$ === 1) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.Y, token),
					state.cq),
				state.Y + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.Y + 1, token),
					A2($elm$core$List$cons, textToken, state.cq)),
				state.Y + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$XMarkdown$Token$handleLB = F2(
	function (state, token) {
		var _v0 = state.bn;
		if (_v0.$ === 1) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.Y, token),
					state.cq),
				state.Y + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.Y + 1, token),
					A2(
						$elm$core$List$cons,
						A2($author$project$XMarkdown$Token$setIndex, state.Y, textToken),
						state.cq)),
				state.Y + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$XMarkdown$Token$boostMeta = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.bl;
		var end = _v0.bp;
		var index = _v0.dy;
		return {
			bl: begin,
			bp: end,
			g7: A2($author$project$XMarkdown$Token$makeId, lineNumber, tokenIndex),
			dy: index
		};
	});
var $author$project$XMarkdown$Token$getMeta = function (token) {
	switch (token.$) {
		case 0:
			var m = token.a;
			return m;
		case 1:
			var m = token.a;
			return m;
		case 2:
			var m = token.a;
			return m;
		case 3:
			var m = token.a;
			return m;
		case 6:
			var m = token.a;
			return m;
		case 7:
			var m = token.a;
			return m;
		case 4:
			var m = token.a;
			return m;
		case 5:
			var m = token.a;
			return m;
		case 8:
			var m = token.b;
			return m;
		case 9:
			var m = token.b;
			return m;
		case 10:
			var m = token.a;
			return m;
		case 11:
			var m = token.a;
			return m;
		default:
			var m = token.b;
			return m;
	}
};
var $author$project$XMarkdown$Token$mergeToken = F2(
	function (lastToken, currentToken) {
		var lastTokenMeta = $author$project$XMarkdown$Token$getMeta(lastToken);
		var currentTokenMeta = $author$project$XMarkdown$Token$getMeta(currentToken);
		var meta = {bl: lastTokenMeta.bl, bp: currentTokenMeta.bp, dy: -1};
		return A2(
			$author$project$XMarkdown$Token$S,
			_Utils_ap(
				$author$project$XMarkdown$Token$stringValue(lastToken),
				$author$project$XMarkdown$Token$stringValue(currentToken)),
			A3($author$project$XMarkdown$Token$boostMeta, meta.bl, meta.bp, meta));
	});
var $author$project$XMarkdown$Token$updateCurrentToken = F3(
	function (index, token, currentToken) {
		if (currentToken.$ === 1) {
			return $elm$core$Maybe$Just(
				A2($author$project$XMarkdown$Token$setIndex, index, token));
		} else {
			var token_ = currentToken.a;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$XMarkdown$Token$setIndex,
					index,
					A2($author$project$XMarkdown$Token$mergeToken, token_, token)));
		}
	});
var $author$project$XMarkdown$Token$handleMerge = F2(
	function (state, token) {
		return _Utils_Tuple3(
			state.cq,
			state.Y,
			A3($author$project$XMarkdown$Token$updateCurrentToken, state.Y, token, state.bn));
	});
var $author$project$XMarkdown$Token$TS = 8;
var $author$project$XMarkdown$Token$TW = 9;
var $author$project$XMarkdown$Token$TAT = 7;
var $author$project$XMarkdown$Token$TBold = 4;
var $author$project$XMarkdown$Token$TCode = 11;
var $author$project$XMarkdown$Token$TImage = 6;
var $author$project$XMarkdown$Token$TItalic = 5;
var $author$project$XMarkdown$Token$TLP = 2;
var $author$project$XMarkdown$Token$TMath = 10;
var $author$project$XMarkdown$Token$TRB = 1;
var $author$project$XMarkdown$Token$TRP = 3;
var $author$project$XMarkdown$Token$TTokenError = 12;
var $author$project$XMarkdown$Token$type_ = function (token) {
	switch (token.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		case 6:
			return 4;
		case 7:
			return 5;
		case 4:
			return 6;
		case 5:
			return 7;
		case 8:
			return 8;
		case 9:
			return 9;
		case 10:
			return 10;
		case 11:
			return 11;
		default:
			return 12;
	}
};
var $author$project$XMarkdown$Token$isTextToken = function (token) {
	return A2(
		$elm$core$List$member,
		$author$project$XMarkdown$Token$type_(token),
		_List_fromArray(
			[9, 8]));
};
var $author$project$XMarkdown$Token$length = function (token) {
	switch (token.$) {
		case 0:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 1:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 2:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 3:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 6:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 7:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 4:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 5:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 8:
			var meta = token.b;
			return meta.bp - meta.bl;
		case 10:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 11:
			var meta = token.a;
			return meta.bp - meta.bl;
		case 9:
			var meta = token.b;
			return meta.bp - meta.bl;
		default:
			var meta = token.b;
			return meta.bp - meta.bl;
	}
};
var $author$project$XMarkdown$Token$InCode = 2;
var $author$project$XMarkdown$Token$InMath = 1;
var $author$project$XMarkdown$Token$newMode = F2(
	function (token, currentMode) {
		switch (currentMode) {
			case 0:
				switch (token.$) {
					case 10:
						return 1;
					case 11:
						return 2;
					default:
						return 0;
				}
			case 1:
				if (token.$ === 10) {
					return 0;
				} else {
					return 1;
				}
			default:
				if (token.$ === 11) {
					return 0;
				} else {
					return 2;
				}
		}
	});
var $author$project$XMarkdown$Token$nextStep = function (state) {
	if (_Utils_cmp(state.bz, state.eJ) > -1) {
		return $author$project$XMarkdown$Token$finish(state);
	} else {
		var token = A3(
			$author$project$XMarkdown$Token$get,
			state,
			state.bz,
			A2($elm$core$String$dropLeft, state.bz, state.eI));
		var newScanPointer = (state.bz + $author$project$XMarkdown$Token$length(token)) + 1;
		var _v0 = $author$project$XMarkdown$Token$isTextToken(token) ? A2(
			$author$project$XMarkdown$Token$fakeDebugLog,
			'(1)',
			A2($author$project$XMarkdown$Token$handleMerge, state, token)) : ((!$author$project$XMarkdown$Token$type_(token)) ? A2(
			$author$project$XMarkdown$Token$fakeDebugLog,
			'(2)',
			A2($author$project$XMarkdown$Token$handleLB, state, token)) : A2(
			$author$project$XMarkdown$Token$fakeDebugLog,
			'(3)',
			A2($author$project$XMarkdown$Token$handleDefault, state, token)));
		var tokens = _v0.a;
		var tokenIndex = _v0.b;
		var currentToken_ = _v0.c;
		var currentToken = $author$project$XMarkdown$Token$isTextToken(token) ? currentToken_ : $elm$core$Maybe$Nothing;
		return $author$project$Parser$Helpers$Loop(
			_Utils_update(
				state,
				{
					bn: currentToken,
					cS: A2($author$project$XMarkdown$Token$newMode, token, state.cS),
					bz: newScanPointer,
					Y: tokenIndex,
					cq: tokens
				}));
	}
};
var $author$project$XMarkdown$Token$run = function (source) {
	return A2(
		$author$project$Parser$Helpers$loop,
		$author$project$XMarkdown$Token$init(source),
		$author$project$XMarkdown$Token$nextStep);
};
var $author$project$XMarkdown$Expression$parse = F2(
	function (lineNumber, str) {
		return A4(
			$author$project$Tools$forklogCyan,
			'LENGTH',
			$author$project$XMarkdown$Expression$forkLogWidth,
			$elm$core$List$length,
			$author$project$XMarkdown$Expression$run(
				A2(
					$author$project$XMarkdown$Expression$initWithTokens,
					lineNumber,
					A4(
						$author$project$Tools$forklogCyan,
						'TOKENS',
						$author$project$XMarkdown$Expression$forkLogWidth,
						$author$project$XMarkdown$Token$toString2,
						$author$project$XMarkdown$Token$run(str)))).g);
	});
var $author$project$Markup$parsePlainText = function (str) {
	return _List_fromArray(
		[
			A2(
			$author$project$Parser$Expr$Text,
			str,
			{bl: 0, bp: 0, g7: '??', dy: 0})
		]);
};
var $author$project$Compiler$Util$keyValParser = function (key) {
	return A2(
		$elm$parser$Parser$map,
		$elm$core$String$trim,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								$elm$parser$Parser$succeed($elm$core$String$slice),
								$elm$parser$Parser$chompUntil('[' + (key + ' '))),
							$elm$parser$Parser$symbol('[' + (key + ' '))),
						$elm$parser$Parser$spaces),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$getOffset,
						$elm$parser$Parser$chompUntil(']'))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource));
};
var $author$project$Compiler$Util$runParser = F3(
	function (stringParser, str, _default) {
		var _v0 = A2($elm$parser$Parser$run, stringParser, str);
		if (!_v0.$) {
			var s = _v0.a;
			return s;
		} else {
			return _default;
		}
	});
var $author$project$Compiler$Util$getItem = F3(
	function (language, key, str) {
		switch (language) {
			case 0:
				return A3(
					$author$project$Compiler$Util$runParser,
					$author$project$Compiler$Util$keyValParser(key),
					str,
					'');
			case 1:
				return A3(
					$author$project$Compiler$Util$runParser,
					$author$project$Compiler$Util$macroValParser(key),
					str,
					'');
			case 2:
				return A3(
					$author$project$Compiler$Util$runParser,
					$author$project$Compiler$Util$keyValParser(key),
					str,
					'');
			default:
				return A3(
					$author$project$Compiler$Util$runParser,
					$author$project$Compiler$Util$keyValParser(key),
					str,
					'');
		}
	});
var $toastal$either$Either$Right = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$Transform$mapContentAux = F3(
	function (blockType, parsed, content) {
		switch (blockType.$) {
			case 0:
				return $toastal$either$Either$Right(parsed);
			case 1:
				return $toastal$either$Either$Right(parsed);
			default:
				var content_ = _Utils_eq(
					blockType,
					$author$project$Parser$Block$VerbatimBlock(
						_List_fromArray(
							['code']))) ? $toastal$either$Either$Left(
					A3($elm$core$String$replace, '```', '', content)) : (_Utils_eq(
					blockType,
					$author$project$Parser$Block$VerbatimBlock(
						_List_fromArray(
							['math']))) ? $toastal$either$Either$Left(
					A3($elm$core$String$replace, '$$', '', content)) : $toastal$either$Either$Left(content));
				return content_;
		}
	});
var $author$project$Parser$Transform$mapContent = F4(
	function (parse, lineNumber, blockType, content) {
		var _v0 = A2(parse, lineNumber, content);
		var parsed = _v0.a;
		var messages = _v0.b;
		return _Utils_Tuple2(
			A3($author$project$Parser$Transform$mapContentAux, blockType, parsed, content),
			messages);
	});
var $author$project$Parser$Block$OrdinaryBlock = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$Block$Paragraph = {$: 0};
var $author$project$Parser$Transform$toBlockType = F2(
	function (pbt, args) {
		switch (pbt) {
			case 2:
				return $author$project$Parser$Block$Paragraph;
			case 1:
				return $author$project$Parser$Block$OrdinaryBlock(args);
			default:
				return $author$project$Parser$Block$VerbatimBlock(args);
		}
	});
var $author$project$Parser$Transform$toExpressionBlock = F3(
	function (lang, parse, _v0) {
		var name = _v0.fA;
		var args = _v0.gn;
		var properties = _v0.w;
		var indent = _v0.hb;
		var error = _v0.fb;
		var lineNumber = _v0.eo;
		var blockType = _v0.dW;
		var content = _v0.bM;
		var sourceText = _v0.h7;
		var blockType_ = A2(
			$author$project$Parser$Transform$toBlockType,
			blockType,
			A2($elm$core$List$drop, 1, args));
		var _v1 = A4(
			$author$project$Parser$Transform$mapContent,
			parse,
			lineNumber,
			blockType_,
			A2($elm$core$String$join, '\n', content));
		var exprs = _v1.a;
		var messages = _v1.b;
		return {
			gn: args,
			dW: blockType_,
			bM: exprs,
			fb: error,
			g7: $elm$core$String$fromInt(lineNumber),
			hb: indent,
			eo: lineNumber,
			eq: messages,
			fA: name,
			hA: $elm$core$List$length(content),
			w: properties,
			h7: sourceText,
			ii: A3($author$project$Compiler$Util$getItem, lang, 'label', sourceText)
		};
	});
var $author$project$Compiler$DifferentialParser$toExprBlock = function (lang) {
	switch (lang) {
		case 1:
			return A2($author$project$Parser$Transform$toExpressionBlock, 1, $author$project$MicroLaTeX$Parser$Expression$parse);
		case 0:
			return A2($author$project$Parser$Transform$toExpressionBlock, 0, $author$project$L0$Parser$Expression$parseWithMessages);
		case 2:
			return A2(
				$author$project$Parser$Transform$toExpressionBlock,
				2,
				F2(
					function (_v1, s) {
						return _Utils_Tuple2(
							$author$project$Markup$parsePlainText(s),
							_List_Nil);
					}));
		default:
			return A2(
				$author$project$Parser$Transform$toExpressionBlock,
				3,
				F2(
					function (i, s) {
						return _Utils_Tuple2(
							A2($author$project$XMarkdown$Expression$parse, i, s),
							_List_Nil);
					}));
	}
};
var $author$project$Compiler$Vector$init = function (k) {
	return {
		bM: A2($elm$core$List$repeat, k, 0),
		h5: k
	};
};
var $author$project$Parser$Settings$numberedBlockNames = _List_fromArray(
	['q', 'axiom', 'box', 'theorem', 'definition', 'lemma', 'proposition', 'corollary', 'note', 'remark', 'question', 'problem', 'example', 'equation', 'aligned', 'quiver', 'image', 'iframe', 'chart']);
var $author$project$Parser$MathMacro$MacroBody = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Parser$MathMacro$makeEntry = function (newCommand_) {
	if (((((!newCommand_.$) && (newCommand_.a.a.$ === 1)) && newCommand_.a.c.b) && (newCommand_.a.c.a.$ === 2)) && (!newCommand_.a.c.b.b)) {
		var _v1 = newCommand_.a;
		var name = _v1.a.a;
		var arity = _v1.b;
		var _v2 = _v1.c;
		var body = _v2.a.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(
				name,
				A2($author$project$Parser$MathMacro$MacroBody, arity, body)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Parser$MathMacro$ExpectingLeftBrace = 0;
var $author$project$Parser$MathMacro$ExpectingNewCommand = 18;
var $author$project$Parser$MathMacro$ExpectingRightBrace = 15;
var $author$project$Parser$MathMacro$NewCommand = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $author$project$Parser$MathMacro$ExpectingBackslash = 17;
var $author$project$Parser$MathMacro$F0 = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$MathMacro$ExpectingAlpha = 1;
var $author$project$Parser$MathMacro$alphaNumParser_ = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed($elm$core$String$slice),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getOffset,
					A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isAlpha, 1)),
				$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isAlphaNum))),
		$elm$parser$Parser$Advanced$getOffset),
	$elm$parser$Parser$Advanced$getSource);
var $author$project$Parser$MathMacro$second = F2(
	function (p, q) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (_v0) {
				return q;
			},
			p);
	});
var $author$project$Parser$MathMacro$f0Parser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Parser$MathMacro$F0,
	A2(
		$author$project$Parser$MathMacro$second,
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '\\', 17)),
		$author$project$Parser$MathMacro$alphaNumParser_));
var $author$project$Parser$MathMacro$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (v) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					p),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $author$project$Parser$MathMacro$many = function (p) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$author$project$Parser$MathMacro$manyHelp(p));
};
var $author$project$Parser$MathMacro$Arg = function (a) {
	return {$: 2, a: a};
};
var $author$project$Parser$MathMacro$DecoM = function (a) {
	return {$: 0, a: a};
};
var $author$project$Parser$MathMacro$ExpectingCaret = 13;
var $author$project$Parser$MathMacro$ExpectingUnderscore = 12;
var $author$project$Parser$MathMacro$Macro = F2(
	function (a, b) {
		return {$: 13, a: a, b: b};
	});
var $author$project$Parser$MathMacro$Sub = function (a) {
	return {$: 3, a: a};
};
var $author$project$Parser$MathMacro$Super = function (a) {
	return {$: 4, a: a};
};
var $author$project$Parser$MathMacro$AlphaNum = function (a) {
	return {$: 0, a: a};
};
var $author$project$Parser$MathMacro$alphaNumParser = A2($elm$parser$Parser$Advanced$map, $author$project$Parser$MathMacro$AlphaNum, $author$project$Parser$MathMacro$alphaNumParser_);
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return function (s) {
		var _v0 = thunk(0);
		var parse = _v0;
		return parse(s);
	};
};
var $author$project$Parser$MathMacro$ExpectingLeftMathBrace = 10;
var $author$project$Parser$MathMacro$LeftMathBrace = {$: 10};
var $author$project$Parser$MathMacro$leftBraceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$Parser$MathMacro$LeftMathBrace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\{', 10)));
var $author$project$Parser$MathMacro$ExpectingMathMediumSpace = 6;
var $author$project$Parser$MathMacro$MathMediumSpace = {$: 9};
var $author$project$Parser$MathMacro$mathMediumSpaceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$Parser$MathMacro$MathMediumSpace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\;', 6)));
var $author$project$Parser$MathMacro$ExpectingMathSmallSpace = 5;
var $author$project$Parser$MathMacro$MathSmallSpace = {$: 8};
var $author$project$Parser$MathMacro$mathSmallSpaceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$Parser$MathMacro$MathSmallSpace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\,', 5)));
var $author$project$Parser$MathMacro$ExpectingMathSpace = 8;
var $author$project$Parser$MathMacro$MathSpace = {$: 7};
var $author$project$Parser$MathMacro$mathSpaceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$Parser$MathMacro$MathSpace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\ ', 8)));
var $author$project$Parser$MathMacro$ExpectingNotAlpha = 2;
var $author$project$Parser$MathMacro$MathSymbols = function (a) {
	return {$: 12, a: a};
};
var $author$project$Parser$MathMacro$mathSymbolsParser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Parser$MathMacro$MathSymbols,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($elm$core$String$slice),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$getOffset,
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							function (c) {
								return (!$elm$core$Char$isAlpha(c)) && (!A2(
									$elm$core$List$member,
									c,
									_List_fromArray(
										['_', '^', '#', '\\', '{', '}'])));
							},
							2)),
					$elm$parser$Parser$Advanced$chompWhile(
						function (c) {
							return (!$elm$core$Char$isAlpha(c)) && (!A2(
								$elm$core$List$member,
								c,
								_List_fromArray(
									['_', '^', '#', '\\', '{', '}'])));
						}))),
			$elm$parser$Parser$Advanced$getOffset),
		$elm$parser$Parser$Advanced$getSource));
var $author$project$Parser$MathMacro$DecoI = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$MathMacro$ExpectingInt = 3;
var $author$project$Parser$MathMacro$InvalidNumber = 4;
var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var $elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {bK: s.bK + (newOffset - s.hB), b: s.b, hb: s.hb, hB: newOffset, cg: s.cg, fV: s.fV};
	});
var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var $elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			$elm$parser$Parser$Advanced$consumeExp,
			A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var $elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _v0, s) {
		var endOffset = _v0.a;
		var n = _v0.b;
		if (handler.$ === 1) {
			var x = handler.a;
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.hB, startOffset) < 0,
				A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var $elm$core$String$toFloat = _String_toFloat;
var $elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.fV);
		if (floatOffset < 0) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A4($elm$parser$Parser$Advanced$fromInfo, s.cg, s.bK - (floatOffset + s.hB), invalid, s.b));
		} else {
			if (_Utils_eq(s.hB, floatOffset)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.hB, intPair, s);
				} else {
					if (floatSettings.$ === 1) {
						var x = floatSettings.a;
						return A2(
							$elm$parser$Parser$Advanced$Bad,
							true,
							A2($elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s.hB, floatOffset, s.fV));
						if (_v1.$ === 1) {
							return A2(
								$elm$parser$Parser$Advanced$Bad,
								true,
								A2($elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _v1.a;
							return A3(
								$elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$number = function (c) {
	return function (s) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.hB, s.fV)) {
			var zeroOffset = s.hB + 1;
			var baseOffset = zeroOffset + 1;
			return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.fV) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.hk,
				c.fm,
				baseOffset,
				A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.fV),
				s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.fV) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.hk,
				c.fE,
				baseOffset,
				A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.fV),
				s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.fV) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.hk,
				c.e2,
				baseOffset,
				A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.fV),
				s) : A6(
				$elm$parser$Parser$Advanced$finalizeFloat,
				c.hk,
				c.fc,
				c.fp,
				c.fe,
				_Utils_Tuple2(zeroOffset, 0),
				s)));
		} else {
			return A6(
				$elm$parser$Parser$Advanced$finalizeFloat,
				c.hk,
				c.fc,
				c.fp,
				c.fe,
				A3($elm$parser$Parser$Advanced$consumeBase, 10, s.hB, s.fV),
				s);
		}
	};
};
var $elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				e2: $elm$core$Result$Err(invalid),
				fc: expecting,
				fe: $elm$core$Result$Err(invalid),
				fm: $elm$core$Result$Err(invalid),
				fp: $elm$core$Result$Ok($elm$core$Basics$identity),
				hk: invalid,
				fE: $elm$core$Result$Err(invalid)
			});
	});
var $author$project$Parser$MathMacro$numericDecoParser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Parser$MathMacro$DecoI,
	A2($elm$parser$Parser$Advanced$int, 3, 4));
var $author$project$Parser$MathMacro$ExpectingHash = 16;
var $author$project$Parser$MathMacro$Param = function (a) {
	return {$: 5, a: a};
};
var $author$project$Parser$MathMacro$paramParser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Parser$MathMacro$Param,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '#', 16))),
		A2($elm$parser$Parser$Advanced$int, 3, 4)));
var $author$project$Parser$MathMacro$ExpectingRightMathBrace = 11;
var $author$project$Parser$MathMacro$RightMathBrace = {$: 11};
var $author$project$Parser$MathMacro$rightBraceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$Parser$MathMacro$RightMathBrace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\}', 11)));
var $author$project$Parser$MathMacro$ExpectingSpace = 14;
var $author$project$Parser$MathMacro$WS = {$: 6};
var $author$project$Parser$MathMacro$whitespaceParser = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $author$project$Parser$MathMacro$WS;
	},
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, ' ', 14)));
function $author$project$Parser$MathMacro$cyclic$mathExprParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$Parser$MathMacro$mathMediumSpaceParser,
				$author$project$Parser$MathMacro$mathSmallSpaceParser,
				$author$project$Parser$MathMacro$mathSpaceParser,
				$author$project$Parser$MathMacro$leftBraceParser,
				$author$project$Parser$MathMacro$rightBraceParser,
				$author$project$Parser$MathMacro$cyclic$macroParser(),
				$author$project$Parser$MathMacro$mathSymbolsParser,
				$elm$parser$Parser$Advanced$lazy(
				function (_v2) {
					return $author$project$Parser$MathMacro$cyclic$argParser();
				}),
				$author$project$Parser$MathMacro$paramParser,
				$author$project$Parser$MathMacro$whitespaceParser,
				$author$project$Parser$MathMacro$alphaNumParser,
				$author$project$Parser$MathMacro$f0Parser,
				$author$project$Parser$MathMacro$cyclic$subscriptParser(),
				$author$project$Parser$MathMacro$cyclic$superscriptParser()
			]));
}
function $author$project$Parser$MathMacro$cyclic$macroParser() {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($author$project$Parser$MathMacro$Macro),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '\\', 17))),
			$author$project$Parser$MathMacro$alphaNumParser_),
		$author$project$Parser$MathMacro$many(
			$author$project$Parser$MathMacro$cyclic$argParser()));
}
function $author$project$Parser$MathMacro$cyclic$argParser() {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$Parser$MathMacro$Arg,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '{', 0))),
				$elm$parser$Parser$Advanced$lazy(
					function (_v1) {
						return $author$project$Parser$MathMacro$many(
							$author$project$Parser$MathMacro$cyclic$mathExprParser());
					})),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '}', 15))));
}
function $author$project$Parser$MathMacro$cyclic$superscriptParser() {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$Parser$MathMacro$Super,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '^', 13))),
			$author$project$Parser$MathMacro$cyclic$decoParser()));
}
function $author$project$Parser$MathMacro$cyclic$subscriptParser() {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$Parser$MathMacro$Sub,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '_', 12))),
			$author$project$Parser$MathMacro$cyclic$decoParser()));
}
function $author$project$Parser$MathMacro$cyclic$decoParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$Parser$MathMacro$numericDecoParser,
				A2(
				$elm$parser$Parser$Advanced$map,
				$author$project$Parser$MathMacro$DecoM,
				$elm$parser$Parser$Advanced$lazy(
					function (_v0) {
						return $author$project$Parser$MathMacro$cyclic$mathExprParser();
					}))
			]));
}
var $author$project$Parser$MathMacro$mathExprParser = $author$project$Parser$MathMacro$cyclic$mathExprParser();
$author$project$Parser$MathMacro$cyclic$mathExprParser = function () {
	return $author$project$Parser$MathMacro$mathExprParser;
};
var $author$project$Parser$MathMacro$macroParser = $author$project$Parser$MathMacro$cyclic$macroParser();
$author$project$Parser$MathMacro$cyclic$macroParser = function () {
	return $author$project$Parser$MathMacro$macroParser;
};
var $author$project$Parser$MathMacro$argParser = $author$project$Parser$MathMacro$cyclic$argParser();
$author$project$Parser$MathMacro$cyclic$argParser = function () {
	return $author$project$Parser$MathMacro$argParser;
};
var $author$project$Parser$MathMacro$superscriptParser = $author$project$Parser$MathMacro$cyclic$superscriptParser();
$author$project$Parser$MathMacro$cyclic$superscriptParser = function () {
	return $author$project$Parser$MathMacro$superscriptParser;
};
var $author$project$Parser$MathMacro$subscriptParser = $author$project$Parser$MathMacro$cyclic$subscriptParser();
$author$project$Parser$MathMacro$cyclic$subscriptParser = function () {
	return $author$project$Parser$MathMacro$subscriptParser;
};
var $author$project$Parser$MathMacro$decoParser = $author$project$Parser$MathMacro$cyclic$decoParser();
$author$project$Parser$MathMacro$cyclic$decoParser = function () {
	return $author$project$Parser$MathMacro$decoParser;
};
var $author$project$Parser$MathMacro$ExpectingLeftBracket = 7;
var $author$project$Parser$MathMacro$ExpectingRightBracket = 9;
var $author$project$Parser$MathMacro$optionalParamParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '[', 7))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$int, 3, 4),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, ']', 9))));
var $author$project$Parser$MathMacro$newCommandParser1 = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (name, arity, body) {
								return A3($author$project$Parser$MathMacro$NewCommand, name, arity, body);
							})),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '\\newcommand', 18))),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '{', 0))),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$Parser$MathMacro$f0Parser,
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '}', 15)))),
		$author$project$Parser$MathMacro$optionalParamParser),
	$author$project$Parser$MathMacro$many($author$project$Parser$MathMacro$mathExprParser));
var $author$project$Parser$MathMacro$newCommandParser2 = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					F2(
						function (name, body) {
							return A3($author$project$Parser$MathMacro$NewCommand, name, 0, body);
						})),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '\\newcommand', 18))),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '{', 0))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$author$project$Parser$MathMacro$f0Parser,
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '}', 15)))),
	$author$project$Parser$MathMacro$many($author$project$Parser$MathMacro$mathExprParser));
var $author$project$Parser$MathMacro$newCommandParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$backtrackable($author$project$Parser$MathMacro$newCommandParser1),
			$author$project$Parser$MathMacro$newCommandParser2
		]));
var $author$project$Parser$MathMacro$parseNewCommand = function (str) {
	return A2($elm$parser$Parser$Advanced$run, $author$project$Parser$MathMacro$newCommandParser, str);
};
var $author$project$Parser$MathMacro$makeMacroDict = function (str) {
	return $elm$core$Dict$fromList(
		$elm_community$maybe_extra$Maybe$Extra$values(
			A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $author$project$Parser$MathMacro$parseNewCommand, $author$project$Parser$MathMacro$makeEntry),
				$elm$core$String$lines(
					$elm$core$String$trim(str)))));
};
var $author$project$Compiler$Acc$updateWithMathMacros = F2(
	function (content, accumulator) {
		var definitions = $elm$core$String$trim(
			A3(
				$elm$core$String$replace,
				'end',
				'',
				A3(
					$elm$core$String$replace,
					'\\end{mathmacros}',
					'',
					A3($elm$core$String$replace, '\\begin{mathmacros}', '', content))));
		var mathMacroDict = $author$project$Parser$MathMacro$makeMacroDict(
			$elm$core$String$trim(definitions));
		return _Utils_update(
			accumulator,
			{ep: mathMacroDict});
	});
var $author$project$Compiler$TextMacro$insert = F2(
	function (data, dict) {
		if (data.$ === 1) {
			return dict;
		} else {
			var macro = data.a;
			return A3($elm$core$Dict$insert, macro.fA, macro, dict);
		}
	});
var $author$project$Compiler$TextMacro$extract = function (expr_) {
	if ((((!expr_.$) && (expr_.a === 'macro')) && expr_.b.b) && (expr_.b.a.$ === 1)) {
		var _v1 = expr_.b;
		var _v2 = _v1.a;
		var argString = _v2.a;
		var exprs = _v1.b;
		var _v3 = $elm$core$String$words(
			$elm$core$String$trim(argString));
		if (_v3.b) {
			var name = _v3.a;
			var rest = _v3.b;
			return $elm$core$Maybe$Just(
				{aS: exprs, fA: name, bi: rest});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$L0$Parser$Expression$parse = F2(
	function (lineNumber, str) {
		var state = A2($author$project$L0$Parser$Expression$parseToState, lineNumber, str);
		return state.g;
	});
var $author$project$Compiler$TextMacro$macroFromL0String = function (str) {
	return A2(
		$elm$core$Maybe$andThen,
		$author$project$Compiler$TextMacro$extract,
		$elm$core$List$head(
			A2($author$project$L0$Parser$Expression$parse, 0, str)));
};
var $author$project$Compiler$TextMacroParser$ExpectingHash = 2;
var $author$project$Compiler$TextMacroParser$ExpectingInt = 0;
var $author$project$Compiler$TextMacroParser$InvalidNumber = 1;
var $author$project$Compiler$TextMacroParser$paramParser2 = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$chompUntil(
				A2($elm$parser$Parser$Advanced$Token, '#', 2))),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '#', 2))),
	A2($elm$parser$Parser$Advanced$int, 0, 1));
var $author$project$Compiler$TextMacroParser$getParam = function (str) {
	var _v0 = A2($elm$parser$Parser$Advanced$run, $author$project$Compiler$TextMacroParser$paramParser2, str);
	if (!_v0.$) {
		var n = _v0.a;
		return $elm$core$Maybe$Just(
			'#' + $elm$core$String$fromInt(n));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Compiler$TextMacro$getParam = function (str) {
	var _v0 = $author$project$Compiler$TextMacroParser$getParam(str);
	if (!_v0.$) {
		var result = _v0.a;
		return _List_fromArray(
			[result]);
	} else {
		return _List_Nil;
	}
};
var $author$project$Compiler$TextMacro$getVars_ = function (expr) {
	switch (expr.$) {
		case 1:
			var str = expr.a;
			return $author$project$Compiler$TextMacro$getParam(str);
		case 0:
			var exprs = expr.b;
			return $elm$core$List$concat(
				A2($elm$core$List$map, $author$project$Compiler$TextMacro$getVars_, exprs));
		default:
			return _List_Nil;
	}
};
var $elm$core$List$sortBy = _List_sortBy;
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$unique = function (list) {
	return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, _List_Nil, list, _List_Nil);
};
var $author$project$Compiler$TextMacro$getVars = function (exprs) {
	return $elm$core$List$sort(
		$elm_community$list_extra$List$Extra$unique(
			$elm$core$List$concat(
				A2($elm$core$List$map, $author$project$Compiler$TextMacro$getVars_, exprs))));
};
var $author$project$Compiler$TextMacro$extract3Aux = F3(
	function (name, rest, meta) {
		return {
			aS: rest,
			fA: name,
			bi: $author$project$Compiler$TextMacro$getVars(rest)
		};
	});
var $author$project$Compiler$TextMacro$extract2Aux = F2(
	function (body, meta) {
		if (body.b && (!body.a.$)) {
			var _v1 = body.a;
			var name = _v1.a;
			var rest = body.b;
			return $elm$core$Maybe$Just(
				A3($author$project$Compiler$TextMacro$extract3Aux, name, rest, meta));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Compiler$TextMacro$extract2 = function (expr) {
	if (!expr.$) {
		var name = expr.a;
		var body = expr.b;
		var meta = expr.c;
		return (name === 'newcommand') ? A2($author$project$Compiler$TextMacro$extract2Aux, body, meta) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Compiler$TextMacro$parseMicroLaTeX = function (str) {
	return A2($author$project$MicroLaTeX$Parser$Expression$parse, 0, str).a;
};
var $author$project$Compiler$TextMacro$macroFromMicroLaTeXString = function (macroS) {
	return A2(
		$elm$core$Maybe$andThen,
		$author$project$Compiler$TextMacro$extract2,
		$elm$core$List$head(
			$author$project$Compiler$TextMacro$parseMicroLaTeX(macroS)));
};
var $author$project$Compiler$TextMacro$macroFromString = function (str) {
	var _v0 = A2($elm$core$String$left, 1, str);
	switch (_v0) {
		case '\\':
			return $author$project$Compiler$TextMacro$macroFromMicroLaTeXString(str);
		case '[':
			return $author$project$Compiler$TextMacro$macroFromL0String(str);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Compiler$TextMacro$buildDictionary = function (lines) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (line, acc) {
				return A2(
					$author$project$Compiler$TextMacro$insert,
					$author$project$Compiler$TextMacro$macroFromString(line),
					acc);
			}),
		$elm$core$Dict$empty,
		lines);
};
var $author$project$Compiler$Acc$normalzeLines = function (lines) {
	return A2(
		$elm$core$List$filter,
		function (line) {
			return line !== '';
		},
		A2(
			$elm$core$List$map,
			function (line) {
				return $elm$core$String$trim(line);
			},
			lines));
};
var $author$project$Compiler$Acc$updateWithTextMacros = F2(
	function (content, accumulator) {
		return _Utils_update(
			accumulator,
			{
				c9: $author$project$Compiler$TextMacro$buildDictionary(
					$author$project$Compiler$Acc$normalzeLines(
						$elm$core$String$lines(content)))
			});
	});
var $author$project$Compiler$Acc$init = function (data) {
	return A2(
		$author$project$Compiler$Acc$updateWithTextMacros,
		data.is,
		A2(
			$author$project$Compiler$Acc$updateWithMathMacros,
			data.hp,
			{
				aR: 0,
				I: $elm$core$Dict$empty,
				cC: $author$project$Compiler$Vector$init(data.iT),
				du: $elm$core$Dict$empty,
				dv: $elm$core$Dict$empty,
				J: $author$project$Compiler$Vector$init(data.iT),
				aH: false,
				a9: $author$project$Compiler$Vector$init(data.iT),
				dA: $elm$core$Dict$empty,
				fs: data.fs,
				ep: $elm$core$Dict$empty,
				ew: $author$project$Parser$Settings$numberedBlockNames,
				bd: $elm$core$Dict$empty,
				eB: $elm$core$Dict$empty,
				b9: _List_Nil,
				cb: $elm$core$Dict$empty,
				dM: $elm$core$Dict$empty,
				c9: $elm$core$Dict$empty
			}));
};
var $author$project$Compiler$Acc$mapper = F2(
	function (ast_, _v0) {
		var acc_ = _v0.a;
		var tree_ = _v0.b;
		return _Utils_Tuple2(
			acc_,
			A2($elm$core$List$cons, tree_, ast_));
	});
var $zwilias$elm_rosetree$Tree$mapAccumulateHelp = F4(
	function (f, state, acc, stack) {
		mapAccumulateHelp:
		while (true) {
			var _v0 = acc.i;
			if (!_v0.b) {
				var node = A2(
					$zwilias$elm_rosetree$Tree$Tree,
					acc.dB,
					$elm$core$List$reverse(acc.a));
				if (!stack.b) {
					return _Utils_Tuple2(state, node);
				} else {
					var top = stack.a;
					var rest = stack.b;
					var $temp$f = f,
						$temp$state = state,
						$temp$acc = _Utils_update(
						top,
						{
							a: A2($elm$core$List$cons, node, top.a)
						}),
						$temp$stack = rest;
					f = $temp$f;
					state = $temp$state;
					acc = $temp$acc;
					stack = $temp$stack;
					continue mapAccumulateHelp;
				}
			} else {
				if (!_v0.a.b.b) {
					var _v2 = _v0.a;
					var d = _v2.a;
					var rest = _v0.b;
					var _v3 = A2(f, state, d);
					var state_ = _v3.a;
					var label_ = _v3.b;
					var $temp$f = f,
						$temp$state = state_,
						$temp$acc = _Utils_update(
						acc,
						{
							a: A2(
								$elm$core$List$cons,
								A2($zwilias$elm_rosetree$Tree$Tree, label_, _List_Nil),
								acc.a),
							i: rest
						}),
						$temp$stack = stack;
					f = $temp$f;
					state = $temp$state;
					acc = $temp$acc;
					stack = $temp$stack;
					continue mapAccumulateHelp;
				} else {
					var _v4 = _v0.a;
					var d = _v4.a;
					var cs = _v4.b;
					var rest = _v0.b;
					var _v5 = A2(f, state, d);
					var state_ = _v5.a;
					var label_ = _v5.b;
					var $temp$f = f,
						$temp$state = state_,
						$temp$acc = {a: _List_Nil, dB: label_, i: cs},
						$temp$stack = A2(
						$elm$core$List$cons,
						_Utils_update(
							acc,
							{i: rest}),
						stack);
					f = $temp$f;
					state = $temp$state;
					acc = $temp$acc;
					stack = $temp$stack;
					continue mapAccumulateHelp;
				}
			}
		}
	});
var $zwilias$elm_rosetree$Tree$mapAccumulate = F3(
	function (f, s, _v0) {
		var d = _v0.a;
		var cs = _v0.b;
		var _v1 = A2(f, s, d);
		var s_ = _v1.a;
		var d_ = _v1.b;
		return A4(
			$zwilias$elm_rosetree$Tree$mapAccumulateHelp,
			f,
			s_,
			{a: _List_Nil, dB: d_, i: cs},
			_List_Nil);
	});
var $author$project$Compiler$ASTTools$filterExprs = F2(
	function (predicate, list) {
		return A2(
			$elm$core$List$filter,
			function (item) {
				return predicate(item);
			},
			list);
	});
var $author$project$Compiler$ASTTools$isBlank = function (expr) {
	if (expr.$ === 1) {
		var content = expr.a;
		return ($elm$core$String$trim(content) === '') ? true : false;
	} else {
		return false;
	}
};
var $author$project$Compiler$TextMacro$filterOutBlanks = $author$project$Compiler$ASTTools$filterExprs(
	function (e) {
		return !$author$project$Compiler$ASTTools$isBlank(e);
	});
var $author$project$Compiler$TextMacro$group = function (exprs) {
	return A3($author$project$Parser$Expr$Fun, 'group', exprs, $author$project$Parser$Meta$dummy);
};
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $author$project$Compiler$TextMacro$subst = F3(
	function (a, _var, body) {
		switch (body.$) {
			case 1:
				var str = body.a;
				if (_Utils_eq(
					$elm$core$String$trim(str),
					$elm$core$String$trim(_var))) {
					return a;
				} else {
					if (A2($elm$core$String$contains, _var, str)) {
						var parts = A2(
							$elm$core$List$map,
							function (s) {
								return A2($author$project$Parser$Expr$Text, s, $author$project$Parser$Meta$dummy);
							},
							A2($elm$core$String$split, _var, str));
						return $author$project$Compiler$TextMacro$group(
							A2($elm$core$List$intersperse, a, parts));
					} else {
						return body;
					}
				}
			case 0:
				var name = body.a;
				var exprs = body.b;
				var meta = body.c;
				return A3(
					$author$project$Parser$Expr$Fun,
					name,
					A2(
						$elm$core$List$map,
						A2($author$project$Compiler$TextMacro$subst, a, _var),
						exprs),
					meta);
			default:
				return body;
		}
	});
var $author$project$Compiler$TextMacro$makeF = F2(
	function (a, _var) {
		return $elm$core$List$map(
			A2($author$project$Compiler$TextMacro$subst, a, _var));
	});
var $author$project$Compiler$TextMacro$listSubst = F3(
	function (as_, vars, exprs) {
		if (!_Utils_eq(
			$elm$core$List$length(as_),
			$elm$core$List$length(vars))) {
			return exprs;
		} else {
			var funcs = A3($elm$core$List$map2, $author$project$Compiler$TextMacro$makeF, as_, vars);
			return A3(
				$elm$core$List$foldl,
				F2(
					function (func, acc) {
						return func(acc);
					}),
				exprs,
				funcs);
		}
	});
var $author$project$Compiler$TextMacro$expandWithMacro = F2(
	function (macro, expr) {
		if (!expr.$) {
			var name = expr.a;
			var fArgs = expr.b;
			return _Utils_eq(name, macro.fA) ? $author$project$Compiler$TextMacro$group(
				A3(
					$author$project$Compiler$TextMacro$listSubst,
					$author$project$Compiler$TextMacro$filterOutBlanks(fArgs),
					macro.bi,
					macro.aS)) : expr;
		} else {
			return expr;
		}
	});
var $author$project$Compiler$TextMacro$expand = F2(
	function (dict, expr) {
		if (!expr.$) {
			var name = expr.a;
			var _v1 = A2($elm$core$Dict$get, name, dict);
			if (_v1.$ === 1) {
				return expr;
			} else {
				var macro = _v1.a;
				return A2($author$project$Compiler$TextMacro$expandWithMacro, macro, expr);
			}
		} else {
			return expr;
		}
	});
var $toastal$either$Either$map = F2(
	function (f, e) {
		if (e.$ === 1) {
			var b = e.a;
			return $toastal$either$Either$Right(
				f(b));
		} else {
			var a = e.a;
			return $toastal$either$Either$Left(a);
		}
	});
var $author$project$Compiler$Acc$expand = F2(
	function (dict, _v0) {
		var block = _v0;
		return _Utils_update(
			block,
			{
				bM: A2(
					$toastal$either$Either$map,
					$elm$core$List$map(
						$author$project$Compiler$TextMacro$expand(dict)),
					block.bM)
			});
	});
var $author$project$Compiler$Acc$getCounterAsString = F2(
	function (name, dict) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				$elm$core$String$fromInt,
				A2($elm$core$Dict$get, name, dict)));
	});
var $author$project$Compiler$Vector$toString = function (v) {
	return A2(
		$elm$core$String$join,
		'.',
		A2(
			$elm$core$List$map,
			$elm$core$String$fromInt,
			A2(
				$elm$core$List$filter,
				function (x) {
					return x > 0;
				},
				v.bM)));
};
var $author$project$Compiler$Acc$vectorPrefix = function (headingIndex) {
	var prefix = $author$project$Compiler$Vector$toString(headingIndex);
	return (prefix === '') ? '' : ($author$project$Compiler$Vector$toString(headingIndex) + '.');
};
var $author$project$Compiler$Acc$transformBlock = F2(
	function (acc, _v0) {
		var block = _v0;
		var _v1 = _Utils_Tuple2(block.fA, block.gn);
		_v1$9:
		while (true) {
			if (!_v1.a.$) {
				switch (_v1.a.a) {
					case 'quiver':
						return _Utils_update(
							block,
							{
								w: A3(
									$elm$core$Dict$insert,
									'figure',
									A2($author$project$Compiler$Acc$getCounterAsString, 'figure', acc.I),
									block.w)
							});
					case 'chart':
						return _Utils_update(
							block,
							{
								w: A3(
									$elm$core$Dict$insert,
									'figure',
									A2($author$project$Compiler$Acc$getCounterAsString, 'figure', acc.I),
									block.w)
							});
					case 'image':
						return _Utils_update(
							block,
							{
								w: A3(
									$elm$core$Dict$insert,
									'figure',
									A2($author$project$Compiler$Acc$getCounterAsString, 'figure', acc.I),
									block.w)
							});
					case 'iframe':
						return _Utils_update(
							block,
							{
								w: A3(
									$elm$core$Dict$insert,
									'figure',
									A2($author$project$Compiler$Acc$getCounterAsString, 'figure', acc.I),
									block.w)
							});
					case 'section':
						if (_v1.b.b) {
							if (!_v1.b.b.b) {
								var _v2 = _v1.b;
								var level = _v2.a;
								return _Utils_update(
									block,
									{
										w: A3(
											$elm$core$Dict$insert,
											'label',
											$author$project$Compiler$Vector$toString(acc.J),
											block.w)
									});
							} else {
								if ((_v1.b.b.a === '-') && (!_v1.b.b.b.b)) {
									var _v3 = _v1.b;
									var level = _v3.a;
									var _v4 = _v3.b;
									return _Utils_update(
										block,
										{
											gn: A2(
												$elm$core$List$cons,
												level,
												A2($elm$core$List$cons, '-', _List_Nil))
										});
								} else {
									break _v1$9;
								}
							}
						} else {
							break _v1$9;
						}
					case 'document':
						return _Utils_update(
							block,
							{
								w: A3(
									$elm$core$Dict$insert,
									'label',
									$author$project$Compiler$Vector$toString(acc.cC),
									block.w)
							});
					case 'equation':
						var prefix = $author$project$Compiler$Vector$toString(acc.J);
						var equationProp = (prefix === '') ? A2($author$project$Compiler$Acc$getCounterAsString, 'equation', acc.I) : ($author$project$Compiler$Vector$toString(acc.J) + ('.' + A2($author$project$Compiler$Acc$getCounterAsString, 'equation', acc.I)));
						return _Utils_update(
							block,
							{
								w: A3($elm$core$Dict$insert, 'equation', equationProp, block.w)
							});
					case 'aligned':
						var prefix = $author$project$Compiler$Vector$toString(acc.J);
						var equationProp = (prefix === '') ? A2($author$project$Compiler$Acc$getCounterAsString, 'equation', acc.I) : ($author$project$Compiler$Vector$toString(acc.J) + ('.' + A2($author$project$Compiler$Acc$getCounterAsString, 'equation', acc.I)));
						return _Utils_update(
							block,
							{
								w: A3($elm$core$Dict$insert, 'equation', equationProp, block.w)
							});
					default:
						break _v1$9;
				}
			} else {
				return A2($author$project$Compiler$Acc$expand, acc.c9, block);
			}
		}
		var name_ = _v1.a.a;
		if (A2(
			$elm$core$List$member,
			name_,
			_List_fromArray(
				['section']))) {
			var prefix = $author$project$Compiler$Vector$toString(acc.J);
			var equationProp = (prefix === '') ? A2($author$project$Compiler$Acc$getCounterAsString, 'equation', acc.I) : ($author$project$Compiler$Vector$toString(acc.J) + ('.' + A2($author$project$Compiler$Acc$getCounterAsString, 'equation', acc.I)));
			return _Utils_update(
				block,
				{
					w: A3($elm$core$Dict$insert, 'label', equationProp, block.w)
				});
		} else {
			return A2(
				$author$project$Compiler$Acc$expand,
				acc.c9,
				A2($elm$core$List$member, name_, $author$project$Parser$Settings$numberedBlockNames) ? _Utils_update(
					block,
					{
						w: A3(
							$elm$core$Dict$insert,
							'label',
							_Utils_ap(
								$author$project$Compiler$Acc$vectorPrefix(acc.J),
								$elm$core$String$fromInt(acc.aR)),
							block.w)
					}) : block);
		}
	});
var $author$project$Compiler$Vector$get = F2(
	function (k, v) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm_community$list_extra$List$Extra$getAt, k, v.bM));
	});
var $author$project$Compiler$Vector$resetFrom = F2(
	function (k, v) {
		var suffix = A2($elm$core$List$repeat, v.h5 - k, 0);
		var prefix = A2($elm$core$List$take, k, v.bM);
		return {
			bM: _Utils_ap(prefix, suffix),
			h5: v.h5
		};
	});
var $author$project$Compiler$Vector$set = F3(
	function (k, a, v) {
		return _Utils_update(
			v,
			{
				bM: A3($elm_community$list_extra$List$Extra$setAt, k, a, v.bM)
			});
	});
var $author$project$Compiler$Vector$increment = F2(
	function (k, v) {
		return ((k < 0) || (_Utils_cmp(k, v.h5) > -1)) ? v : A2(
			$author$project$Compiler$Vector$resetFrom,
			k + 1,
			A3(
				$author$project$Compiler$Vector$set,
				k,
				A2($author$project$Compiler$Vector$get, k, v) + 1,
				v));
	});
var $author$project$Compiler$Acc$listData = F2(
	function (accumulator, name) {
		var _v0 = _Utils_Tuple2(accumulator.aH, name);
		_v0$2:
		while (true) {
			if (!_v0.a) {
				if (!_v0.b.$) {
					switch (_v0.b.a) {
						case 'numbered':
							return _Utils_Tuple2(
								true,
								$elm$core$Maybe$Just(
									A2(
										$author$project$Compiler$Vector$increment,
										0,
										$author$project$Compiler$Vector$init(4))));
						case 'item':
							return _Utils_Tuple2(
								true,
								$elm$core$Maybe$Just(
									A2(
										$author$project$Compiler$Vector$increment,
										0,
										$author$project$Compiler$Vector$init(4))));
						default:
							return _Utils_Tuple2(false, $elm$core$Maybe$Nothing);
					}
				} else {
					break _v0$2;
				}
			} else {
				if (_v0.b.$ === 1) {
					break _v0$2;
				} else {
					switch (_v0.b.a) {
						case 'numbered':
							return _Utils_Tuple2(true, $elm$core$Maybe$Nothing);
						case 'item':
							return _Utils_Tuple2(false, $elm$core$Maybe$Nothing);
						default:
							return _Utils_Tuple2(false, $elm$core$Maybe$Nothing);
					}
				}
			}
		}
		var _v1 = _v0.b;
		return _Utils_Tuple2(false, $elm$core$Maybe$Nothing);
	});
var $author$project$Compiler$Acc$updateBibItemBlock = F3(
	function (accumulator, args, id) {
		var _v0 = $elm$core$List$head(args);
		if (_v0.$ === 1) {
			return accumulator;
		} else {
			var label = _v0.a;
			return _Utils_update(
				accumulator,
				{
					cb: A3(
						$elm$core$Dict$insert,
						label,
						{g7: id, fD: '_irrelevant_'},
						accumulator.cb)
				});
		}
	});
var $author$project$Compiler$Acc$updateReference = F4(
	function (tag_, id_, numRef_, acc) {
		return (tag_ !== '') ? _Utils_update(
			acc,
			{
				cb: A3(
					$elm$core$Dict$insert,
					tag_,
					{g7: id_, fD: numRef_},
					acc.cb)
			}) : acc;
	});
var $author$project$Compiler$Acc$indentationQuantum = 2;
var $author$project$Compiler$Acc$updateWithOrdinaryBlock = F6(
	function (name, content, tag, id, indent, accumulator) {
		var _v0 = A2($author$project$Compiler$Acc$listData, accumulator, name);
		var inList = _v0.a;
		var initialNumberedVector = _v0.b;
		if (!name.$) {
			switch (name.a) {
				case 'setcounter':
					if (!content.$) {
						return accumulator;
					} else {
						var exprs = content.a;
						var ctr = function () {
							if ((exprs.b && (exprs.a.$ === 1)) && (!exprs.b.b)) {
								var _v4 = exprs.a;
								var val = _v4.a;
								return A2(
									$elm$core$Maybe$withDefault,
									1,
									$elm$core$String$toInt(val));
							} else {
								return 1;
							}
						}();
						var headingIndex = A3(
							$author$project$Compiler$Vector$set,
							0,
							ctr - 1,
							$author$project$Compiler$Vector$init(accumulator.J.h5));
						return _Utils_update(
							accumulator,
							{J: headingIndex});
					}
				case 'numbered':
					var level = (indent / $author$project$Compiler$Acc$indentationQuantum) | 0;
					var itemVector = function () {
						if (!initialNumberedVector.$) {
							var v = initialNumberedVector.a;
							return v;
						} else {
							return A2($author$project$Compiler$Vector$increment, level, accumulator.a9);
						}
					}();
					var index = A2($author$project$Compiler$Vector$get, level, itemVector);
					var numberedItemDict = A3(
						$elm$core$Dict$insert,
						id,
						{dy: index, en: level},
						accumulator.bd);
					return A4(
						$author$project$Compiler$Acc$updateReference,
						tag,
						id,
						$elm$core$String$fromInt(
							A2($author$project$Compiler$Vector$get, level, itemVector)),
						_Utils_update(
							accumulator,
							{aH: inList, a9: itemVector, bd: numberedItemDict}));
				case 'item':
					var level = (indent / $author$project$Compiler$Acc$indentationQuantum) | 0;
					var itemVector = function () {
						if (!initialNumberedVector.$) {
							var v = initialNumberedVector.a;
							return v;
						} else {
							return A2($author$project$Compiler$Vector$increment, level, accumulator.a9);
						}
					}();
					var numberedItemDict = A3(
						$elm$core$Dict$insert,
						id,
						{
							dy: A2($author$project$Compiler$Vector$get, level, itemVector),
							en: level
						},
						accumulator.bd);
					return A4(
						$author$project$Compiler$Acc$updateReference,
						tag,
						id,
						$elm$core$String$fromInt(
							A2($author$project$Compiler$Vector$get, level, itemVector)),
						_Utils_update(
							accumulator,
							{aH: inList, a9: itemVector, bd: numberedItemDict}));
				default:
					var name_ = name.a;
					if (A2(
						$elm$core$List$member,
						name_,
						_List_fromArray(
							['title', 'contents', 'banner', 'a']))) {
						return accumulator;
					} else {
						if (A2($elm$core$List$member, name_, $author$project$Parser$Settings$numberedBlockNames)) {
							var prefix = $author$project$Compiler$Vector$toString(accumulator.J);
							var level = (indent / $author$project$Compiler$Acc$indentationQuantum) | 0;
							var itemVector = A2($author$project$Compiler$Vector$increment, level, accumulator.a9);
							var numberedItemDict = A3(
								$elm$core$Dict$insert,
								id,
								{
									dy: A2($author$project$Compiler$Vector$get, level, itemVector),
									en: level
								},
								accumulator.bd);
							var equationProp = (prefix === '') ? A2($author$project$Compiler$Acc$getCounterAsString, 'equation', accumulator.I) : ($author$project$Compiler$Vector$toString(accumulator.J) + ('.' + $elm$core$String$fromInt(accumulator.aR + 1)));
							return A4(
								$author$project$Compiler$Acc$updateReference,
								tag,
								id,
								equationProp,
								_Utils_update(
									accumulator,
									{aR: accumulator.aR + 1, a9: itemVector, bd: numberedItemDict}));
						} else {
							return accumulator;
						}
					}
			}
		} else {
			return accumulator;
		}
	});
var $author$project$Compiler$ASTTools$getText = function (text) {
	switch (text.$) {
		case 1:
			var str = text.a;
			return $elm$core$Maybe$Just(str);
		case 2:
			var str = text.b;
			return $elm$core$Maybe$Just(
				A3($elm$core$String$replace, '`', '', str));
		default:
			var expressions = text.b;
			return $elm$core$Maybe$Just(
				A2(
					$elm$core$String$join,
					' ',
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Compiler$ASTTools$getText, expressions))));
	}
};
var $author$project$Compiler$Acc$updateWithOrdinaryDocumentBlock = F5(
	function (accumulator, name, content, level, id) {
		var title = function () {
			if (!content.$) {
				var str = content.a;
				return str;
			} else {
				var expr = content.a;
				return A2(
					$elm$core$String$join,
					' ',
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Compiler$ASTTools$getText, expr)));
			}
		}();
		var sectionTag = A3(
			$elm$core$String$replace,
			' ',
			'-',
			$elm$core$String$toLower(title));
		var documentIndex = A2(
			$author$project$Compiler$Vector$increment,
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(level)),
			accumulator.cC);
		var _v0 = A2($author$project$Compiler$Acc$listData, accumulator, name);
		var inList = _v0.a;
		return A4(
			$author$project$Compiler$Acc$updateReference,
			sectionTag,
			id,
			$author$project$Compiler$Vector$toString(documentIndex),
			_Utils_update(
				accumulator,
				{cC: documentIndex, aH: inList}));
	});
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {dy: index, cR: match, cU: number, ig: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{e3: false, fz: false},
		string);
};
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $author$project$Utility$userReplace = F3(
	function (userRegex, replacer, string) {
		var _v0 = $elm$regex$Regex$fromString(userRegex);
		if (_v0.$ === 1) {
			return string;
		} else {
			var regex = _v0.a;
			return A3($elm$regex$Regex$replace, regex, replacer, string);
		}
	});
var $author$project$Utility$compressWhitespace = function (string) {
	return A3(
		$author$project$Utility$userReplace,
		'\\s\\s+',
		function (_v0) {
			return ' ';
		},
		string);
};
var $author$project$Utility$removeNonAlphaNum = function (string) {
	return A3(
		$author$project$Utility$userReplace,
		'[^A-Za-z0-9\\-]',
		function (_v0) {
			return '';
		},
		string);
};
var $author$project$Compiler$Acc$updateWithOrdinarySectionBlock = F5(
	function (accumulator, name, content, level, id) {
		var titleWords = function () {
			if (!content.$) {
				var str = content.a;
				return _List_fromArray(
					[
						$author$project$Utility$compressWhitespace(str)
					]);
			} else {
				var expr = content.a;
				return A2(
					$elm$core$List$map,
					$author$project$Utility$compressWhitespace,
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Compiler$ASTTools$getText, expr)));
			}
		}();
		var sectionTag = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$toLower,
					A2(
						$elm$core$Basics$composeR,
						$author$project$Utility$compressWhitespace,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Utility$removeNonAlphaNum,
							A2($elm$core$String$replace, ' ', '-')))),
				titleWords));
		var headingIndex = A2(
			$author$project$Compiler$Vector$increment,
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(level)),
			accumulator.J);
		var blockCounter = 0;
		var _v0 = A2($author$project$Compiler$Acc$listData, accumulator, name);
		var inList = _v0.a;
		return A4(
			$author$project$Compiler$Acc$updateReference,
			sectionTag,
			id,
			$author$project$Compiler$Vector$toString(headingIndex),
			_Utils_update(
				accumulator,
				{
					aR: blockCounter,
					I: A3($elm$core$Dict$insert, 'equation', 0, accumulator.I),
					J: headingIndex,
					aH: inList
				}));
	});
var $author$project$Compiler$Acc$addFootnote = F2(
	function (footnoteData, dict) {
		return A3($elm$core$Dict$insert, footnoteData.co, footnoteData.br, dict);
	});
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === -2) {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $author$project$Compiler$Acc$addFootnoteLabel = F2(
	function (footnoteData, dict) {
		return A3(
			$elm$core$Dict$insert,
			footnoteData.br.g7,
			$elm$core$Dict$size(dict) + 1,
			dict);
	});
var $author$project$Compiler$Acc$addFootnotes = F2(
	function (termDataList, _v0) {
		var dict1 = _v0.a;
		var dict2 = _v0.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (data, _v1) {
					var d1 = _v1.a;
					var d2 = _v1.b;
					return _Utils_Tuple2(
						A2($author$project$Compiler$Acc$addFootnote, data, d1),
						A2($author$project$Compiler$Acc$addFootnoteLabel, data, d2));
				}),
			_Utils_Tuple2(dict1, dict2),
			termDataList);
	});
var $author$project$Compiler$Acc$extractFootnote = F2(
	function (id_, expr) {
		if (((((!expr.$) && (expr.a === 'footnote')) && expr.b.b) && (expr.b.a.$ === 1)) && (!expr.b.b.b)) {
			var _v1 = expr.b;
			var _v2 = _v1.a;
			var content = _v2.a;
			var begin = _v2.b.bl;
			var end = _v2.b.bp;
			var index = _v2.b.dy;
			var id = _v2.b.g7;
			return $elm$core$Maybe$Just(
				{
					br: {bl: begin, bp: end, g7: id},
					co: content
				});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Compiler$ASTTools$matchExprOnName_ = F2(
	function (name, expr) {
		switch (expr.$) {
			case 0:
				var name2 = expr.a;
				return A2($elm$core$String$startsWith, name, name2);
			case 2:
				var name2 = expr.a;
				return A2($elm$core$String$startsWith, name, name2);
			default:
				return false;
		}
	});
var $author$project$Compiler$ASTTools$filterExpressionsOnName_ = F2(
	function (name, exprs) {
		return A2(
			$elm$core$List$filter,
			$author$project$Compiler$ASTTools$matchExprOnName_(name),
			exprs);
	});
var $author$project$Compiler$Acc$getFootnotes = F2(
	function (id, content_) {
		if (content_.$ === 1) {
			var expressionList = content_.a;
			return $elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					$author$project$Compiler$Acc$extractFootnote(id),
					A2($author$project$Compiler$ASTTools$filterExpressionsOnName_, 'footnote', expressionList)));
		} else {
			return _List_Nil;
		}
	});
var $author$project$Compiler$Acc$addFootnotesFromContent = F3(
	function (id, content, _v0) {
		var dict1 = _v0.a;
		var dict2 = _v0.b;
		return A2(
			$author$project$Compiler$Acc$addFootnotes,
			A2($author$project$Compiler$Acc$getFootnotes, id, content),
			_Utils_Tuple2(dict1, dict2));
	});
var $author$project$Compiler$Acc$addTerm = F2(
	function (termData, dict) {
		return A3($elm$core$Dict$insert, termData.co, termData.br, dict);
	});
var $author$project$Compiler$Acc$addTerms = F2(
	function (termDataList, dict) {
		return A3($elm$core$List$foldl, $author$project$Compiler$Acc$addTerm, dict, termDataList);
	});
var $author$project$Compiler$Acc$extract = F2(
	function (id, expr) {
		_v0$2:
		while (true) {
			if ((((!expr.$) && expr.b.b) && (expr.b.a.$ === 1)) && (!expr.b.b.b)) {
				switch (expr.a) {
					case 'term':
						var _v1 = expr.b;
						var _v2 = _v1.a;
						var name = _v2.a;
						var begin = _v2.b.bl;
						var end = _v2.b.bp;
						return $elm$core$Maybe$Just(
							{
								br: {bl: begin, bp: end, g7: id},
								co: name
							});
					case 'term_':
						var _v3 = expr.b;
						var _v4 = _v3.a;
						var name = _v4.a;
						var begin = _v4.b.bl;
						var end = _v4.b.bp;
						return $elm$core$Maybe$Just(
							{
								br: {bl: begin, bp: end, g7: id},
								co: name
							});
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $author$project$Compiler$Acc$getTerms = F2(
	function (id, content_) {
		if (content_.$ === 1) {
			var expressionList = content_.a;
			return $elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					$author$project$Compiler$Acc$extract(id),
					A2($author$project$Compiler$ASTTools$filterExpressionsOnName_, 'term', expressionList)));
		} else {
			return _List_Nil;
		}
	});
var $author$project$Compiler$Acc$addTermsFromContent = F3(
	function (id, content, dict) {
		return A2(
			$author$project$Compiler$Acc$addTerms,
			A2($author$project$Compiler$Acc$getTerms, id, content),
			dict);
	});
var $author$project$Compiler$Acc$updateWithParagraph = F5(
	function (name, content, tag, id, accumulator) {
		var _v0 = A2($author$project$Compiler$Acc$listData, accumulator, name);
		var inList = _v0.a;
		var _v1 = A3(
			$author$project$Compiler$Acc$addFootnotesFromContent,
			id,
			content,
			_Utils_Tuple2(accumulator.dv, accumulator.du));
		var footnotes = _v1.a;
		var footnoteNumbers = _v1.b;
		return A4(
			$author$project$Compiler$Acc$updateReference,
			tag,
			id,
			tag,
			_Utils_update(
				accumulator,
				{
					du: footnoteNumbers,
					dv: footnotes,
					aH: inList,
					dM: A3($author$project$Compiler$Acc$addTermsFromContent, id, content, accumulator.dM)
				}));
	});
var $author$project$Compiler$Acc$getCounter = F2(
	function (name, dict) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Dict$get, name, dict));
	});
var $author$project$Compiler$Acc$incrementCounter = F2(
	function (name, dict) {
		return A3(
			$elm$core$Dict$insert,
			name,
			A2($author$project$Compiler$Acc$getCounter, name, dict) + 1,
			dict);
	});
var $author$project$Render$Utility$pairFromList = function (strings) {
	if ((strings.b && strings.b.b) && (!strings.b.b.b)) {
		var x = strings.a;
		var _v1 = strings.b;
		var y = _v1.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(x, y));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$Utility$keyValueDict = function (strings_) {
	return $elm$core$Dict$fromList(
		$elm_community$maybe_extra$Maybe$Extra$values(
			A2(
				$elm$core$List$map,
				$author$project$Render$Utility$pairFromList,
				A2(
					$elm$core$List$map,
					$elm$core$List$map($elm$core$String$trim),
					A2(
						$elm$core$List$map,
						$elm$core$String$split(':'),
						strings_)))));
};
var $author$project$Compiler$Acc$reduceName = function (str) {
	return A2(
		$elm$core$List$member,
		str,
		_List_fromArray(
			['equation', 'aligned'])) ? 'equation' : ((str === 'code') ? 'listing' : (A2(
		$elm$core$List$member,
		str,
		_List_fromArray(
			['quiver', 'image', 'iframe', 'chart', 'datatable', 'svg', 'tikz', 'iframe'])) ? 'figure' : str));
};
var $author$project$Compiler$Acc$verbatimBlockReference = F4(
	function (isSimple, headingIndex, name, newCounter) {
		var a = $author$project$Compiler$Vector$toString(headingIndex);
		return ((a === '') || isSimple) ? $elm$core$String$fromInt(
			A2(
				$author$project$Compiler$Acc$getCounter,
				$author$project$Compiler$Acc$reduceName(name),
				newCounter)) : (a + ('.' + $elm$core$String$fromInt(
			A2(
				$author$project$Compiler$Acc$getCounter,
				$author$project$Compiler$Acc$reduceName(name),
				newCounter))));
	});
var $author$project$Compiler$Acc$updateWithVerbatimBlock = F5(
	function (name_, args, tag_, id, accumulator) {
		var name = A2($elm$core$Maybe$withDefault, '---', name_);
		var newCounter = A2($elm$core$List$member, name, accumulator.ew) ? A2(
			$author$project$Compiler$Acc$incrementCounter,
			$author$project$Compiler$Acc$reduceName(name),
			accumulator.I) : accumulator.I;
		var isSimple = A2(
			$elm$core$List$member,
			name,
			_List_fromArray(
				['quiver', 'image']));
		var dict = $author$project$Render$Utility$keyValueDict(args);
		var tag = A2(
			$elm$core$Maybe$withDefault,
			tag_,
			A2($elm$core$Dict$get, 'label', dict));
		var _v0 = A2($author$project$Compiler$Acc$listData, accumulator, name_);
		var inList = _v0.a;
		var _v1 = _Utils_Tuple3(name_, tag, id);
		var _v2 = isSimple ? id : ' ';
		return A4(
			$author$project$Compiler$Acc$updateReference,
			tag,
			id,
			A4($author$project$Compiler$Acc$verbatimBlockReference, isSimple, accumulator.J, name, newCounter),
			_Utils_update(
				accumulator,
				{I: newCounter, aH: inList}));
	});
var $author$project$Compiler$Acc$updateAccumulator = F2(
	function (_v0, accumulator) {
		var name = _v0.fA;
		var indent = _v0.hb;
		var args = _v0.gn;
		var blockType = _v0.dW;
		var content = _v0.bM;
		var tag = _v0.ii;
		var id = _v0.g7;
		var _v1 = _Utils_Tuple2(name, blockType);
		_v1$0:
		while (true) {
			_v1$1:
			while (true) {
				_v1$10:
				while (true) {
					_v1$12:
					while (true) {
						if (!_v1.a.$) {
							switch (_v1.b.$) {
								case 1:
									switch (_v1.a.a) {
										case 'q':
											break _v1$0;
										case 'a':
											break _v1$1;
										case 'set-key':
											if (args.b && args.b.b) {
												var key = args.a;
												var _v6 = args.b;
												var value = _v6.a;
												var rest = _v6.b;
												return _Utils_update(
													accumulator,
													{
														dA: A3($elm$core$Dict$insert, key, value, accumulator.dA)
													});
											} else {
												return accumulator;
											}
										case 'section':
											var level = A2(
												$elm$core$Maybe$withDefault,
												'1',
												$elm$core$List$head(args));
											return A5($author$project$Compiler$Acc$updateWithOrdinarySectionBlock, accumulator, name, content, level, id);
										case 'document':
											var level = A2(
												$elm$core$Maybe$withDefault,
												'1',
												$elm$core$List$head(args));
											return A5($author$project$Compiler$Acc$updateWithOrdinaryDocumentBlock, accumulator, name, content, level, id);
										case 'setcounter':
											var n = A2(
												$elm$core$Maybe$withDefault,
												1,
												A2(
													$elm$core$Maybe$andThen,
													$elm$core$String$toInt,
													$elm$core$List$head(args)));
											return _Utils_update(
												accumulator,
												{
													J: {
														bM: _List_fromArray(
															[n, 0, 0, 0]),
														h5: 4
													}
												});
										case 'bibitem':
											return A3($author$project$Compiler$Acc$updateBibItemBlock, accumulator, args, id);
										default:
											var name_ = _v1.a.a;
											return A6(
												$author$project$Compiler$Acc$updateWithOrdinaryBlock,
												$elm$core$Maybe$Just(name_),
												content,
												tag,
												id,
												indent,
												accumulator);
									}
								case 2:
									switch (_v1.a.a) {
										case 'q':
											break _v1$0;
										case 'a':
											break _v1$1;
										case 'mathmacros':
											if (!_v1.b.a.b) {
												if (content.$ === 1) {
													return accumulator;
												} else {
													var str = content.a;
													return A2($author$project$Compiler$Acc$updateWithMathMacros, str, accumulator);
												}
											} else {
												break _v1$10;
											}
										case 'textmacros':
											if (!_v1.b.a.b) {
												if (content.$ === 1) {
													return accumulator;
												} else {
													var str = content.a;
													return A2($author$project$Compiler$Acc$updateWithTextMacros, str, accumulator);
												}
											} else {
												break _v1$10;
											}
										default:
											break _v1$10;
									}
								default:
									switch (_v1.a.a) {
										case 'q':
											break _v1$0;
										case 'a':
											break _v1$1;
										default:
											break _v1$12;
									}
							}
						} else {
							if (!_v1.b.$) {
								var _v9 = _v1.a;
								var _v10 = _v1.b;
								return A5($author$project$Compiler$Acc$updateWithParagraph, $elm$core$Maybe$Nothing, content, tag, id, accumulator);
							} else {
								break _v1$12;
							}
						}
					}
					var _v11 = A2($author$project$Compiler$Acc$listData, accumulator, name);
					var inList = _v11.a;
					return _Utils_update(
						accumulator,
						{aH: inList});
				}
				return A5($author$project$Compiler$Acc$updateWithVerbatimBlock, name, args, tag, id, accumulator);
			}
			var _v2 = $elm_community$list_extra$List$Extra$uncons(accumulator.b9);
			if (!_v2.$) {
				var _v3 = _v2.a;
				var _v4 = _v3.a;
				var q = _v4.a;
				var rest = _v3.b;
				return _Utils_update(
					accumulator,
					{
						eB: $elm$core$Dict$fromList(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(q, id),
								rest)),
						b9: A2(
							$elm$core$List$cons,
							_Utils_Tuple2(q, id),
							rest)
					});
			} else {
				return accumulator;
			}
		}
		return A4(
			$author$project$Compiler$Acc$updateReference,
			tag,
			id,
			tag,
			_Utils_update(
				accumulator,
				{
					aR: accumulator.aR + 1,
					b9: A2(
						$elm$core$List$cons,
						_Utils_Tuple2(id, '??'),
						accumulator.b9)
				}));
	});
var $author$project$Compiler$Acc$transformAccumulateBlock = F2(
	function (acc_, block_) {
		var newAcc = A2($author$project$Compiler$Acc$updateAccumulator, block_, acc_);
		return _Utils_Tuple2(
			newAcc,
			A2($author$project$Compiler$Acc$transformBlock, newAcc, block_));
	});
var $author$project$Compiler$Acc$transformAccumulateTree = F2(
	function (tree, acc) {
		return A3($zwilias$elm_rosetree$Tree$mapAccumulate, $author$project$Compiler$Acc$transformAccumulateBlock, acc, tree);
	});
var $author$project$Compiler$Acc$transformAccumulate = F2(
	function (data, forest) {
		return function (_v1) {
			var acc_ = _v1.a;
			var ast_ = _v1.b;
			return _Utils_Tuple2(
				acc_,
				$elm$core$List$reverse(ast_));
		}(
			A3(
				$elm$core$List$foldl,
				F2(
					function (tree, _v0) {
						var acc_ = _v0.a;
						var ast_ = _v0.b;
						return A2(
							$author$project$Compiler$Acc$mapper,
							ast_,
							A2($author$project$Compiler$Acc$transformAccumulateTree, tree, acc_));
					}),
				_Utils_Tuple2(
					$author$project$Compiler$Acc$init(data),
					_List_Nil),
				forest));
	});
var $author$project$Compiler$DifferentialParser$updateFunctions = function (lang) {
	return {
		dQ: $author$project$Compiler$Acc$transformAccumulate,
		e4: $author$project$Compiler$DifferentialParser$changeLineNumber,
		e6: $author$project$Parser$PrimitiveBlock$eq,
		e7: $author$project$Compiler$DifferentialParser$chunkLevel,
		dZ: $author$project$Compiler$DifferentialParser$toExprBlock(lang),
		d_: $author$project$Compiler$DifferentialParser$chunker(lang),
		fa: $elm$core$Basics$identity,
		d8: $author$project$Compiler$DifferentialParser$forestFromBlocks,
		ea: $author$project$Markup$messagesFromForest,
		eo: function (pb) {
			return pb.eo;
		},
		fG: $author$project$Parser$Block$getLineNumber,
		fQ: $author$project$Parser$Block$setLineNumber
	};
};
var $author$project$Compiler$DifferentialParser$init = F3(
	function (inclusionData, lang, str) {
		var initialData = A2($author$project$Compiler$DifferentialParser$makeInitialData, inclusionData, lang);
		return A3(
			$author$project$Compiler$AbstractDifferentialParser$init,
			$author$project$Compiler$DifferentialParser$updateFunctions(lang),
			initialData,
			str + '\n');
	});
var $author$project$Scripta$API$init = F3(
	function (importedFileDict, language, sourceText) {
		return A3($author$project$Compiler$DifferentialParser$init, importedFileDict, language, sourceText);
	});
var $author$project$Main$NoOp = {$: 0};
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			A2(
				$elm$core$Task$onError,
				A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
					$elm$core$Result$Err),
				A2(
					$elm$core$Task$andThen,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Ok),
					task)));
	});
var $elm$browser$Browser$Dom$getViewportOf = _Browser_getViewportOf;
var $elm$browser$Browser$Dom$setViewportOf = _Browser_setViewportOf;
var $author$project$Main$jumpToTop = function (id) {
	return A2(
		$elm$core$Task$attempt,
		function (_v0) {
			return $author$project$Main$NoOp;
		},
		A2(
			$elm$core$Task$andThen,
			function (info) {
				return A3($elm$browser$Browser$Dom$setViewportOf, id, 0, 0);
			},
			$elm$browser$Browser$Dom$getViewportOf(id)));
};
var $author$project$Text$microLaTeXDemo = '\n\n\n\\title{Demo (MicroLaTeX)}\n\n| banner\n\\link{Scripta.io https://scripta.io}\n\n\\contents\n\n\\italic{You can freely edit what you see here – your edits won\'t be saved.\nThe best way to understand how MicroLaTeX works is to compare\nthe source text (left window) with the rendered text (right window).}\n\n\n\\section{Before you begin}\n\nThere are some differences between regular LaTeX and microLaTeX.  The main one is that microLaTeX is made of blocks.  Blocks have an empty line\nabove and below, as in the example below — first the source text,\nthen the rendered text.\n\n\\begin{code}\n$$\n\\int_\\infty^\\infty e^{-x^2} dx = \\sqrt\\pi\n$$\n\\end{code}\n\n$$\n\\int_\\infty^\\infty e^{-x^2} dx = \\sqrt\\pi\n$$\n\nThe beginning and ending tags of this display math block occupy lines\nof their own and begin at the left margin.\n\n\\italic{Imitate this example: write some math in} `$$ ... $$` HERE:\n\n\n\\section{Images}\n\nPlace an image like this:\n\n\\begin{code}\n\\image{https://www.birds ... .jpg}\n\\end{code}\n\n\\image{https://www.birdsandblooms.com/wp-content/uploads/2018/10/BNBbyc18_patricia-warren.jpg width:400}\n\n\\section{Math}\n\nPythagoras says: $a^2 + b^2 = c^2$.  We wrote the formula\nlike this: `$a^2 + b^2 = c^2$`.\n\nLet\'s do a theorem environment.\n\nSource text\n\n\\begin{code}\n\\begin{equation}\n\\label{integral}\n\\int_0^1 x^n dx = \\frac{1}{n+1}\n\\end{equation}\n\\end{code}\n\nRendered text\n\n\\begin{equation}\n\\label{integral}\n\\int_0^1 x^n dx = \\frac{1}{n+1}\n\\end{equation}\n\n\\section{Lists}\n\nLets look at some lists.\nFirst the source text for a bulletted list:\n\n\\begin{code}\n\\item Bread\n\n\\item Cheese\n\n\\item Wine\n\\end{code}\n\nThen the rendered text:\n\n\\item Bread\n\n\\item Cheese\n\n\\item Wine\n\nNote that the `\\begin{itemize} ... \\end{itemize}` construct\nis not needed.  Here is a numbered list:\n\n\nSource text:\n\n\\begin{code}\n\\numbered Olive Oil\n\n\\numbered Vinegar\n\n\\numbered Salt\n\\end{code}\n\nRendered text:\n\n\\numbered Olive Oil\n\n\\numbered Vinegar\n\n\\numbered Salt\n\nOnce again, no need for `\\begin{enumerate} ... \\end{enumerate}`.\n\n\n\n\n\\section{Notes}\n\n\n\\item Click on a section title to go back to the table of contents.\n\n\n\\item The editor in \\link{Scripta.io https://scripta.io} is much more capable\nthan the one you see here.  If you click on some rendered text (right-hand window),\nthe editor will bring the corresponding source text (left-hand window) into view.  If you select\nsome source text and press `ctrl-S` ("S" for "sync"), the corresponding rendered text\nwill be brought into view.\n\n\\item Cross references work: see formula \\eqref{integral}\n\n\n';
var $elm$time$Time$Posix = $elm$core$Basics$identity;
var $elm$time$Time$millisToPosix = $elm$core$Basics$identity;
var $author$project$Main$init = function (flags) {
	return _Utils_Tuple2(
		{
			cA: 0,
			bQ: $elm$time$Time$millisToPosix(0),
			aE: 2,
			U: A3($author$project$Scripta$API$init, $elm$core$Dict$empty, 1, $author$project$Text$microLaTeXDemo),
			aX: $author$project$Text$microLaTeXDemo,
			fs: 1,
			aY: 'Starting up',
			av: 0,
			a_: 0,
			ax: 0
		},
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Main$jumpToTop('scripta-output'),
					$author$project$Main$jumpToTop('input-text')
				])));
};
var $author$project$Main$Tick = function (a) {
	return {$: 14, a: a};
};
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {b8: processes, cn: taggers};
	});
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 1) {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === -2) {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$time$Time$Name = function (a) {
	return {$: 0, a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 1, a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.b8;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.cn);
		if (_v0.$ === 1) {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $author$project$Main$subscriptions = function (model) {
	return A2($elm$time$Time$every, 500, $author$project$Main$Tick);
};
var $author$project$Main$InfoDocument = 0;
var $author$project$Main$PDF = function (a) {
	return {$: 3, a: a};
};
var $author$project$PDF$PrintProcessing = 1;
var $author$project$PDF$PrintReady = 2;
var $author$project$PDF$TarFileProcessing = 1;
var $author$project$PDF$TarFileReady = 2;
var $author$project$Main$TestDocument = 1;
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $elm$core$Basics$round = _Basics_round;
var $author$project$Render$Settings$makeSettings = F4(
	function (id, selectedSlug, scale, width) {
		return {
			gq: A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
			ek: false,
			fJ: 28,
			h0: id,
			h1: selectedSlug,
			fS: false,
			fT: true,
			fW: '',
			fX: 30,
			eS: $elm$core$Basics$round(scale * width)
		};
	});
var $author$project$Render$Settings$defaultSettings = A4($author$project$Render$Settings$makeSettings, '', $elm$core$Maybe$Nothing, 1, 600);
var $author$project$Scripta$API$defaultSettings = $author$project$Render$Settings$defaultSettings;
var $elm$file$File$Download$string = F3(
	function (name, mime, content) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$never,
			A3(_File_download, name, mime, content));
	});
var $author$project$Main$download = F2(
	function (fileName, fileContents) {
		return A3($elm$file$File$Download$string, fileName, 'application/x-tex', fileContents);
	});
var $author$project$Scripta$API$userReplace = F3(
	function (userRegex, replacer, string) {
		var _v0 = $elm$regex$Regex$fromString(userRegex);
		if (_v0.$ === 1) {
			return string;
		} else {
			var regex = _v0.a;
			return A3($elm$regex$Regex$replace, regex, replacer, string);
		}
	});
var $author$project$Scripta$API$compressWhitespace = function (string) {
	return A3(
		$author$project$Scripta$API$userReplace,
		'\\s\\s+',
		function (_v0) {
			return ' ';
		},
		string);
};
var $author$project$Scripta$API$removeNonAlphaNum = function (string) {
	return A3(
		$author$project$Scripta$API$userReplace,
		'[^A-Za-z0-9\\-]',
		function (_v0) {
			return '';
		},
		string);
};
var $author$project$Compiler$ASTTools$matchBlockName = F2(
	function (key, _v0) {
		var name = _v0.fA;
		return _Utils_eq(
			$elm$core$Maybe$Just(key),
			name);
	});
var $author$project$Compiler$ASTTools$filterBlocksOnName = F2(
	function (name, blocks) {
		return A2(
			$elm$core$List$filter,
			$author$project$Compiler$ASTTools$matchBlockName(name),
			blocks);
	});
var $author$project$Compiler$ASTTools$getBlockByName = F2(
	function (name, ast) {
		return $elm$core$List$head(
			A2(
				$author$project$Compiler$ASTTools$filterBlocksOnName,
				name,
				$elm$core$List$concat(
					A2($elm$core$List$map, $zwilias$elm_rosetree$Tree$flatten, ast))));
	});
var $author$project$Compiler$ASTTools$getValue = F2(
	function (key, ast) {
		var _v0 = A2($author$project$Compiler$ASTTools$getBlockByName, key, ast);
		if (_v0.$ === 1) {
			return '(' + (key + ')');
		} else {
			var content = _v0.a.bM;
			if (!content.$) {
				var str = content.a;
				return str;
			} else {
				var exprList = content.a;
				return A2(
					$elm$core$String$join,
					'',
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Compiler$ASTTools$getText, exprList)));
			}
		}
	});
var $author$project$Compiler$ASTTools$title = function (ast) {
	return A2($author$project$Compiler$ASTTools$getValue, 'title', ast);
};
var $author$project$Scripta$API$fileNameForExport = function (ast) {
	return function (s) {
		return s + '.tex';
	}(
		$author$project$Scripta$API$removeNonAlphaNum(
			A3(
				$elm$core$String$replace,
				' ',
				'-',
				$author$project$Scripta$API$compressWhitespace(
					$author$project$Compiler$ASTTools$title(ast)))));
};
var $author$project$Scripta$API$extractUrl = function (str) {
	return $elm$core$List$head(
		A2($elm$core$String$split, ' ', str));
};
var $author$project$Compiler$ASTTools$matchExprOnName = F2(
	function (name, expr) {
		switch (expr.$) {
			case 0:
				var name2 = expr.a;
				return _Utils_eq(name, name2);
			case 2:
				var name2 = expr.a;
				return _Utils_eq(name, name2);
			default:
				return false;
		}
	});
var $author$project$Compiler$ASTTools$filterExpressionsOnName = F2(
	function (name, exprs) {
		return A2(
			$elm$core$List$filter,
			$author$project$Compiler$ASTTools$matchExprOnName(name),
			exprs);
	});
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $toastal$either$Either$unwrap = F3(
	function (d, f, e) {
		if (!e.$) {
			return d;
		} else {
			var a = e.a;
			return f(a);
		}
	});
var $toastal$either$Either$toListVia = function (f) {
	return A2(
		$toastal$either$Either$unwrap,
		_List_Nil,
		A2($elm$core$Basics$composeR, f, $elm$core$List$singleton));
};
var $toastal$either$Either$toList = $toastal$either$Either$toListVia($elm$core$Basics$identity);
var $author$project$Scripta$API$getImageUrls1 = function (syntaxTree) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2(
			$elm$core$List$map,
			$elm$core$Maybe$andThen($author$project$Scripta$API$extractUrl),
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$author$project$Compiler$ASTTools$getText,
					$elm$core$Maybe$map($elm$core$String$trim)),
				A2(
					$author$project$Compiler$ASTTools$filterExpressionsOnName,
					'image',
					$elm$core$List$concat(
						$elm$core$List$concat(
							A2(
								$elm$core$List$map,
								function (_v0) {
									var content = _v0.bM;
									return $toastal$either$Either$toList(content);
								},
								$elm$core$List$concat(
									A2($elm$core$List$map, $zwilias$elm_rosetree$Tree$flatten, syntaxTree)))))))));
};
var $author$project$Scripta$API$verbatimContent = function (_v0) {
	var content = _v0.bM;
	if (!content.$) {
		var str = content.a;
		return $elm$core$Maybe$Just(str);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Scripta$API$getImageUrls2 = function (syntaxTree) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2(
			$elm$core$List$map,
			$author$project$Scripta$API$verbatimContent,
			A2(
				$author$project$Compiler$ASTTools$filterBlocksOnName,
				'image',
				$elm$core$List$concat(
					A2($elm$core$List$map, $zwilias$elm_rosetree$Tree$flatten, syntaxTree)))));
};
var $author$project$Scripta$API$getImageUrls = function (syntaxTree) {
	return $elm_community$list_extra$List$Extra$unique(
		$elm$core$List$sort(
			_Utils_ap(
				$author$project$Scripta$API$getImageUrls1(syntaxTree),
				$author$project$Scripta$API$getImageUrls2(syntaxTree))));
};
var $author$project$Text$info = '\n\n| title\nAbout the Scripta compiler\n\n| contents\n\n[tags jxxcarlson:about-the-scripta-compiler]\n\n| runninghead\n[link Scripta.io https://scripta.io]\n\n\n| section -\nWhat it is\n\nThe Scripta compiler transforms source text to HTML, where\nthe source text is one of the following markup languages:\n\n| item\nL0 — an experimental language with syntax inspired by Lisp.\nCan render LaTeX-style\nmathematical text.  This document is written in L0.\n\n| item\nMicroLaTeX — a cousin of LaTeX.  Source text can be exported\nto standard LaTeX\n\n| item\nXMarkdown — a cousin of Markdown.  Can render LaTeX-style\nmathematical text.\n\n\nThe Scripta compiler features real-time, fault-tolerant\nparsing and rendering, and so is suitable for an interactive\nediting system in which (a) changes to the source text\nare rendered "instantly," that is, with no perceptible delay,\nand (b) syntax errors are handled gracefully, marked as such\nin the rendered text, and with the following text rendered\nproperly to the greatest extent possible.\n\n\n| section -\nOpen source\n\nThe Scripta compiler is open-source, and can be found at\n[link github.com/jxxcarlson/scripta-compiler  https://github.com/jxxcarlson/scripta-compiler].  In the Example\nfolder, you will find a small demo app.  It is hosted online\nat [link Github https://jxxcarlson.github.io/app/scripta-compiler-demo/assets/index.html].\n\nThe Scripta compiler is used to power\n[link Scripta.io https://scripta.io].  It features\ninteractive editing, a searchable store of documents,\nand facilities for collaboration and web publishing.\n\n\n| section -\nCode\n\nIf you are interested in looking at the code, there are two\ngood places to start. The first is `compiler/Scripta/API.elm`.\nThe second is the folder `compiler/L0/Expression/` especially\nthe file `compiler/L0/Expression/Expression`.  The latter\nis the shift-reduce parser used for L0, the simplest\nof the three markup languages considered.\n\nA notable feature of the Scripta compiler is that\nall three markup languages use a common expression\ntype and parse to a common type (a list of syntax trees)\n\n|| code\ntype Expr\n    = Fun String (List Expr) Meta\n    | Text String Meta\n    | Verbatim String String Meta\n\nThe three variants of this type align with the three\nsyntactic elements of `L0`:\n\n| item\nFunction elements, e.g. `[italic This is italic text]`,\nwhich are bounded on left and right by brackets.\n\n| item\nStretches of pure text,\n\n| item\nVerbatim elements, which are bounded by\ndollar signs or by backtics, for inline\nmathematical text and inline code,\nrespectively.\n\n\n| section -\nStatus and Roadmap\n\nThe Scripta compiler is serviceable — I\'ve used to to write\n[link these class notes https://scripta.io/s/jxxcarlson:wave-packets-dispersion], for example.\nThat said, there is still a great deal to be done. Please send bug reports,\nfeature requests, and comments in general to me at jxxcarlson (gmail).\nI am on the Elm Slack and Github as jxxcarlson and on Twitter as @epsilon2718.\n\n';
var $author$project$Text$l0Demo = '\n| title\nDemo (L0)\n\n| banner\n[link Scripta.io https://scripta.io]\n\n| contents\n\n| section\nImages\n\n|| hide\n[image https://nas-national-prod.s3.amazonaws.com/styles/hero_image/s3/web_h_apa_2016-a1_2474_8_cedar-waxwing_peter_brannon_kk_female.jpg?itok=VdeVVmGA]\n\n[image https://www.birdsandblooms.com/wp-content/uploads/2018/10/BNBbyc18_patricia-warren.jpg width:400]\n\n\n| section\nMath\n\nPythagoras says: $a^2 + b^2 = c^2$\n\nFrom calculus:\n\n$$\n\\int_0^1 x^n dx = \\frac{1}{n+1}\n$$\n\n[bold Tip:] Click on a section title to go back to the table of contents.\n\n';
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Compiler$ASTTools$getBlockArgsByName = F2(
	function (key, ast) {
		var _v0 = A2($author$project$Compiler$ASTTools$getBlockByName, key, ast);
		if (_v0.$ === 1) {
			return _List_Nil;
		} else {
			var args = _v0.a.gn;
			return args;
		}
	});
var $author$project$Render$Export$LaTeX$counterValue = function (ast) {
	return A2(
		$elm$core$Maybe$andThen,
		$elm$core$String$toInt,
		$elm$core$List$head(
			A2($author$project$Compiler$ASTTools$getBlockArgsByName, 'setcounter', ast)));
};
var $author$project$Parser$Block$getContent = function (_v0) {
	var content = _v0.bM;
	if (!content.$) {
		return _List_Nil;
	} else {
		var exprs = content.a;
		return exprs;
	}
};
var $author$project$Parser$Expr$getName = function (expr) {
	switch (expr.$) {
		case 0:
			var name = expr.a;
			return $elm$core$Maybe$Just(name);
		case 1:
			return $elm$core$Maybe$Nothing;
		default:
			var name = expr.a;
			return $elm$core$Maybe$Just(name);
	}
};
var $author$project$Compiler$ASTTools$expressionNames = function (forest) {
	return $elm$core$List$sort(
		$elm_community$list_extra$List$Extra$unique(
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					$author$project$Parser$Expr$getName,
					$elm$core$List$concat(
						A2(
							$elm$core$List$map,
							$author$project$Parser$Block$getContent,
							$elm$core$List$concat(
								A2($elm$core$List$map, $zwilias$elm_rosetree$Tree$flatten, forest))))))));
};
var $author$project$Compiler$ASTTools$handleEmptyDocInfo = function (strings) {
	return _Utils_eq(
		strings,
		_List_fromArray(
			['(docinfo)'])) ? _List_fromArray(
		['date:']) : strings;
};
var $author$project$Compiler$ASTTools$loop = F2(
	function (s, nextState_) {
		loop:
		while (true) {
			var _v0 = nextState_(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$nextState_ = nextState_;
				s = $temp$s;
				nextState_ = $temp$nextState_;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Compiler$ASTTools$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Compiler$ASTTools$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$Compiler$ASTTools$nextStepFix = function (state) {
	var _v0 = $elm$core$List$head(state.aX);
	if (_v0.$ === 1) {
		return $author$project$Compiler$ASTTools$Done(state.bx);
	} else {
		var line = _v0.a;
		return (line === '') ? $author$project$Compiler$ASTTools$Loop(
			_Utils_update(
				state,
				{
					aX: A2($elm$core$List$drop, 1, state.aX)
				})) : ((A2($elm$core$String$left, 7, line) === 'author:') ? $author$project$Compiler$ASTTools$Loop(
			_Utils_update(
				state,
				{
					cA: state.cA + 1,
					aX: A2($elm$core$List$drop, 1, state.aX),
					bx: A2(
						$elm$core$List$cons,
						A3(
							$elm$core$String$replace,
							'author:',
							'author' + ($elm$core$String$fromInt(state.cA) + ':'),
							line),
						state.bx)
				})) : $author$project$Compiler$ASTTools$Loop(
			_Utils_update(
				state,
				{
					aX: A2($elm$core$List$drop, 1, state.aX),
					bx: A2($elm$core$List$cons, line, state.bx)
				})));
	}
};
var $author$project$Compiler$ASTTools$fixFrontMatterList = function (strings) {
	return $author$project$Compiler$ASTTools$handleEmptyDocInfo(
		$elm$core$List$reverse(
			A2(
				$author$project$Compiler$ASTTools$loop,
				{cA: 1, aX: strings, bx: _List_Nil},
				$author$project$Compiler$ASTTools$nextStepFix)));
};
var $author$project$Compiler$ASTTools$getVerbatimBlockValue = F2(
	function (key, ast) {
		var _v0 = A2($author$project$Compiler$ASTTools$getBlockByName, key, ast);
		if (_v0.$ === 1) {
			return '(' + (key + ')');
		} else {
			var content = _v0.a.bM;
			if (!content.$) {
				var str = content.a;
				return str;
			} else {
				return '(' + (key + ')');
			}
		}
	});
var $author$project$Compiler$ASTTools$pairFromList = function (strings) {
	if ((strings.b && strings.b.b) && (!strings.b.b.b)) {
		var x = strings.a;
		var _v1 = strings.b;
		var y = _v1.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(x, y));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Compiler$ASTTools$keyValueDict = function (strings_) {
	return $elm$core$Dict$fromList(
		$elm_community$maybe_extra$Maybe$Extra$values(
			A2(
				$elm$core$List$map,
				$author$project$Compiler$ASTTools$pairFromList,
				A2(
					$elm$core$List$map,
					$elm$core$List$map($elm$core$String$trim),
					A2(
						$elm$core$List$map,
						$elm$core$String$split(':'),
						strings_)))));
};
var $author$project$Compiler$ASTTools$frontMatterDict = function (ast) {
	return $author$project$Compiler$ASTTools$keyValueDict(
		$author$project$Compiler$ASTTools$fixFrontMatterList(
			A2(
				$elm$core$String$split,
				'\n',
				A2($author$project$Compiler$ASTTools$getVerbatimBlockValue, 'docinfo', ast))));
};
var $author$project$Render$Export$LaTeX$frontMatter = F2(
	function (currentTime, ast) {
		var title = function (title_) {
			return '\\title{' + (title_ + '}');
		}(
			$author$project$Compiler$ASTTools$title(ast));
		var dict = $author$project$Compiler$ASTTools$frontMatterDict(ast);
		var date = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (date_) {
					return '\\date{' + (date_ + '}');
				},
				A2($elm$core$Dict$get, 'date', dict)));
		var author4 = A2($elm$core$Dict$get, 'author4', dict);
		var author3 = A2($elm$core$Dict$get, 'author3', dict);
		var author2 = A2($elm$core$Dict$get, 'author2', dict);
		var author1 = A2($elm$core$Dict$get, 'author1', dict);
		var authors = function (s) {
			return '\\author{\n' + (s + '\n}');
		}(
			A2(
				$elm$core$String$join,
				'\n\\and\n',
				$elm_community$maybe_extra$Maybe$Extra$values(
					_List_fromArray(
						[author1, author2, author3, author4]))));
		return A2(
			$elm$core$String$join,
			'\n\n',
			A2(
				$elm$core$List$cons,
				'\\begin{document}',
				A2(
					$elm$core$List$cons,
					title,
					A2(
						$elm$core$List$cons,
						date,
						A2(
							$elm$core$List$cons,
							authors,
							A2($elm$core$List$cons, '\\maketitle\n\n', _List_Nil)))))) + '\\maketitle\n\n';
	});
var $author$project$Compiler$TextMacro$functionNames_ = function (expr) {
	switch (expr.$) {
		case 0:
			var name = expr.a;
			var body = expr.b;
			return A2(
				$elm$core$List$cons,
				name,
				$elm$core$List$concat(
					A2($elm$core$List$map, $author$project$Compiler$TextMacro$functionNames_, body)));
		case 1:
			return _List_Nil;
		default:
			return _List_Nil;
	}
};
var $author$project$Compiler$TextMacro$functionNames = function (exprs) {
	return $elm$core$List$concat(
		A2($elm$core$List$map, $author$project$Compiler$TextMacro$functionNames_, exprs));
};
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $author$project$Compiler$TextMacro$getTextMacroFunctionNames = function (str) {
	return $elm$core$List$sort(
		$elm_community$list_extra$List$Extra$unique(
			$elm$core$List$concat(
				A2(
					$elm$core$List$map,
					$author$project$Compiler$TextMacro$functionNames,
					A2(
						$elm$core$List$map,
						function ($) {
							return $.aS;
						},
						A2(
							$elm$core$List$map,
							$elm$core$Tuple$second,
							$elm$core$Dict$toList(
								$author$project$Compiler$TextMacro$buildDictionary(
									$elm$core$String$lines(str)))))))));
};
var $author$project$Render$Export$Preamble$commands = '\n%% Commands\n\n\\newcommand{\\code}[1]{{\\tt #1}}\n\\newcommand{\\ellie}[1]{\\href{#1}{Link to Ellie}}\n% \\newcommand{\\image}[3]{\\includegraphics[width=3cm]{#1}}\n\n%% width=4truein,keepaspectratio]\n\n\n\\newcommand{\\imagecentercaptioned}[3]{\n   \\medskip\n   \\begin{figure}[htp]\n   \\centering\n    \\includegraphics[width=#2]{#1}\n    \\vglue0pt\n    \\caption{#3}\n    \\end{figure}\n    \\medskip\n}\n\n\\newcommand{\\imagecenter}[2]{\n   \\medskip\n   \\begin{figure}[htp]\n   \\centering\n    \\includegraphics[width=#2]{#1}\n    \\vglue0pt\n    \\end{figure}\n    \\medskip\n}\n\n\\newcommand{\\imagefloat}[4]{\n    \\begin{wrapfigure}{#4}{#2}\n    \\includegraphics[width=#2]{#1}\n    \\caption{#3}\n    \\end{wrapfigure}\n}\n\n\n\\newcommand{\\imagefloatright}[3]{\n    \\begin{wrapfigure}{R}{0.30\\textwidth}\n    \\includegraphics[width=0.30\\textwidth]{#1}\n    \\caption{#2}\n    \\end{wrapfigure}\n}\n\n\\newcommand{\\hide}[1]{}\n\n\n\\newcommand{\\imagefloatleft}[3]{\n    \\begin{wrapfigure}{L}{0.3-\\textwidth}\n    \\includegraphics[width=0.30\\textwidth]{#1}\n    \\caption{#2}\n    \\end{wrapfigure}\n}\n% Font style\n\\newcommand{\\italic}[1]{{\\sl #1}}\n\\newcommand{\\strong}[1]{{\\bf #1}}\n\\newcommand{\\strike}[1]{\\st{#1}}\n\n% Scripta\n\\newcommand{\\ilink}[2]{\\href{{https://scripta.io/s/#1}}{#2}}\n\n% Color\n\\newcommand{\\red}[1]{\\textcolor{red}{#1}}\n\\newcommand{\\blue}[1]{\\textcolor{blue}{#1}}\n\\newcommand{\\violet}[1]{\\textcolor{violet}{#1}}\n\\newcommand{\\highlight}[1]{\\hl{#1}}\n\\newcommand{\\note}[2]{\\textcolor{blue}{#1}{\\hl{#1}}}\n\n% WTF?\n\\newcommand{\\remote}[1]{\\textcolor{red}{#1}}\n\\newcommand{\\local}[1]{\\textcolor{blue}{#1}}\n\n% Unclassified\n\\newcommand{\\subheading}[1]{{\\bf #1}\\par}\n\\newcommand{\\term}[1]{{\\sl #1}}\n\\newcommand{\\termx}[1]{}\n\\newcommand{\\comment}[1]{}\n\\newcommand{\\innertableofcontents}{}\n\n\n% Special character\n\\newcommand{\\dollarSign}[0]{{\\$}}\n\\newcommand{\\backTick}[0]{\\`{}}\n\n%% Theorems\n\\newtheorem{remark}{Remark}\n\\newtheorem{theorem}{Theorem}\n\\newtheorem{axiom}{Axiom}\n\\newtheorem{lemma}{Lemma}\n\\newtheorem{proposition}{Proposition}\n\\newtheorem{corollary}{Corollary}\n\\newtheorem{definition}{Definition}\n\\newtheorem{example}{Example}\n\\newtheorem{exercise}{Exercise}\n\\newtheorem{problem}{Problem}\n\\newtheorem{exercises}{Exercises}\n\\newcommand{\\bs}[1]{$\\backslash$#1}\n\\newcommand{\\texarg}[1]{\\{#1\\}}\n\n\n%% Environments\n\\renewenvironment{quotation}\n  {\\begin{adjustwidth}{2cm}{} \\footnotesize}\n  {\\end{adjustwidth}}\n\n\\def\\changemargin#1#2{\\list{}{\\rightmargin#2\\leftmargin#1}\\item[]}\n\\let\\endchangemargin=\\endlist\n\n\\renewenvironment{indent}\n  {\\begin{adjustwidth}{0.75cm}{}}\n  {\\end{adjustwidth}}\n\n\n%% NEWCOMMAND\n\n% \\definecolor{mypink1}{rgb}{0.858, 0.188, 0.478}\n% \\definecolor{mypink2}{RGB}{219, 48, 122}\n\\newcommand{\\fontRGB}[4]{\n    \\definecolor{mycolor}{RGB}{#1, #2, #3}\n    \\textcolor{mycolor}{#4}\n    }\n\n\\newcommand{\\highlightRGB}[4]{\n    \\definecolor{mycolor}{RGB}{#1, #2, #3}\n    \\sethlcolor{mycolor}\n    \\hl{#4}\n     \\sethlcolor{yellow}\n    }\n\n\\newcommand{\\gray}[2]{\n\\definecolor{mygray}{gray}{#1}\n\\textcolor{mygray}{#2}\n}\n\n\\newcommand{\\white}[1]{\\gray{1}[#1]}\n\\newcommand{\\medgray}[1]{\\gray{0.5}[#1]}\n\\newcommand{\\black}[1]{\\gray{0}[#1]}\n\n% Spacing\n\\parindent0pt\n\\parskip5pt\n\n';
var $author$project$Render$Export$Preamble$newPackageText = function (packagesNeeded_) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			function (name) {
				return '\\usepackage{' + (name + '}');
			},
			packagesNeeded_));
};
var $author$project$Render$Export$Preamble$addPackage = F4(
	function (namesInDocument, entityName, packageNames, packages_) {
		return A2($elm$core$List$member, entityName, namesInDocument) ? _Utils_ap(packageNames, packages_) : packages_;
	});
var $author$project$Render$Export$Preamble$packageList = _List_fromArray(
	[
		_Utils_Tuple2(
		'quiver',
		_List_fromArray(
			['quiver'])),
		_Utils_Tuple2(
		'tikz',
		_List_fromArray(
			['tikz'])),
		_Utils_Tuple2(
		'link',
		_List_fromArray(
			['hyperref'])),
		_Utils_Tuple2(
		'ilink',
		_List_fromArray(
			['hyperref'])),
		_Utils_Tuple2(
		'href',
		_List_fromArray(
			['hyperref'])),
		_Utils_Tuple2(
		'textcolor',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'blue',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'red',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'green',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'gray',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'magenta',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'violet',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'pink',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'highlight',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'highlight',
		_List_fromArray(
			['soul'])),
		_Utils_Tuple2(
		'strike',
		_List_fromArray(
			['soul'])),
		_Utils_Tuple2(
		'errorHighlight',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'image',
		_List_fromArray(
			['graphicx', 'wrapfig', 'float']))
	]);
var $author$project$Render$Export$Preamble$newPackageList = function (names) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, acc) {
				var entityName = _v0.a;
				var packageNames = _v0.b;
				return A4($author$project$Render$Export$Preamble$addPackage, names, entityName, packageNames, acc);
			}),
		_List_Nil,
		$author$project$Render$Export$Preamble$packageList);
};
var $author$project$Render$Export$Preamble$packagesNeeded = function (names) {
	return $elm$core$List$sort(
		$elm_community$list_extra$List$Extra$unique(
			$author$project$Render$Export$Preamble$newPackageList(names)));
};
var $author$project$Render$Export$Preamble$standardPackages = '\n%% Packages\n\n%% Standard packages\n\\usepackage{geometry}\n\\geometry{letterpaper}\n\\usepackage{changepage}   % for the adjustwidth environment\n\n%% AMS\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\n\\usepackage{amscd}\n\n\\usepackage{fancyvrb} %% for inline verbatim\n';
var $author$project$Render$Export$Preamble$addCode = F4(
	function (packagesInDocument, _package, codeText, accumulatedCodeText) {
		return A2($elm$core$List$member, _package, packagesInDocument) ? (codeText + ('\n\n' + accumulatedCodeText)) : accumulatedCodeText;
	});
var $author$project$Render$Export$Preamble$hypersetup = '\n\\hypersetup{\n    colorlinks=true,\n    linkcolor=blue,\n    filecolor=magenta,\n    urlcolor=blue,\n}\n';
var $author$project$Render$Export$Preamble$setupCode = _List_fromArray(
	[
		_Utils_Tuple2('graphicx', '\\graphicspath{ {image/} }'),
		_Utils_Tuple2('hyperref', $author$project$Render$Export$Preamble$hypersetup)
	]);
var $author$project$Render$Export$Preamble$supportingCode = function (packagesInDocument) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, acc) {
				var entityName = _v0.a;
				var packageNames = _v0.b;
				return A4($author$project$Render$Export$Preamble$addCode, packagesInDocument, entityName, packageNames, acc);
			}),
		'',
		$author$project$Render$Export$Preamble$setupCode);
};
var $author$project$Render$Export$Preamble$make = F2(
	function (blockNames_, expressionNames_) {
		var names = _Utils_ap(blockNames_, expressionNames_);
		var packagesUsed = $author$project$Render$Export$Preamble$packagesNeeded(names);
		return A2(
			$elm$core$String$join,
			'\n',
			_List_fromArray(
				[
					'\\documentclass[11pt, oneside]{article}',
					$author$project$Render$Export$Preamble$newPackageText(packagesUsed),
					$author$project$Render$Export$Preamble$supportingCode(packagesUsed),
					$author$project$Render$Export$Preamble$standardPackages,
					$author$project$Render$Export$Preamble$commands
				]));
	});
var $author$project$Parser$Block$getName = function (_v0) {
	var name = _v0.fA;
	return name;
};
var $author$project$Compiler$ASTTools$rawBlockNames = function (forest) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2(
			$elm$core$List$map,
			$author$project$Parser$Block$getName,
			$elm$core$List$concat(
				A2($elm$core$List$map, $zwilias$elm_rosetree$Tree$flatten, forest))));
};
var $author$project$Parser$Expr$smashUrl = function (url) {
	return A3(
		$elm$core$String$replace,
		'http://',
		'',
		A3($elm$core$String$replace, 'https://', '', url));
};
var $author$project$Parser$Expr$condenseUrl = function (expr) {
	if ((((!expr.$) && (expr.a === 'image')) && expr.b.b) && (expr.b.a.$ === 1)) {
		var _v1 = expr.b;
		var _v2 = _v1.a;
		var url = _v2.a;
		var meta1 = _v2.b;
		var rest = _v1.b;
		var meta2 = expr.c;
		return A3(
			$author$project$Parser$Expr$Fun,
			'image',
			A2(
				$elm$core$List$cons,
				A2(
					$author$project$Parser$Expr$Text,
					$author$project$Parser$Expr$smashUrl(url),
					meta1),
				rest),
			meta2);
	} else {
		return expr;
	}
};
var $author$project$Parser$Block$condenseUrls = function (_v0) {
	var data = _v0;
	var _v1 = data.bM;
	if (!_v1.$) {
		return data;
	} else {
		var exprList = _v1.a;
		return _Utils_update(
			data,
			{
				bM: $toastal$either$Either$Right(
					A2($elm$core$List$map, $author$project$Parser$Expr$condenseUrl, exprList))
			});
	}
};
var $author$project$Render$Export$LaTeX$OutsideList = 3;
var $author$project$Render$Export$LaTeX$InsideDescriptionList = 2;
var $author$project$Render$Export$LaTeX$InsideItemizedList = 0;
var $author$project$Render$Export$LaTeX$InsideNumberedList = 1;
var $author$project$Render$Export$LaTeX$beginDescriptionBlock = {
	gn: _List_Nil,
	dW: $author$project$Parser$Block$OrdinaryBlock(
		_List_fromArray(
			['beginDescriptionBlock'])),
	bM: $toastal$either$Either$Right(
		_List_fromArray(
			[
				A2(
				$author$project$Parser$Expr$Text,
				'description',
				{bl: 0, bp: 7, g7: 'begin', dy: 0})
			])),
	fb: $elm$core$Maybe$Nothing,
	g7: '0',
	hb: 1,
	eo: 0,
	eq: _List_Nil,
	fA: $elm$core$Maybe$Just('beginDescriptionBlock'),
	hA: 2,
	w: $elm$core$Dict$empty,
	h7: '| beginBlock\ndescription',
	ii: ''
};
var $author$project$Render$Export$LaTeX$beginItemizedBlock = {
	gn: _List_Nil,
	dW: $author$project$Parser$Block$OrdinaryBlock(
		_List_fromArray(
			['beginBlock'])),
	bM: $toastal$either$Either$Right(
		_List_fromArray(
			[
				A2(
				$author$project$Parser$Expr$Text,
				'itemize',
				{bl: 0, bp: 7, g7: '', dy: 0})
			])),
	fb: $elm$core$Maybe$Nothing,
	g7: '0',
	hb: 1,
	eo: 0,
	eq: _List_Nil,
	fA: $elm$core$Maybe$Just('beginBlock'),
	hA: 2,
	w: $elm$core$Dict$empty,
	h7: '| beginBlock\nitemize',
	ii: ''
};
var $author$project$Render$Export$LaTeX$beginNumberedBlock = {
	gn: _List_Nil,
	dW: $author$project$Parser$Block$OrdinaryBlock(
		_List_fromArray(
			['beginNumberedBlock'])),
	bM: $toastal$either$Either$Right(
		_List_fromArray(
			[
				A2(
				$author$project$Parser$Expr$Text,
				'enumerate',
				{bl: 0, bp: 7, g7: 'begin', dy: 0})
			])),
	fb: $elm$core$Maybe$Nothing,
	g7: '0',
	hb: 1,
	eo: 0,
	eq: _List_Nil,
	fA: $elm$core$Maybe$Just('beginNumberedBlock'),
	hA: 2,
	w: $elm$core$Dict$empty,
	h7: '| beginBlock\nitemize',
	ii: ''
};
var $author$project$Render$Export$LaTeX$endDescriptionBlock = {
	gn: _List_Nil,
	dW: $author$project$Parser$Block$OrdinaryBlock(
		_List_fromArray(
			['endDescriptionBlock'])),
	bM: $toastal$either$Either$Right(
		_List_fromArray(
			[
				A2(
				$author$project$Parser$Expr$Text,
				'description',
				{bl: 0, bp: 7, g7: 'end', dy: 0})
			])),
	fb: $elm$core$Maybe$Nothing,
	g7: '0',
	hb: 1,
	eo: 0,
	eq: _List_Nil,
	fA: $elm$core$Maybe$Just('endDescriptionBlock'),
	hA: 2,
	w: $elm$core$Dict$empty,
	h7: '| endBlock\ndescription',
	ii: ''
};
var $author$project$Render$Export$LaTeX$endItemizedBlock = {
	gn: _List_Nil,
	dW: $author$project$Parser$Block$OrdinaryBlock(
		_List_fromArray(
			['endBlock'])),
	bM: $toastal$either$Either$Right(
		_List_fromArray(
			[
				A2(
				$author$project$Parser$Expr$Text,
				'itemize',
				{bl: 0, bp: 7, g7: '', dy: 0})
			])),
	fb: $elm$core$Maybe$Nothing,
	g7: '0',
	hb: 1,
	eo: 0,
	eq: _List_Nil,
	fA: $elm$core$Maybe$Just('endBlock'),
	hA: 2,
	w: $elm$core$Dict$empty,
	h7: '| endBlock\nitemize',
	ii: ''
};
var $author$project$Render$Export$LaTeX$endNumberedBlock = {
	gn: _List_Nil,
	dW: $author$project$Parser$Block$OrdinaryBlock(
		_List_fromArray(
			['endNumberedBlock'])),
	bM: $toastal$either$Either$Right(
		_List_fromArray(
			[
				A2(
				$author$project$Parser$Expr$Text,
				'enumerate',
				{bl: 0, bp: 7, g7: 'end', dy: 0})
			])),
	fb: $elm$core$Maybe$Nothing,
	g7: '0',
	hb: 1,
	eo: 0,
	eq: _List_Nil,
	fA: $elm$core$Maybe$Just('endNumberedBlock'),
	hA: 2,
	w: $elm$core$Dict$empty,
	h7: '| endBlock\nitemize',
	ii: ''
};
var $author$project$Render$Export$LaTeX$nextState = F2(
	function (tree, state) {
		var name_ = function () {
			var _v11 = $zwilias$elm_rosetree$Tree$label(tree);
			var name = _v11.fA;
			return name;
		}();
		var _v0 = _Utils_Tuple2(state.h, name_);
		_v0$9:
		while (true) {
			switch (_v0.a) {
				case 0:
					if ((!_v0.b.$) && (_v0.b.a === 'item')) {
						var _v2 = _v0.a;
						return _Utils_update(
							state,
							{
								aX: A2($elm$core$List$drop, 1, state.aX),
								aa: state.aa + 1,
								bx: A2($elm$core$List$cons, tree, state.bx)
							});
					} else {
						var _v3 = _v0.a;
						return _Utils_update(
							state,
							{
								aX: A2($elm$core$List$drop, 1, state.aX),
								aa: 0,
								bx: A2(
									$elm$core$List$cons,
									tree,
									A2(
										$elm$core$List$cons,
										$zwilias$elm_rosetree$Tree$singleton($author$project$Render$Export$LaTeX$endItemizedBlock),
										state.bx)),
								h: 3
							});
					}
				case 1:
					if ((!_v0.b.$) && (_v0.b.a === 'numbered')) {
						var _v5 = _v0.a;
						return _Utils_update(
							state,
							{
								aX: A2($elm$core$List$drop, 1, state.aX),
								aa: state.aa + 1,
								bx: A2($elm$core$List$cons, tree, state.bx)
							});
					} else {
						var _v6 = _v0.a;
						return _Utils_update(
							state,
							{
								aX: A2($elm$core$List$drop, 1, state.aX),
								aa: 0,
								bx: A2(
									$elm$core$List$cons,
									tree,
									A2(
										$elm$core$List$cons,
										$zwilias$elm_rosetree$Tree$singleton($author$project$Render$Export$LaTeX$endNumberedBlock),
										state.bx)),
								h: 3
							});
					}
				case 2:
					if ((!_v0.b.$) && (_v0.b.a === 'desc')) {
						var _v8 = _v0.a;
						return _Utils_update(
							state,
							{
								aX: A2($elm$core$List$drop, 1, state.aX),
								aa: state.aa + 1,
								bx: A2($elm$core$List$cons, tree, state.bx)
							});
					} else {
						var _v9 = _v0.a;
						return _Utils_update(
							state,
							{
								aX: A2($elm$core$List$drop, 1, state.aX),
								aa: 0,
								bx: A2(
									$elm$core$List$cons,
									tree,
									A2(
										$elm$core$List$cons,
										$zwilias$elm_rosetree$Tree$singleton($author$project$Render$Export$LaTeX$endDescriptionBlock),
										state.bx)),
								h: 3
							});
					}
				default:
					if (!_v0.b.$) {
						switch (_v0.b.a) {
							case 'item':
								var _v1 = _v0.a;
								return _Utils_update(
									state,
									{
										aX: A2($elm$core$List$drop, 1, state.aX),
										aa: 1,
										bx: A2(
											$elm$core$List$cons,
											tree,
											A2(
												$elm$core$List$cons,
												$zwilias$elm_rosetree$Tree$singleton($author$project$Render$Export$LaTeX$beginItemizedBlock),
												state.bx)),
										h: 0
									});
							case 'numbered':
								var _v4 = _v0.a;
								return _Utils_update(
									state,
									{
										aX: A2($elm$core$List$drop, 1, state.aX),
										aa: 1,
										bx: A2(
											$elm$core$List$cons,
											tree,
											A2(
												$elm$core$List$cons,
												$zwilias$elm_rosetree$Tree$singleton($author$project$Render$Export$LaTeX$beginNumberedBlock),
												state.bx)),
										h: 1
									});
							case 'desc':
								var _v7 = _v0.a;
								return _Utils_update(
									state,
									{
										aX: A2($elm$core$List$drop, 1, state.aX),
										aa: 1,
										bx: A2(
											$elm$core$List$cons,
											tree,
											A2(
												$elm$core$List$cons,
												$zwilias$elm_rosetree$Tree$singleton($author$project$Render$Export$LaTeX$beginDescriptionBlock),
												state.bx)),
										h: 2
									});
							default:
								break _v0$9;
						}
					} else {
						break _v0$9;
					}
			}
		}
		var _v10 = _v0.a;
		return _Utils_update(
			state,
			{
				aX: A2($elm$core$List$drop, 1, state.aX),
				bx: A2($elm$core$List$cons, tree, state.bx)
			});
	});
var $author$project$Render$Export$LaTeX$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.aX);
	if (_v0.$ === 1) {
		return $author$project$Parser$Helpers$Done(state.bx);
	} else {
		var tree = _v0.a;
		return $author$project$Parser$Helpers$Loop(
			A2($author$project$Render$Export$LaTeX$nextState, tree, state));
	}
};
var $author$project$Render$Export$LaTeX$encloseLists = function (blocks) {
	return $elm$core$List$reverse(
		A2(
			$author$project$Parser$Helpers$loop,
			{aX: blocks, aa: 0, bx: _List_Nil, h: 3},
			$author$project$Render$Export$LaTeX$nextStep));
};
var $author$project$Render$Export$LaTeX$addTikzPictureClosing = F2(
	function (flagUp, str) {
		return flagUp ? (str + '\n\\end{tikzpicture}') : str;
	});
var $author$project$Render$Export$LaTeX$argString = function (args) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filter,
			function (arg) {
				return !A2($elm$core$String$contains, 'label:', arg);
			},
			args));
};
var $author$project$Render$Export$LaTeX$descriptionItem = F2(
	function (args, body) {
		var arg = $author$project$Render$Export$LaTeX$argString(args);
		if (!args.b) {
			return '\\item{' + (body + '}');
		} else {
			return '\\item[' + (arg + (']{' + (body + '}')));
		}
	});
var $author$project$Render$Export$LaTeX$functionDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('italic', 'textit'),
			_Utils_Tuple2('i', 'textit'),
			_Utils_Tuple2('bold', 'textbf'),
			_Utils_Tuple2('b', 'textbf'),
			_Utils_Tuple2('image', 'imagecenter'),
			_Utils_Tuple2('contents', 'tableofcontents')
		]));
var $author$project$Render$Export$LaTeX$mapChars2 = function (str) {
	return A3($elm$core$String$replace, '_', '\\_', str);
};
var $author$project$Render$Export$LaTeX$macro1 = F2(
	function (name, arg) {
		if (name === 'math') {
			return '$' + (arg + '$');
		} else {
			if (name === 'group') {
				return arg;
			} else {
				if (name === 'tags') {
					return '';
				} else {
					var _v0 = A2($elm$core$Dict$get, name, $author$project$Render$Export$LaTeX$functionDict);
					if (_v0.$ === 1) {
						return '\\' + (name + ('{' + ($author$project$Render$Export$LaTeX$mapChars2(
							$elm$core$String$trimLeft(arg)) + '}')));
					} else {
						var realName = _v0.a;
						return '\\' + (realName + ('{' + ($author$project$Render$Export$LaTeX$mapChars2(
							$elm$core$String$trimLeft(arg)) + '}')));
					}
				}
			}
		}
	});
var $author$project$Render$Utility$getArg = F3(
	function (_default, index, args) {
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, index, args);
		if (_v0.$ === 1) {
			return _default;
		} else {
			var a = _v0.a;
			return a;
		}
	});
var $author$project$Compiler$Util$normalizedWord = function (words) {
	return A2(
		$elm$core$String$join,
		'-',
		A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeR, $elm$core$String$toLower, $author$project$Utility$removeNonAlphaNum),
			words));
};
var $author$project$Render$Export$LaTeX$section1 = F2(
	function (args, body) {
		var tag = $author$project$Compiler$Util$normalizedWord(
			$elm$core$String$words(body));
		var suffix = function () {
			var _v1 = A2($elm_community$list_extra$List$Extra$getAt, 1, args);
			if (_v1.$ === 1) {
				return '';
			} else {
				if (_v1.a === '-') {
					return '*';
				} else {
					return '';
				}
			}
		}();
		var label = ' \\label{' + (tag + '}');
		var _v0 = A3($author$project$Render$Utility$getArg, '4', 0, args);
		switch (_v0) {
			case '1':
				return _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'title' + suffix, body),
					label);
			case '2':
				return _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'section' + suffix, body),
					label);
			case '3':
				return _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subsection' + suffix, body),
					label);
			case '4':
				return _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subsubsection' + suffix, body),
					label);
			default:
				return _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subheading' + suffix, body),
					label);
		}
	});
var $author$project$Render$Export$LaTeX$section2 = F2(
	function (args, body) {
		var tag = $author$project$Compiler$Util$normalizedWord(
			$elm$core$String$words(body));
		var suffix = function () {
			var _v1 = A2($elm_community$list_extra$List$Extra$getAt, 1, args);
			if (_v1.$ === 1) {
				return '';
			} else {
				if (_v1.a === '-') {
					return '*';
				} else {
					return '';
				}
			}
		}();
		var label = ' \\label{' + (tag + '}');
		var _v0 = A3($author$project$Render$Utility$getArg, '4', 0, args);
		switch (_v0) {
			case '1':
				return _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'section' + suffix, body),
					label);
			case '2':
				return _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subsection' + suffix, body),
					label);
			case '3':
				return _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subsubsection' + suffix, body),
					label);
			default:
				return _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subheading' + suffix, body),
					label);
		}
	});
var $author$project$Render$Export$LaTeX$section = F3(
	function (settings, args, body) {
		return settings.ek ? A2($author$project$Render$Export$LaTeX$section1, args, body) : A2($author$project$Render$Export$LaTeX$section2, args, body);
	});
var $author$project$Render$Export$LaTeX$subheading = F3(
	function (settings, args, body) {
		return '\\subheading{' + (body + '}');
	});
var $author$project$Render$Export$LaTeX$putPercent = function (str) {
	return (A2($elm$core$String$left, 1, str) === '%') ? str : ('% ' + str);
};
var $author$project$Render$Export$LaTeX$texComment = function (lines) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$map, $author$project$Render$Export$LaTeX$putPercent, lines));
};
var $author$project$Render$Export$LaTeX$blockDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'title',
			F3(
				function (_v0, _v1, _v2) {
					return '';
				})),
			_Utils_Tuple2(
			'subtitle',
			F3(
				function (_v3, _v4, _v5) {
					return '';
				})),
			_Utils_Tuple2(
			'author',
			F3(
				function (_v6, _v7, _v8) {
					return '';
				})),
			_Utils_Tuple2(
			'date',
			F3(
				function (_v9, _v10, _v11) {
					return '';
				})),
			_Utils_Tuple2(
			'contents',
			F3(
				function (_v12, _v13, _v14) {
					return '';
				})),
			_Utils_Tuple2(
			'hide',
			F3(
				function (_v15, _v16, _v17) {
					return '';
				})),
			_Utils_Tuple2(
			'texComment',
			F3(
				function (_v18, lines, _v19) {
					return $author$project$Render$Export$LaTeX$texComment(lines);
				})),
			_Utils_Tuple2(
			'tags',
			F3(
				function (_v20, _v21, _v22) {
					return '';
				})),
			_Utils_Tuple2(
			'docinfo',
			F3(
				function (_v23, _v24, _v25) {
					return '';
				})),
			_Utils_Tuple2(
			'banner',
			F3(
				function (_v26, _v27, _v28) {
					return '';
				})),
			_Utils_Tuple2(
			'set-key',
			F3(
				function (_v29, _v30, _v31) {
					return '';
				})),
			_Utils_Tuple2(
			'endnotes',
			F3(
				function (_v32, _v33, _v34) {
					return '';
				})),
			_Utils_Tuple2(
			'index',
			F3(
				function (_v35, _v36, _v37) {
					return 'Index: not implemented';
				})),
			_Utils_Tuple2(
			'section',
			F3(
				function (settings_, args, body) {
					return A3($author$project$Render$Export$LaTeX$section, settings_, args, body);
				})),
			_Utils_Tuple2(
			'subheading',
			F3(
				function (settings_, args, body) {
					return A3($author$project$Render$Export$LaTeX$subheading, settings_, args, body);
				})),
			_Utils_Tuple2(
			'item',
			F3(
				function (_v38, _v39, body) {
					return A2($author$project$Render$Export$LaTeX$macro1, 'item', body);
				})),
			_Utils_Tuple2(
			'descriptionItem',
			F3(
				function (_v40, args, body) {
					return A2($author$project$Render$Export$LaTeX$descriptionItem, args, body);
				})),
			_Utils_Tuple2(
			'numbered',
			F3(
				function (_v41, _v42, body) {
					return A2($author$project$Render$Export$LaTeX$macro1, 'item', body);
				})),
			_Utils_Tuple2(
			'desc',
			F3(
				function (_v43, args, body) {
					return A2($author$project$Render$Export$LaTeX$descriptionItem, args, body);
				})),
			_Utils_Tuple2(
			'beginBlock',
			F3(
				function (_v44, _v45, _v46) {
					return '\\begin{itemize}';
				})),
			_Utils_Tuple2(
			'endBlock',
			F3(
				function (_v47, _v48, _v49) {
					return '\\end{itemize}';
				})),
			_Utils_Tuple2(
			'beginNumberedBlock',
			F3(
				function (_v50, _v51, _v52) {
					return '\\begin{enumerate}';
				})),
			_Utils_Tuple2(
			'endNumberedBlock',
			F3(
				function (_v53, _v54, _v55) {
					return '\\end{enumerate}';
				})),
			_Utils_Tuple2(
			'beginDescriptionBlock',
			F3(
				function (_v56, _v57, _v58) {
					return '\\begin{description}';
				})),
			_Utils_Tuple2(
			'endDescriptionBlock',
			F3(
				function (_v59, _v60, _v61) {
					return '\\end{description}';
				})),
			_Utils_Tuple2(
			'mathmacros',
			F3(
				function (_v62, _v63, body) {
					return body + '\nHa ha ha!';
				})),
			_Utils_Tuple2(
			'setcounter',
			F3(
				function (_v64, _v65, _v66) {
					return '';
				}))
		]));
var $author$project$Render$Export$LaTeX$commentBlankLine = function (line) {
	return (line === '') ? '%' : line;
};
var $author$project$Render$Export$LaTeX$tagged = F2(
	function (name, body) {
		return '\\' + (name + ('{' + (body + '}')));
	});
var $author$project$Render$Export$LaTeX$environment = F2(
	function (name, body) {
		return A2(
			$elm$core$String$join,
			'\n',
			_List_fromArray(
				[
					A2($author$project$Render$Export$LaTeX$tagged, 'begin', name),
					body,
					A2($author$project$Render$Export$LaTeX$tagged, 'end', name)
				]));
	});
var $author$project$Render$Export$Image$exportCenteredFigure = F3(
	function (url, options, caption) {
		return (caption === 'none') ? A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				['\\imagecenter{', url, '}{' + (options + '}')])) : A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				['\\imagecentercaptioned{', url, '}{' + (options + ('}{' + (caption + '}')))]));
	});
var $elm$core$String$fromFloat = _String_fromNumber;
var $author$project$Render$Export$Image$fractionaRescale = function (k) {
	var f = $elm$core$String$fromFloat(k / 600.0);
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			[f, '\\textwidth']));
};
var $author$project$Render$Export$Image$rescale = F2(
	function (displayWidth, k) {
		return $elm$core$String$fromFloat(k * (6.0 / displayWidth)) + 'truein';
	});
var $author$project$Render$Export$Image$imageParameters3 = F2(
	function (settings, _v0) {
		var content = _v0.bM;
		var args = _v0.gn;
		var properties = _v0.w;
		var url = function () {
			if (!content.$) {
				var str = content.a;
				return A3($elm$core$String$replace, 'https://', '', str);
			} else {
				return 'bad block';
			}
		}();
		var placement = function () {
			var _v6 = A2($elm$core$Dict$get, 'placement', properties);
			if (_v6.$ === 1) {
				return 'C';
			} else {
				switch (_v6.a) {
					case 'left':
						return 'L';
					case 'right':
						return 'R';
					case 'center':
						return 'C';
					default:
						return 'C';
				}
			}
		}();
		var displayWidth = settings.eS;
		var fractionalWidth = function () {
			var _v4 = A2($elm$core$Dict$get, 'width', properties);
			if (_v4.$ === 1) {
				return '0.51\\textwidth';
			} else {
				if (_v4.a === 'fill') {
					return $author$project$Render$Export$Image$fractionaRescale(displayWidth);
				} else {
					var w_ = _v4.a;
					var _v5 = $elm$core$String$toInt(w_);
					if (_v5.$ === 1) {
						return $author$project$Render$Export$Image$fractionaRescale(displayWidth);
					} else {
						var w = _v5.a;
						return $author$project$Render$Export$Image$fractionaRescale(w);
					}
				}
			}
		}();
		var width = function () {
			var _v2 = A2($elm$core$Dict$get, 'width', properties);
			if (_v2.$ === 1) {
				return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
			} else {
				if (_v2.a === 'fill') {
					return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
				} else {
					var w_ = _v2.a;
					var _v3 = $elm$core$String$toInt(w_);
					if (_v3.$ === 1) {
						return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
					} else {
						var w = _v3.a;
						return A2($author$project$Render$Export$Image$rescale, displayWidth, w);
					}
				}
			}
		}();
		var caption = A3(
			$elm$core$String$replace,
			':',
			'',
			A2(
				$elm$core$Maybe$withDefault,
				'',
				A2($elm$core$Dict$get, 'caption', properties)));
		var _arguments = args;
		var _v1 = url;
		return {dY: caption, d4: caption, cG: fractionalWidth, cZ: placement, f1: url, eS: width};
	});
var $author$project$Render$Export$Image$normalizeUrl_ = function (url_) {
	var _v0 = $elm_community$list_extra$List$Extra$last(
		A2($elm$core$String$split, '/', url_));
	if (_v0.$ === 1) {
		return url_;
	} else {
		var url = _v0.a;
		return url;
	}
};
var $author$project$Render$Export$Image$normalizeUrl = function (url) {
	return A2($elm$core$String$contains, 'i.ibb.co', url) ? url : $author$project$Render$Export$Image$normalizeUrl_(url);
};
var $author$project$Render$Export$Image$exportBlock = F2(
	function (settings, block) {
		var content = block.bM;
		var args = block.gn;
		var params = A2($author$project$Render$Export$Image$imageParameters3, settings, block);
		var options = A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				[params.cG, ',keepaspectratio']));
		return A3(
			$author$project$Render$Export$Image$exportCenteredFigure,
			$author$project$Render$Export$Image$normalizeUrl(params.f1),
			options,
			params.dY);
	});
var $author$project$Render$Export$LaTeX$encloseWithBraces = function (str_) {
	return '{' + ($elm$core$String$trim(str_) + '}');
};
var $author$project$Render$Export$LaTeX$blindIndex = '';
var $author$project$Compiler$ASTTools$exprListToStringList = function (exprList) {
	return A2(
		$elm$core$List$filter,
		function (s) {
			return s !== '';
		},
		A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2($elm$core$List$map, $author$project$Compiler$ASTTools$getText, exprList))));
};
var $author$project$Render$Export$Util$getArgs = A2(
	$elm$core$Basics$composeR,
	$author$project$Compiler$ASTTools$exprListToStringList,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map($elm$core$String$words),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$concat,
			$elm$core$List$filter(
				function (x) {
					return x !== '';
				}))));
var $author$project$Render$Export$LaTeX$bolditalic = function (exprs) {
	var args = A2(
		$elm$core$String$join,
		' ',
		$author$project$Render$Export$Util$getArgs(exprs));
	return '\\textbf{\\emph{' + (args + '}}');
};
var $author$project$Render$Export$LaTeX$brackets = function (exprs) {
	return '[' + (A2(
		$elm$core$String$join,
		' ',
		$author$project$Render$Export$Util$getArgs(exprs)) + ']');
};
var $author$project$Render$Export$LaTeX$bt = function (_v0) {
	return '`';
};
var $author$project$Render$Export$LaTeX$dontRender = F2(
	function (_v0, _v1) {
		return '';
	});
var $author$project$Render$Export$Image$exportWrappedFigure = F4(
	function (placement, url, options, caption) {
		return A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				['\\imagefloat{', url, '}{' + (options + ('}{' + (caption + ('}{' + (placement + '}')))))]));
	});
var $author$project$Render$Export$Image$fixWidth = function (w) {
	return ((w === '') || (w === 'fill')) ? '500' : w;
};
var $author$project$Render$Export$Util$getOneArg = function (exprs) {
	var _v0 = $elm$core$List$head(
		$author$project$Render$Export$Util$getArgs(exprs));
	if (_v0.$ === 1) {
		return '';
	} else {
		var str = _v0.a;
		return str;
	}
};
var $author$project$Render$Export$Image$imageParameters = F2(
	function (settings, body) {
		var displayWidth = settings.eS;
		var _arguments = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				$elm$core$String$words,
				$author$project$Compiler$ASTTools$exprListToStringList(body)));
		var remainingArguments = A2($elm$core$List$drop, 1, _arguments);
		var keyValueStrings_ = A2(
			$elm$core$List$filter,
			function (s) {
				return A2($elm$core$String$contains, ':', s);
			},
			remainingArguments);
		var captionLeadString = A3(
			$elm$core$String$replace,
			'caption:',
			'',
			A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$filter,
					function (s) {
						return A2($elm$core$String$contains, 'caption', s);
					},
					keyValueStrings_)));
		var caption = A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$cons,
				captionLeadString,
				A2(
					$elm$core$List$filter,
					function (s) {
						return !A2($elm$core$String$contains, ':', s);
					},
					remainingArguments)));
		var keyValueStrings = A2(
			$elm$core$List$filter,
			function (s) {
				return !A2($elm$core$String$contains, 'caption', s);
			},
			keyValueStrings_);
		var dict = $author$project$Render$Utility$keyValueDict(keyValueStrings);
		var description = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, 'caption', dict));
		var fractionalWidth = function () {
			var _v3 = A2($elm$core$Dict$get, 'width', dict);
			if (_v3.$ === 1) {
				return $author$project$Render$Export$Image$fractionaRescale(displayWidth);
			} else {
				if (_v3.a === 'fill') {
					return $author$project$Render$Export$Image$fractionaRescale(displayWidth);
				} else {
					var w_ = _v3.a;
					var _v4 = $elm$core$String$toInt(w_);
					if (_v4.$ === 1) {
						return $author$project$Render$Export$Image$fractionaRescale(displayWidth);
					} else {
						var w = _v4.a;
						return $author$project$Render$Export$Image$fractionaRescale(w);
					}
				}
			}
		}();
		var placement = function () {
			var _v2 = A2($elm$core$Dict$get, 'placement', dict);
			if (_v2.$ === 1) {
				return 'C';
			} else {
				switch (_v2.a) {
					case 'left':
						return 'L';
					case 'right':
						return 'R';
					case 'center':
						return 'C';
					default:
						return 'C';
				}
			}
		}();
		var width = function () {
			var _v0 = A2($elm$core$Dict$get, 'width', dict);
			if (_v0.$ === 1) {
				return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
			} else {
				if (_v0.a === 'fill') {
					return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
				} else {
					var w_ = _v0.a;
					var _v1 = $elm$core$String$toInt(w_);
					if (_v1.$ === 1) {
						return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
					} else {
						var w = _v1.a;
						return A2($author$project$Render$Export$Image$rescale, displayWidth, w);
					}
				}
			}
		}();
		var url = A2(
			$elm$core$Maybe$withDefault,
			'no-image',
			$elm$core$List$head(_arguments));
		return {dY: caption, d4: description, cG: fractionalWidth, cZ: placement, f1: url, eS: width};
	});
var $author$project$Render$Export$Image$export = F2(
	function (s, exprs) {
		var params = A2($author$project$Render$Export$Image$imageParameters, s, exprs);
		var options = A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				[
					$author$project$Render$Export$Image$fixWidth(params.eS),
					',keepaspectratio'
				]));
		var args = $elm$core$String$words(
			$author$project$Render$Export$Util$getOneArg(exprs));
		var _v0 = $elm$core$List$head(args);
		if (_v0.$ === 1) {
			return 'ERROR IN IMAGE';
		} else {
			var url_ = _v0.a;
			return (params.cZ === 'C') ? A3(
				$author$project$Render$Export$Image$exportCenteredFigure,
				$author$project$Render$Export$Image$normalizeUrl(url_),
				options,
				params.dY) : A4(
				$author$project$Render$Export$Image$exportWrappedFigure,
				params.cZ,
				$author$project$Render$Export$Image$normalizeUrl(url_),
				params.cG,
				params.dY);
		}
	});
var $author$project$Render$Export$Util$getTwoArgs = function (exprs) {
	var args = $author$project$Render$Export$Util$getArgs(exprs);
	var n = $elm$core$List$length(args);
	var first = A2(
		$elm$core$String$join,
		' ',
		A2($elm$core$List$take, n - 1, args));
	var second = A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$drop, n - 1, args));
	return {fd: first, fO: second};
};
var $author$project$Render$Export$LaTeX$ilink = function (exprs) {
	var args = $author$project$Render$Export$Util$getTwoArgs(exprs);
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\\href{', 'https://scripta.io/s/', args.fO, '}{', args.fd, '}']));
};
var $author$project$Render$Export$LaTeX$lb = function (_v0) {
	return '[';
};
var $author$project$Render$Export$LaTeX$link = function (exprs) {
	var args = $author$project$Render$Export$Util$getTwoArgs(exprs);
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\\href{', args.fO, '}{', args.fd, '}']));
};
var $author$project$Render$Export$LaTeX$rb = function (_v0) {
	return ']';
};
var $author$project$Render$Export$LaTeX$underscore = function (_v0) {
	return '$\\_$';
};
var $author$project$Render$Export$LaTeX$vspace = function (exprs) {
	var arg = function (x) {
		return x + 'mm';
	}(
		$elm$core$String$fromFloat(
			function (x) {
				return x / 4.0;
			}(
				A2(
					$elm$core$Maybe$withDefault,
					0,
					$elm$core$String$toFloat(
						$author$project$Render$Export$Util$getOneArg(exprs))))));
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\\vspace{', arg, '}']));
};
var $author$project$Render$Export$LaTeX$macroDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'link',
			function (_v0) {
				return $author$project$Render$Export$LaTeX$link;
			}),
			_Utils_Tuple2(
			'ilink',
			function (_v1) {
				return $author$project$Render$Export$LaTeX$ilink;
			}),
			_Utils_Tuple2(
			'index_',
			F2(
				function (_v2, _v3) {
					return $author$project$Render$Export$LaTeX$blindIndex;
				})),
			_Utils_Tuple2('image', $author$project$Render$Export$Image$export),
			_Utils_Tuple2(
			'vspace',
			function (_v4) {
				return $author$project$Render$Export$LaTeX$vspace;
			}),
			_Utils_Tuple2(
			'bolditalic',
			function (_v5) {
				return $author$project$Render$Export$LaTeX$bolditalic;
			}),
			_Utils_Tuple2(
			'brackets',
			function (_v6) {
				return $author$project$Render$Export$LaTeX$brackets;
			}),
			_Utils_Tuple2(
			'lb',
			function (_v7) {
				return $author$project$Render$Export$LaTeX$lb;
			}),
			_Utils_Tuple2(
			'rb',
			function (_v8) {
				return $author$project$Render$Export$LaTeX$rb;
			}),
			_Utils_Tuple2(
			'bt',
			function (_v9) {
				return $author$project$Render$Export$LaTeX$bt;
			}),
			_Utils_Tuple2(
			'underscore',
			function (_v10) {
				return $author$project$Render$Export$LaTeX$underscore;
			}),
			_Utils_Tuple2('tags', $author$project$Render$Export$LaTeX$dontRender)
		]));
var $author$project$Render$Export$LaTeX$fixChars = function (str) {
	return A3(
		$elm$core$String$replace,
		'}',
		'\\}',
		A3($elm$core$String$replace, '{', '\\{', str));
};
var $author$project$Compiler$Util$transformLabel = function (str) {
	var normalize = function (m) {
		return $elm$core$String$trim(
			A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$elm$core$Maybe$withDefault(''),
					m)));
	};
	return A3(
		$author$project$Utility$userReplace,
		'\\[label(.*)\\]',
		function (m) {
			return '\\label{' + (normalize(m.ig) + '}');
		},
		str);
};
var $author$project$Render$Export$LaTeX$inlineCode = function (str) {
	return '\\verb`' + (str + '`');
};
var $author$project$Render$Export$LaTeX$inlineMath = function (str) {
	return '$' + (str + '$');
};
var $author$project$Render$Export$LaTeX$verbatimExprDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('code', $author$project$Render$Export$LaTeX$inlineCode),
			_Utils_Tuple2('math', $author$project$Render$Export$LaTeX$inlineMath)
		]));
var $author$project$Render$Export$LaTeX$renderVerbatim = F2(
	function (name, body) {
		var _v0 = A2($elm$core$Dict$get, name, $author$project$Render$Export$LaTeX$verbatimExprDict);
		if (_v0.$ === 1) {
			return name + ('(' + (body + ') — unimplemented '));
		} else {
			var f = _v0.a;
			return A2(
				$elm$core$List$member,
				name,
				_List_fromArray(
					['equation', 'aligned', 'math'])) ? f(
				$author$project$Compiler$Util$transformLabel(body)) : f(
				$author$project$Compiler$Util$transformLabel(
					$author$project$Render$Export$LaTeX$fixChars(body)));
		}
	});
var $author$project$Compiler$TextMacro$toString = F2(
	function (exprToString, macro) {
		return A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				[
					'\\newcommand{\\',
					macro.fA,
					'}[',
					$elm$core$String$fromInt(
					$elm$core$List$length(macro.bi)),
					']{',
					A2(
					$elm$core$String$join,
					'',
					A2($elm$core$List$map, exprToString, macro.aS)),
					'}    '
				]));
	});
var $author$project$Render$Export$LaTeX$exportExpr = F2(
	function (settings, expr) {
		switch (expr.$) {
			case 0:
				var name = expr.a;
				var exps_ = expr.b;
				if (name === 'lambda') {
					var _v1 = $author$project$Compiler$TextMacro$extract(expr);
					if (!_v1.$) {
						var lambda = _v1.a;
						return A2(
							$author$project$Compiler$TextMacro$toString,
							$author$project$Render$Export$LaTeX$exportExpr(settings),
							lambda);
					} else {
						return 'Error extracting lambda';
					}
				} else {
					var _v2 = A2($elm$core$Dict$get, name, $author$project$Render$Export$LaTeX$macroDict);
					if (!_v2.$) {
						var f = _v2.a;
						return A2(f, settings, exps_);
					} else {
						return '\\' + (name + A2(
							$elm$core$String$join,
							'',
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeL,
									$author$project$Render$Export$LaTeX$encloseWithBraces,
									$author$project$Render$Export$LaTeX$exportExpr(settings)),
								exps_)));
					}
				}
			case 1:
				var str = expr.a;
				return $author$project$Render$Export$LaTeX$mapChars2(str);
			default:
				var name = expr.a;
				var body = expr.b;
				return A2($author$project$Render$Export$LaTeX$renderVerbatim, name, body);
		}
	});
var $author$project$Render$Export$LaTeX$mapChars1 = function (str) {
	return A3($elm$core$String$replace, '\\term_', '\\termx', str);
};
var $author$project$Render$Export$LaTeX$exportExprList = F2(
	function (settings, exprs) {
		return $author$project$Render$Export$LaTeX$mapChars1(
			A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$author$project$Render$Export$LaTeX$exportExpr(settings),
					exprs)));
	});
var $author$project$Compiler$TextMacro$toLaTeXString = function (expr) {
	switch (expr.$) {
		case 0:
			var name = expr.a;
			var expressions = expr.b;
			var body_ = A2(
				$elm$core$String$join,
				'',
				A2($elm$core$List$map, $author$project$Compiler$TextMacro$toLaTeXString, expressions));
			var body = (body_ === '') ? body_ : ((A2($elm$core$String$left, 1, body_) === '[') ? body_ : ((A2($elm$core$String$left, 1, body_) === ' ') ? body_ : (' ' + body_)));
			return '\\' + (name + ('{' + (body + '}')));
		case 1:
			var str = expr.a;
			return str;
		default:
			var name = expr.a;
			var str = expr.b;
			switch (name) {
				case 'math':
					return '$' + (str + '$');
				case 'code':
					return '`' + (str + '`');
				default:
					return 'error: verbatim ' + (name + ' not recognized');
			}
	}
};
var $author$project$Compiler$TextMacro$printLaTeXMacro = function (macro) {
	return (!$elm$core$List$length(macro.bi)) ? ('\\newcommand{\\' + (macro.fA + ('}{' + (A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$Compiler$TextMacro$toLaTeXString, macro.aS)) + '}')))) : ('\\newcommand{\\' + (macro.fA + ('}' + ('[' + ($elm$core$String$fromInt(
		$elm$core$List$length(macro.bi)) + (']{' + (A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$Compiler$TextMacro$toLaTeXString, macro.aS)) + '}')))))));
};
var $author$project$Compiler$TextMacro$exportTexMacros = function (str) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$author$project$Compiler$TextMacro$printLaTeXMacro,
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$second,
				$elm$core$Dict$toList(
					$author$project$Compiler$TextMacro$buildDictionary(
						$elm$core$String$lines(str))))));
};
var $author$project$Render$Export$LaTeX$hideToPercentComment = function (str) {
	return (A2($elm$core$String$left, 6, str) === '\\hide{') ? function (s) {
		return '%% ' + s;
	}(
		A2(
			$elm$core$String$dropRight,
			1,
			A2($elm$core$String$dropLeft, 6, str))) : str;
};
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $author$project$Render$Data$getVerbatimContent = function (_v0) {
	var content = _v0.bM;
	if (!content.$) {
		var str = content.a;
		return str;
	} else {
		return '';
	}
};
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$list_extra$List$Extra$rowsLength = function (listOfLists) {
	if (!listOfLists.b) {
		return 0;
	} else {
		var x = listOfLists.a;
		return $elm$core$List$length(x);
	}
};
var $elm_community$list_extra$List$Extra$transpose = function (listOfLists) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$List$map2($elm$core$List$cons),
		A2(
			$elm$core$List$repeat,
			$elm_community$list_extra$List$Extra$rowsLength(listOfLists),
			_List_Nil),
		listOfLists);
};
var $author$project$Render$Data$prepareTable = F2(
	function (fontWidth_, block) {
		var id = block.g7;
		var args = block.gn;
		var properties = block.w;
		var title = A2($elm$core$Dict$get, 'title', properties);
		var lines = A2(
			$elm$core$String$split,
			'\n',
			$author$project$Render$Data$getVerbatimContent(block));
		var rawCells = A2(
			$elm$core$List$map,
			$elm$core$List$map($elm$core$String$trim),
			A2(
				$elm$core$List$map,
				$elm$core$String$split(','),
				lines));
		var columnsToDisplay = A2(
			$elm$core$List$map,
			function (n) {
				return n - 1;
			},
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $elm$core$String$trim, $elm$core$String$toInt),
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							$elm$core$String$split(','),
							A2($elm$core$Dict$get, 'columns', properties))))));
		var selectedCells = function () {
			if (_Utils_eq(columnsToDisplay, _List_Nil)) {
				return rawCells;
			} else {
				var updater = F2(
					function (_v0, acc_) {
						var k = _v0.a;
						var col = _v0.b;
						return A2($elm$core$List$member, k, columnsToDisplay) ? A2($elm$core$List$cons, col, acc_) : acc_;
					});
				var cols = A2(
					$elm$core$List$indexedMap,
					F2(
						function (k, col) {
							return _Utils_Tuple2(k, col);
						}),
					$elm_community$list_extra$List$Extra$transpose(rawCells));
				var selectedCols = A3($elm$core$List$foldl, updater, _List_Nil, cols);
				return $elm_community$list_extra$List$Extra$transpose(
					$elm$core$List$reverse(selectedCols));
			}
		}();
		var columnWidths = A2(
			$elm$core$List$map,
			function (w) {
				return fontWidth_ * w;
			},
			A2(
				$elm$core$List$map,
				function (column) {
					return A2(
						$elm$core$Maybe$withDefault,
						1,
						$elm$core$List$maximum(column));
				},
				$elm_community$list_extra$List$Extra$transpose(
					A2(
						$elm$core$List$map,
						$elm$core$List$map($elm$core$String$length),
						selectedCells))));
		var totalWidth = $elm$core$List$sum(columnWidths);
		return {d$: columnWidths, eG: selectedCells, eO: title, f_: totalWidth};
	});
var $author$project$Render$Export$LaTeX$exportBlock = F2(
	function (settings, block) {
		var blockType = block.dW;
		var name = block.fA;
		var args = block.gn;
		var content = block.bM;
		switch (blockType.$) {
			case 0:
				if (!content.$) {
					var str = content.a;
					return $author$project$Render$Export$LaTeX$mapChars2(str);
				} else {
					var exprs_ = content.a;
					return A2($author$project$Render$Export$LaTeX$exportExprList, settings, exprs_);
				}
			case 1:
				if (!content.$) {
					return '';
				} else {
					var exprs_ = content.a;
					var name_ = A2($elm$core$Maybe$withDefault, 'anon', name);
					var _v3 = A2($elm$core$Dict$get, name_, $author$project$Render$Export$LaTeX$blockDict);
					if (!_v3.$) {
						var f = _v3.a;
						return A3(
							f,
							settings,
							args,
							A2($author$project$Render$Export$LaTeX$exportExprList, settings, exprs_));
					} else {
						return A2(
							$author$project$Render$Export$LaTeX$environment,
							name_,
							A2($author$project$Render$Export$LaTeX$exportExprList, settings, exprs_));
					}
				}
			default:
				if (!content.$) {
					var str = content.a;
					_v5$16:
					while (true) {
						if (!name.$) {
							switch (name.a) {
								case 'math':
									var fix_ = function (str_) {
										return $author$project$Compiler$Util$transformLabel(
											A2(
												$elm$core$String$join,
												'\n',
												A2(
													$elm$core$List$filter,
													function (line) {
														return A2($elm$core$String$left, 2, line) !== '$$';
													},
													$elm$core$String$lines(str_))));
									};
									return A2(
										$elm$core$String$join,
										'\n',
										_List_fromArray(
											[
												'$$',
												fix_(str),
												'$$'
											]));
								case 'datatable':
									var renderRow = F3(
										function (rowNumber, widths_, rowOfCells) {
											return (!rowNumber) ? A3(
												$elm$core$String$replace,
												'_',
												' ',
												A2(
													$elm$core$String$join,
													' ',
													A3(
														$elm$core$List$map2,
														F2(
															function (cell, width) {
																return A3($elm$core$String$padRight, width, ' ', cell);
															}),
														rowOfCells,
														widths_))) : A2(
												$elm$core$String$join,
												' ',
												A3(
													$elm$core$List$map2,
													F2(
														function (cell, width) {
															return A3($elm$core$String$padRight, width, ' ', cell);
														}),
													rowOfCells,
													widths_));
										});
									var data = A2($author$project$Render$Data$prepareTable, 1, block);
									var renderedRows = A2(
										$elm$core$String$join,
										'\n',
										A2(
											$elm$core$List$indexedMap,
											function (rowNumber) {
												return A2(renderRow, rowNumber, data.d$);
											},
											data.eG));
									var _v6 = data.eO;
									if (_v6.$ === 1) {
										return A2(
											$elm$core$String$join,
											'\n',
											_List_fromArray(
												['\\begin{verbatim}', renderedRows, '\\end{verbatim}']));
									} else {
										var title = _v6.a;
										var separator = A2($elm$core$String$repeat, data.f_, '-');
										return A2(
											$elm$core$String$join,
											'\n',
											_List_fromArray(
												['\\begin{verbatim}', title, separator, renderedRows, '\\end{verbatim}']));
									}
								case 'equation':
									return A2(
										$elm$core$String$join,
										'\n',
										_List_fromArray(
											[
												'\\begin{equation}',
												$author$project$Compiler$Util$transformLabel(str),
												'\\end{equation}'
											]));
								case 'aligned':
									return A2(
										$elm$core$String$join,
										'\n',
										_List_fromArray(
											[
												'\\begin{align}',
												$author$project$Compiler$Util$transformLabel(str),
												'\\end{align}'
											]));
								case 'code':
									return function (s) {
										return '\\begin{verbatim}\n' + (s + '\n\\end{verbatim}');
									}(
										$author$project$Render$Export$LaTeX$fixChars(str));
								case 'tabular':
									return function (s) {
										return '\\begin{tabular}{' + (A2($elm$core$String$join, ' ', args) + ('}\n' + (s + '\n\\end{tabular}')));
									}(
										$author$project$Render$Export$LaTeX$fixChars(str));
								case 'verbatim':
									return function (s) {
										return '\\begin{verbatim}\n' + (s + '\n\\end{verbatim}');
									}(
										$author$project$Render$Export$LaTeX$fixChars(str));
								case 'verse':
									return function (s) {
										return '\\begin{verbatim}\n' + (s + '\n\\end{verbatim}');
									}(
										$author$project$Render$Export$LaTeX$fixChars(str));
								case 'load-files':
									return '';
								case 'mathmacros':
									return str;
								case 'texComment':
									return $author$project$Render$Export$LaTeX$texComment(
										$elm$core$String$lines(str));
								case 'textmacros':
									return $author$project$Compiler$TextMacro$exportTexMacros(str);
								case 'image':
									return A2($author$project$Render$Export$Image$exportBlock, settings, block);
								case 'quiver':
									var lines = A2(
										$elm$core$List$filter,
										function (line) {
											return line !== '';
										},
										$elm$core$String$lines(
											A2(
												$elm$core$String$join,
												'\n',
												A2(
													$elm$core$List$drop,
													1,
													A2($elm$core$String$split, '---', str)))));
									var line1 = $elm$core$String$trim(
										A2(
											$elm$core$Maybe$withDefault,
											'%%',
											$elm$core$List$head(lines)));
									var line1b = A2($elm$core$String$contains, '\\hide{', line1) ? function (x) {
										return '%% ' + x;
									}(
										A2(
											$elm$core$String$dropRight,
											1,
											A3($elm$core$String$replace, '\\hide{', '', line1))) : line1;
									var data = A2(
										$elm$core$String$join,
										'\n',
										function (x) {
											return A2(
												$elm$core$List$cons,
												line1b,
												A2(
													$elm$core$List$cons,
													'\\[\\begin{tikzcd}',
													_Utils_ap(
														x,
														_List_fromArray(
															['\\end{tikzcd}\\]']))));
										}(
											A2(
												$elm$core$List$filter,
												function (line) {
													return !A2($elm$core$String$contains, '\\end{tikzcd}\\]', line);
												},
												A2(
													$elm$core$List$filter,
													function (line) {
														return !A2($elm$core$String$contains, '\\[\\begin{tikzcd}', line);
													},
													A2($elm$core$List$drop, 1, lines)))));
									return data;
								case 'tikz':
									var renderedAsLaTeX = A2($elm$core$String$contains, '\\hide{', str);
									var data = A2(
										$author$project$Render$Export$LaTeX$addTikzPictureClosing,
										renderedAsLaTeX,
										A2(
											$elm$core$String$join,
											'\n',
											A2(
												$elm$core$List$map,
												A2($elm$core$Basics$composeR, $author$project$Render$Export$LaTeX$hideToPercentComment, $author$project$Render$Export$LaTeX$commentBlankLine),
												$elm$core$String$lines(
													A2(
														$elm$core$String$join,
														'',
														A2(
															$elm$core$List$drop,
															1,
															A2($elm$core$String$split, '---', str)))))));
									return A2(
										$elm$core$String$join,
										'',
										_List_fromArray(
											['\\[\n', data, '\n\\]']));
								case 'docinfo':
									return '';
								default:
									break _v5$16;
							}
						} else {
							break _v5$16;
						}
					}
					return A2($elm$core$Maybe$withDefault, '??', name) + ': export of this block is unimplemented';
				} else {
					return '???(13)';
				}
		}
	});
var $author$project$Render$Export$LaTeX$exportTree = F2(
	function (settings, tree) {
		var _v0 = $zwilias$elm_rosetree$Tree$children(tree);
		if (!_v0.b) {
			return A2(
				$author$project$Render$Export$LaTeX$exportBlock,
				settings,
				$zwilias$elm_rosetree$Tree$label(tree));
		} else {
			var children = _v0;
			var root = $elm$core$String$lines(
				A2(
					$author$project$Render$Export$LaTeX$exportBlock,
					settings,
					$zwilias$elm_rosetree$Tree$label(tree)));
			var renderedChildren = $elm$core$List$concat(
				A2(
					$elm$core$List$map,
					$elm$core$String$lines,
					A2(
						$elm$core$List$map,
						$author$project$Render$Export$LaTeX$exportTree(settings),
						children)));
			var _v1 = $elm_community$list_extra$List$Extra$unconsLast(root);
			if (_v1.$ === 1) {
				return '';
			} else {
				var _v2 = _v1.a;
				var lastLine = _v2.a;
				var firstLines = _v2.b;
				var _v3 = firstLines;
				var _v4 = renderedChildren;
				var _v5 = lastLine;
				return A2(
					$elm$core$String$join,
					'\n',
					_Utils_ap(
						firstLines,
						_Utils_ap(
							renderedChildren,
							_List_fromArray(
								[lastLine]))));
			}
		}
	});
var $author$project$Compiler$ASTTools$labelName = function (tree) {
	var _v0 = $zwilias$elm_rosetree$Tree$label(tree);
	var name = _v0.fA;
	return name;
};
var $author$project$Compiler$ASTTools$filterForestOnLabelNames = F2(
	function (predicate, forest) {
		return A2(
			$elm$core$List$filter,
			function (tree) {
				return predicate(
					$author$project$Compiler$ASTTools$labelName(tree));
			},
			forest);
	});
var $zwilias$elm_rosetree$Tree$map = F2(
	function (f, t) {
		return A3(
			$zwilias$elm_rosetree$Tree$mapAccumulate,
			F2(
				function (_v0, e) {
					return _Utils_Tuple2(
						0,
						f(e));
				}),
			0,
			t).b;
	});
var $author$project$Parser$Forest$map = A2($elm$core$Basics$composeL, $elm$core$List$map, $zwilias$elm_rosetree$Tree$map);
var $author$project$Render$Export$LaTeX$oneOrTwo = function (mInt) {
	if (mInt.$ === 1) {
		return 1;
	} else {
		return 2;
	}
};
var $author$project$Render$Export$LaTeX$shiftSection = F2(
	function (delta, block) {
		var data = block;
		if (_Utils_eq(
			data.fA,
			$elm$core$Maybe$Just('section'))) {
			var _v0 = data.gn;
			if (_v0.b) {
				var level = _v0.a;
				var rest = _v0.b;
				var _v1 = $elm$core$String$toInt(level);
				if (_v1.$ === 1) {
					return block;
				} else {
					var kk = _v1.a;
					var newLevel = $elm$core$String$fromInt(kk + delta);
					return _Utils_update(
						data,
						{
							gn: A2($elm$core$List$cons, newLevel, rest)
						});
				}
			} else {
				return block;
			}
		} else {
			return block;
		}
	});
var $author$project$Render$Export$LaTeX$rawExport = F2(
	function (settings, ast) {
		return A2(
			$elm$core$String$join,
			'\n\n',
			A2(
				$elm$core$List$map,
				$author$project$Render$Export$LaTeX$exportTree(settings),
				A2(
					$author$project$Parser$Forest$map,
					$author$project$Render$Export$LaTeX$shiftSection(
						$author$project$Render$Export$LaTeX$oneOrTwo(
							$author$project$Render$Export$LaTeX$counterValue(ast))),
					$author$project$Render$Export$LaTeX$encloseLists(
						A2(
							$author$project$Parser$Forest$map,
							$author$project$Parser$Block$condenseUrls,
							A2(
								$author$project$Compiler$ASTTools$filterForestOnLabelNames,
								function (name) {
									return !_Utils_eq(
										name,
										$elm$core$Maybe$Just('runninghead'));
								},
								ast))))));
	});
var $author$project$Render$Export$LaTeX$tableofcontents = function (rawBlockNames_) {
	return ($elm$core$List$length(
		A2(
			$elm$core$List$filter,
			function (name) {
				return name === 'section';
			},
			rawBlockNames_)) > 1) ? '\n\n\\tableofcontents' : '';
};
var $author$project$Render$Export$LaTeX$zeroOrSome = function (mInt) {
	if (mInt.$ === 1) {
		return 0;
	} else {
		var k = mInt.a;
		return k;
	}
};
var $author$project$Render$Export$LaTeX$export = F3(
	function (currentTime, settings_, ast) {
		var textMacroDefinitions = A2($author$project$Compiler$ASTTools$getVerbatimBlockValue, 'textmacros', ast);
		var rawBlockNames = $author$project$Compiler$ASTTools$rawBlockNames(ast);
		var macrosInTextMacroDefinitions = $author$project$Compiler$TextMacro$getTextMacroFunctionNames(textMacroDefinitions);
		var expressionNames = _Utils_ap(
			$author$project$Compiler$ASTTools$expressionNames(ast),
			macrosInTextMacroDefinitions);
		return A2($author$project$Render$Export$Preamble$make, rawBlockNames, expressionNames) + (A2($author$project$Render$Export$LaTeX$frontMatter, currentTime, ast) + (('\n\\setcounter{section}{' + ($elm$core$String$fromInt(
			$author$project$Render$Export$LaTeX$zeroOrSome(
				$author$project$Render$Export$LaTeX$counterValue(ast))) + '}\n')) + ($author$project$Render$Export$LaTeX$tableofcontents(rawBlockNames) + ('\n\n' + (A2($author$project$Render$Export$LaTeX$rawExport, settings_, ast) + '\n\n\\end{document}\n')))));
	});
var $author$project$Scripta$API$prepareContentForExport = F3(
	function (currentTime, settings, syntaxTree) {
		var contentForExport = A3($author$project$Render$Export$LaTeX$export, currentTime, settings, syntaxTree);
		return contentForExport;
	});
var $author$project$PDF$ChangePrintingState = function (a) {
	return {$: 0, a: a};
};
var $author$project$PDF$GotPdfLink = function (a) {
	return {$: 2, a: a};
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(0),
			pairs));
};
var $author$project$Scripta$API$getBlockNames = function (syntaxTree) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2(
			$elm$core$List$map,
			$author$project$Parser$Block$getName,
			$elm$core$List$concat(
				A2($elm$core$List$map, $zwilias$elm_rosetree$Tree$flatten, syntaxTree))));
};
var $author$project$Scripta$API$packageDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('quiver', 'quiver.sty')
		]));
var $author$project$Scripta$API$packageNames = function (syntaxTree) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2(
			$elm$core$List$map,
			function (name) {
				return A2($elm$core$Dict$get, name, $author$project$Scripta$API$packageDict);
			},
			$author$project$Scripta$API$getBlockNames(syntaxTree)));
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Scripta$API$encodeForPDF = F3(
	function (currentTime, settings, forest) {
		var packages = $author$project$Scripta$API$packageNames(forest);
		var imageUrls = $author$project$Scripta$API$getImageUrls(forest);
		var fileName = $author$project$Scripta$API$fileNameForExport(forest);
		var contentForExport = A3($author$project$Scripta$API$prepareContentForExport, currentTime, settings, forest);
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'id',
					$elm$json$Json$Encode$string(fileName)),
					_Utils_Tuple2(
					'content',
					$elm$json$Json$Encode$string(contentForExport)),
					_Utils_Tuple2(
					'urlList',
					A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, imageUrls)),
					_Utils_Tuple2(
					'packageList',
					A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, packages))
				]));
	});
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 2};
var $elm$http$Http$Receiving = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$Timeout_ = {$: 1};
var $elm$core$Maybe$isJust = function (maybe) {
	if (!maybe.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === -1) && (dict.d.$ === -1)) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === -1) && (!left.a)) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === -1) && (right.a === 1)) {
					if (right.d.$ === -1) {
						if (right.d.a === 1) {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === -1) && (dict.d.$ === -1)) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor === 1) {
			if ((lLeft.$ === -1) && (!lLeft.a)) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === -1) {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === -1) && (left.a === 1)) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === -1) && (!lLeft.a)) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === -1) {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === -1) {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === -1) {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (!_v0.$) {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 4, a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 3, a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$NetworkError = {$: 2};
var $elm$http$Http$Timeout = {$: 1};
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (!result.$) {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 0:
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 1:
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 2:
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 3:
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.ic));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectString = function (toMsg) {
	return A2(
		$elm$http$Http$expectStringResponse,
		toMsg,
		$elm$http$Http$resolve($elm$core$Result$Ok));
};
var $elm$http$Http$Header = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Header;
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $author$project$PDF$pdfServUrl = 'https://pdfServ.app/pdf/';
var $elm$http$Http$Request = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {ce: reqs, cm: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (!cmd.$) {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 1) {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.eP;
							if (_v4.$ === 1) {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.ce));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (!_v0.$) {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.cm)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (!cmd.$) {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					gj: r.gj,
					aS: r.aS,
					d7: A2(_Http_mapExpect, func, r.d7),
					ed: r.ed,
					er: r.er,
					eM: r.eM,
					eP: r.eP,
					f1: r.f1
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{gj: false, aS: r.aS, d7: r.d7, ed: r.ed, er: r.er, eM: r.eM, eP: r.eP, f1: r.f1}));
};
var $author$project$PDF$pdfCmd = F3(
	function (currentTime, settings, editRecord) {
		return $elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$elm$http$Http$request(
					{
						aS: $elm$http$Http$jsonBody(
							A3($author$project$Scripta$API$encodeForPDF, currentTime, settings, editRecord.eQ)),
						d7: $elm$http$Http$expectString($author$project$PDF$GotPdfLink),
						ed: _List_fromArray(
							[
								A2($elm$http$Http$header, 'Content-Type', 'application/json')
							]),
						er: 'POST',
						eM: $elm$core$Maybe$Nothing,
						eP: $elm$core$Maybe$Nothing,
						f1: $author$project$PDF$pdfServUrl
					})
				]));
	});
var $elm$core$Process$sleep = _Process_sleep;
var $author$project$PDF$printCmd = F3(
	function (currentTime, settings, forest) {
		return $elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A2(
					$elm$core$Task$perform,
					$elm$core$Basics$always(
						$author$project$PDF$ChangePrintingState(1)),
					$elm$core$Process$sleep(30)),
					A3($author$project$PDF$pdfCmd, currentTime, settings, forest)
				]));
	});
var $author$project$PDF$GotTarFile = function (a) {
	return {$: 3, a: a};
};
var $author$project$PDF$encodeForPDF = F4(
	function (id, content, urlList, packageNames) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'id',
					$elm$json$Json$Encode$string(id)),
					_Utils_Tuple2(
					'content',
					$elm$json$Json$Encode$string(content)),
					_Utils_Tuple2(
					'urlList',
					A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, urlList)),
					_Utils_Tuple2(
					'packageList',
					A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, _List_Nil))
				]));
	});
var $author$project$PDF$tarArchiveUrl = 'https://pdfServ.app/tar/';
var $author$project$PDF$tarCmd = F3(
	function (currentTime, settings, editRecord) {
		var packageNames = $author$project$Scripta$API$packageNames(editRecord.eQ);
		var imageUrls = $author$project$Scripta$API$getImageUrls(editRecord.eQ);
		var fileName = $author$project$Scripta$API$fileNameForExport(editRecord.eQ);
		var contentForExport = A3($author$project$Scripta$API$prepareContentForExport, currentTime, settings, editRecord.eQ);
		return $elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$elm$http$Http$request(
					{
						aS: $elm$http$Http$jsonBody(
							A4($author$project$PDF$encodeForPDF, fileName, contentForExport, imageUrls, packageNames)),
						d7: $elm$http$Http$expectString($author$project$PDF$GotTarFile),
						ed: _List_fromArray(
							[
								A2($elm$http$Http$header, 'Content-Type', 'application/json')
							]),
						er: 'POST',
						eM: $elm$core$Maybe$Nothing,
						eP: $elm$core$Maybe$Nothing,
						f1: $author$project$PDF$tarArchiveUrl
					})
				]));
	});
var $author$project$Text$testFile = '\n\n\\title{Wave Packets and the Dispersion Relation}\n\n\\tags{jxxcarlson:wave-packets-dispersion, quantum-mechanics, system:startup, folder:krakow}\n\n\n\\contents\n\n| banner\n\\link{Quantum Mechanics Notes https://scripta.io/s/jxxcarlson:quantum-mechanics-notes}\n\n| setcounter 2\n\n\\tags{system:startup jxxcarslon:wave-packets-dispersion}\n\n\\image{https://psurl.s3.amazonaws.com/images/jc/sinc2-bcbf.png  caption:Wave packet width:300}\n\n\\section{Introduction}\n\nAs we have seen with the sinc packet, wave packets can be localized in space.  A key feature of such packets is their \\term{group velocity} $v_g$.\n\n\n\nThis is the velocity which which the "body" of the wave packet travels.  Now a wave packet is synthesized by superposing many plane waves, so the natural question is how is the group velocity of the packet related to the phase velocities of its constituent plane waves.  We will answer this first in the simplest possible situation -- a superposition of two sine waves.  Next, we will reconsider the case of the sinc packet.  Finally, we will study a more realistic approximation to actual wave packets which gives insight into the manner and speed with which wave packets change shape as they evolve in time.  We end by applying this to an electron in a thought experiment in which it has been momentarily confned to an atom-size box -- about one Angstrom, or\n$10^{-10} \\text{ meter}$.\n\n\n\n\\section{A two-frequency packet: beats!!!!}\n\n\\image{https://psurl.s3.amazonaws.com/images/jc/beats-eca1.png width:300 caption: Two-frequency beats}\n\nConsider a wave\n$\\psi = \\psi_1 + \\psi_2$ which is the sum of two terms with slightly different frequencies.  If the waves are sound waves, then then what one will hear is a pitch that corresponding to the average of the two frequencies modulated in such a way that the volume goes up and down at a frequency corresponding to their difference.\n\nLet us analyze this phenomenon mathematically, setting\n\n\n\n\\begin{equation}\n\\psi_1(x,t)  = \\cos((k - \\Delta k/2)x - (\\omega - \\Delta \\omega/2)t)\n\\end{equation}\n\nand\n\n\\begin{equation}\n\\psi_2(x,t)  = \\cos((k + \\Delta k/2)x - (\\omega + \\Delta \\omega/2)t)\n\\end{equation}\n\nBy the addition law for the sine, this can be rewritten as\n\n\\begin{equation}\n\\psi(x,t) = 2\\sin(kx - \\omega t)\\sin((\\Delta k)x - (\\Delta \\omega)t)\n\\end{equation}\n\n\nThe resultant wave -- the sum -- consists of of a high-frequency sine wave oscillating according to the average of the component wave numbers and angular frequencies, modulated by a cosine factor that oscillates according to the difference of the wave numbers and the angular frequencies, respectively.  The velocity associated to the high frequency factor is\n\n\\begin{equation}\nv_{phase} = \\frac{\\omega}{k},\n\\end{equation}\n\nwhereas the velocity associated with the low-frequency factor is\n\n\\begin{equation}\nv_{group} = \\frac{\\Delta \\omega}{\\Delta k}\n\\end{equation}\n\nThis is the simplest situation in which one observes the phenomenon of the group velocity.  Take a look at this \\href{https://galileo.phys.virginia.edu/classes/109N/more_stuff/Applets/wavepacket/wavepacket.html}{animation}.\n\n\n\\section{Step function approximation}\n\nWe will now find an an approximation to\n\n\\begin{equation}\n\\psi(x,t) = \\int_{-\\infty}^\\infty a(k) e^{i(kx - \\omega(k)t)} dk\n\\end{equation}\n\nunder the assumption that $a(k)$ is nearly constant over an interval from $k_0 -\\Delta k/2$ to $k_0 + \\Delta k/2$ and that outside of that interval it approaches zero at a rapid rate.  In that case the Fourier integral is approximated by\n\n\\begin{equation}\n\\int_{k_0 - \\Delta k/2}^{k_0 + \\Delta k/2}  a(k_0)e^{i((k_0 + (k - k_0)x - (\\omega_0t + \\omega_0\'(k - k_0)t))}dk,\n\\end{equation}\n\nwhere $\\omega_0 = \\omega(k_0)$ and $\\omega_0\' = \\omega\'(k_0)$.\nThis integral can be written as a product $F(x,t)S(x,t)$, where the first factor is "fast" and the second is "slow."  The fast factor is just\n\n\\begin{equation}\nF(x,t) = a(k_0)e^{ i(k_0x - \\omega(k_0)t) }\n\\end{equation}\n\nIt travels with velocity $v_{phase} = \\omega(k_0)/k_0$.  Setting $k; = k- k_0$, the slow factor is\n\n\\begin{equation}\nS(x,t) = \\int_{-\\Delta k/2}^{\\Delta k/2} e^{ik\'\\left(x - \\omega\'(k_0)t\\right)} dk\',\n\\end{equation}\n\nThe slow factor be evaluated explicitly:\n\n\\begin{equation}\nI = \\int_{-\\Delta k/2}^{\\Delta k/2} e^{ik\'u} dk\' = \\frac{1}{iu} e^{ik\'u}\\Big\\vert_{k\' = - \\Delta k/2}^{k\' = +\\Delta k/2}.\n\\end{equation}\n\nWe find that\n\n\\begin{equation}\nI = \\Delta k\\thinspace \\text{sinc}\\frac{\\Delta k}{2}u\n\\end{equation}\n\nwhere $\\text{sinc } x = (\\sin x )/x$.  Thus the slow factor is\n\n\\begin{equation}\nS(x,t) = \\Delta k\\, \\text{sinc}(  (\\Delta k/2)(x - \\omega\'(k_0)t)  )\n\\end{equation}\n\n\nPutting this all together, we have\n\n\\begin{equation}\n\\psi(x,t) \\sim a(k_0)\\Delta k_0\\, e^{i(k_0x - \\omega(k_0)t)}\\text{sinc}(  (\\Delta k/2)(x - \\omega\'(k_0)t)  )\n\\end{equation}\n\nThus the body of the sinc packet moves steadily to the right at velocity $v_{group} = \\omega\'(k_0)$\n\n\n\\section{Gaussian approximation}\n\nThe approximation used in the preceding section is good enough to capture and explain the group velocity of a wave packet.  However, it is not enough to explain how wave packets change shape as they evolve with time.  To understand this phenomenon, we begin with  an arbitrary packet\n\n\\begin{equation}\n\\psi(x,t) = \\int_{\\infty}^\\infty a(k) e^{i\\phi(k)}\\,dk,\n\\end{equation}\n\nwhere $\\phi(k) = kx - \\omega(k)t$.  We shall assume that the spectrum $a(k)$ is has a maximum at $k = k_0$ and decays fairly rapidly away from the maximum.  Thus we assume that the Gaussian function\n\n\\begin{equation}\na(k) = e^{ -(k-k_0)^2/ 4(\\Delta k)^2}\n\\end{equation}\n\nis a good approximation.  To analyze the Fourier integral\n\n\\begin{equation}\n\\psi(x,t) = \\int_{-\\infty}^{\\infty} e^{ -(k-k_0)^2/ 4(\\Delta k)^2} e^{i(kx - \\omega(k) t)},\n\\end{equation}\n\nwe expand $\\omega(k)$ in a Taylor series up to order two, so that\n\n\\begin{equation}\n\\phi(k) = k_0x + (k - k_0)x - \\omega_0t - \\frac{d\\omega}{dk}(k_0) t- \\frac{1}{2}\\frac{ d^2\\omega }{ dk^2 }(k_0)( k - k_0)^2 t\n\\end{equation}\n\nWriting $\\phi(k) = k_0x - \\omega_0t + \\phi_2(k,x,t)$, we find that\n\n\\begin{equation}\n\\psi(x,t) = e^{i(k_0x - \\omega_0 t)} \\int_{-\\infty}^{\\infty} e^{ -(k-k_0)^2/ 4(\\Delta k)^2} e^{i\\phi_2(k,x,t)}.\n\\end{equation}\n\nMake the change of variables $k - k_0 = 2\\Delta k u$, and write $\\phi_2(k,x,t) = Q(u,x,t)$, where $Q$ is a quadratic polynomial in $u$ of the form $au + b$. One finds that\n\n\\begin{equation}\na = -(1 + 2i\\alpha t  (\\Delta k)^2),\n\\end{equation}\n\nwhere\n\n\\begin{equation}\n\\alpha = \\frac{ d^2\\omega }{ dk^2 }(k_0)\n\\end{equation}\n\nOne also finds that\n\n\\begin{equation}\nb = 2i\\Delta k(x - v_g t),\n\\end{equation}\n\nwhere $v_g = d\\omega/dk$ is the group velocity.  The integral is a standard one, of the form\n\n\\begin{equation}\n\\int_{-\\infty}^\\infty e^{- au^2 + bu} = \\sqrt{\\frac{\\pi}{a}}\\; e^{ b^2/4a }.\n\\end{equation}\n\nUsing this integral  formula and the reciprocity $\\Delta x\\Delta k = 1/2$, which we may take as a definition of $\\Delta x$, we find, after some algebra, that\n\n\\begin{equation}\n\\psi(x,t) \\sim A e^{-B} \\,e^{i(k_0 - \\omega_0t)}\n,\n\\end{equation}\n\nwhere\n\n\\begin{equation}\nA = 2\\Delta k \\sqrt{\\frac{\\pi}{1 + 2i\\alpha \\Delta k^2 t}}\n\\end{equation}\n\nand\n\n\\begin{equation}\nB = \\frac{( x-v_gt )^2 (1 - 2i\\alpha \\Delta k^2 t)}{4\\sigma^2}\n\\end{equation}\n\nwith\n\n\\begin{equation}\n\\sigma^2 = \\Delta x^2 + \\frac{\\alpha^2 t^2}{4 \\Delta x^2}\n\\end{equation}\n\nLook at the expression $B$. The first factor in the numerator controls the motion of motion of the packet and is what guides it to move with group velocity $v_g$.  The second factor is generally a small real term and a much larger imaginary one, and so only affects the phase.  The denominator controls the width of the packet, and as we can see, it increases with $t$ so long as $\\alpha$, the second derivative of $\\omega(k)$ at the center of the packet, is nonzero.\n\n\\section{The electron!}\n\nLet us apply what we have learned to an electron which has been confined to a box about the size of an atom, about $10^{-10}$ meters. That is, $\\Delta x \\sim 10^{-10}\\text{ m}$.  The extent of its wave packet will double when\n\n\\begin{equation}\n\\frac{\\alpha^2 t^2}{4 \\Delta x^2} \\sim \\Delta x^2,\n\\end{equation}\n\nthat is, after a time\n\n\\begin{equation}\nt_{double} \\sim \\frac{\\Delta x^2}{\\alpha}\n\\end{equation}\n\nThe dispersion relation for a free particle is\n\n\\begin{equation}\n\\omega(k) = \\hbar \\frac{k^2}{2m},\n\\end{equation}\n\nso that $\\alpha = \\hbar/m$.  Then\n\n\\begin{equation}\nt_{double} \\sim \\frac{m}{h}\\, \\Delta x^2 .\n\\end{equation}\n\nIn the case of our electron, we find that $t_{double} \\sim 10^{-16}\\,\\text{sec}$.\n\n\\section{ Code}\n\n\\begin{code}\n  # jupyter/python\n\n\n  matplotlib inline\n\n  # code for sinc(x)\n  import numpy as np\n  import matplotlib.pyplot as plt\n\n  # sinc function\n  x = np.arange(-30, 30, 0.1);\n  y = np.sin(x)/x\n  plt.plot(x, y)\n\n  # beats\n  x = np.arange(-50, 250, 0.1);\n  y = np.cos(0.5*x) + np.sin(0.55*x)\n  plt.plot(x, y)\n\\end{code}\n\n\n\n\\section{References}\n\n\n\\bibitem{QM}\n\\link{Quantum Mechanics for Engineers: Wave Packets https://www.eng.fsu.edu/~dommelen/quantum/style_a/packets.html}\n\n\n\n\\bibitem{WP}\n\\link{Wave Packets, Harvard Physics https://users.physics.harvard.edu/~schwartz/15cFiles/Lecture11-WavePackets.pdf}\n\n\\bibitem{TE}\n\\link{Time evolution in QM - MIT https//ocw.mit.edu/courses/nuclear-engineering/22-02-introduction-to-applied-nuclear-physics-spring-2012/lecture-notes/MIT22_02S12_lec_ch6.pdf}\n\n\n';
var $author$project$Compiler$Differ$DiffRecord = F4(
	function (commonPrefix, commonSuffix, middleSegmentInSource, middleSegmentInTarget) {
		return {gI: commonPrefix, d0: commonSuffix, hq: middleSegmentInSource, fw: middleSegmentInTarget};
	});
var $author$project$Compiler$DifferForest$retreat = F3(
	function (last, remaining, diffRecord) {
		var n = $elm$core$List$length(diffRecord.gI);
		return _Utils_update(
			diffRecord,
			{
				gI: remaining,
				hq: A2($elm$core$List$cons, last, diffRecord.hq),
				fw: A2($elm$core$List$cons, last, diffRecord.fw)
			});
	});
var $author$project$Compiler$DifferForest$backwardClosure = F2(
	function (level, diffRecord) {
		backwardClosure:
		while (true) {
			var n = $elm$core$List$length(diffRecord.gI);
			var _v0 = $elm$core$List$head(diffRecord.fw);
			if (_v0.$ === 1) {
				return diffRecord;
			} else {
				var item = _v0.a;
				if (level(item) > 0) {
					var _v1 = $elm_community$list_extra$List$Extra$unconsLast(diffRecord.gI);
					if (_v1.$ === 1) {
						return diffRecord;
					} else {
						var _v2 = _v1.a;
						var last = _v2.a;
						var remaining = _v2.b;
						var $temp$level = level,
							$temp$diffRecord = A3($author$project$Compiler$DifferForest$retreat, last, remaining, diffRecord);
						level = $temp$level;
						diffRecord = $temp$diffRecord;
						continue backwardClosure;
					}
				} else {
					return diffRecord;
				}
			}
		}
	});
var $author$project$Compiler$DifferForest$commonPrefix = F3(
	function (eq, x, y) {
		if (_Utils_eq(x, _List_Nil)) {
			return _List_Nil;
		} else {
			if (_Utils_eq(y, _List_Nil)) {
				return _List_Nil;
			} else {
				var _v0 = _Utils_Tuple2(
					$elm$core$List$head(x),
					$elm$core$List$head(y));
				if ((!_v0.a.$) && (!_v0.b.$)) {
					var a = _v0.a.a;
					var b = _v0.b.a;
					return A2(eq, a, b) ? A2(
						$elm$core$List$cons,
						a,
						A3(
							$author$project$Compiler$DifferForest$commonPrefix,
							eq,
							A2($elm$core$List$drop, 1, x),
							A2($elm$core$List$drop, 1, y))) : _List_Nil;
				} else {
					return _List_Nil;
				}
			}
		}
	});
var $author$project$Compiler$DifferForest$commonSuffixAux = F4(
	function (eq, commonPrefixInSource, x, y) {
		var n = $elm$core$List$length(commonPrefixInSource);
		var xx = $elm$core$List$reverse(
			A2($elm$core$List$drop, n, x));
		var yy = $elm$core$List$reverse(
			A2($elm$core$List$drop, n, y));
		return $elm$core$List$reverse(
			A3($author$project$Compiler$DifferForest$commonPrefix, eq, xx, yy));
	});
var $author$project$Compiler$DifferForest$dropLast = F2(
	function (k, x) {
		return $elm$core$List$reverse(
			A2(
				$elm$core$List$drop,
				k,
				$elm$core$List$reverse(x)));
	});
var $author$project$Compiler$DifferForest$advance = F3(
	function (first, remaining, diffRecord) {
		var n = $elm$core$List$length(diffRecord.d0) + $elm$core$List$length(diffRecord.fw);
		return _Utils_update(
			diffRecord,
			{
				d0: remaining,
				hq: _Utils_ap(
					diffRecord.hq,
					_List_fromArray(
						[first])),
				fw: _Utils_ap(
					diffRecord.fw,
					_List_fromArray(
						[first]))
			});
	});
var $author$project$Compiler$DifferForest$forwardClosure = F2(
	function (level, diffRecord) {
		forwardClosure:
		while (true) {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(diffRecord.d0);
			if (_v0.$ === 1) {
				return diffRecord;
			} else {
				var _v1 = _v0.a;
				var first = _v1.a;
				var remaining = _v1.b;
				if (!level(first)) {
					return diffRecord;
				} else {
					var $temp$level = level,
						$temp$diffRecord = A3($author$project$Compiler$DifferForest$advance, first, remaining, diffRecord);
					level = $temp$level;
					diffRecord = $temp$diffRecord;
					continue forwardClosure;
				}
			}
		}
	});
var $author$project$Compiler$DifferForest$diff = F4(
	function (eq, level, u, v) {
		var a = A3($author$project$Compiler$DifferForest$commonPrefix, eq, u, v);
		var b_ = A4($author$project$Compiler$DifferForest$commonSuffixAux, eq, a, u, v);
		var lb = $elm$core$List$length(b_);
		var la = $elm$core$List$length(a);
		var x = A2(
			$author$project$Compiler$DifferForest$dropLast,
			lb,
			A2($elm$core$List$drop, la, u));
		var y = A2(
			$author$project$Compiler$DifferForest$dropLast,
			lb,
			A2($elm$core$List$drop, la, v));
		var b = A2(
			$elm$core$List$drop,
			$elm$core$List$length(a) + $elm$core$List$length(y),
			v);
		return A2(
			$author$project$Compiler$DifferForest$forwardClosure,
			level,
			A2(
				$author$project$Compiler$DifferForest$backwardClosure,
				level,
				A4($author$project$Compiler$Differ$DiffRecord, a, b, x, y)));
	});
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $author$project$Compiler$AbstractDifferentialParser$takeLast = F2(
	function (k, x) {
		return $elm$core$List$reverse(
			A2(
				$elm$core$List$take,
				k,
				$elm$core$List$reverse(x)));
	});
var $author$project$Compiler$AbstractDifferentialParser$differentialParser = F6(
	function (lineNumber, pLineNumber, pChangeLineNumber, parser, diffRecord, editRecord) {
		var middleSegmentParsed = A2($elm$core$List$map, parser, diffRecord.fw);
		var leadingLineIndexOfCommonSuffix = A2(
			$elm$core$Maybe$map,
			lineNumber,
			$elm$core$List$head(diffRecord.d0));
		var it = $elm$core$List$length(diffRecord.d0);
		var terminalSegmentParsed_ = A2($author$project$Compiler$AbstractDifferentialParser$takeLast, it, editRecord.cX);
		var leadingLineIndexOfCommonSuffixParsed = A2(
			$elm$core$Maybe$map,
			pLineNumber,
			$elm$core$List$head(terminalSegmentParsed_));
		var ii = $elm$core$List$length(diffRecord.gI);
		var initialSegmentParsed = A2($elm$core$List$take, ii, editRecord.cX);
		var delta = A3($elm$core$Maybe$map2, $elm$core$Basics$sub, leadingLineIndexOfCommonSuffix, leadingLineIndexOfCommonSuffixParsed);
		var newTerminalSegmentParsed = function () {
			if (delta.$ === 1) {
				return terminalSegmentParsed_;
			} else {
				var delta_ = delta.a;
				return A2(
					$elm$core$List$map,
					pChangeLineNumber(delta_),
					terminalSegmentParsed_);
			}
		}();
		var leadingLineIndexOfNewTerminaSegmentParsed = A2(
			$elm$core$Maybe$map,
			pLineNumber,
			$elm$core$List$head(newTerminalSegmentParsed));
		return _Utils_ap(
			initialSegmentParsed,
			_Utils_ap(middleSegmentParsed, newTerminalSegmentParsed));
	});
var $author$project$Compiler$AbstractDifferentialParser$update = F3(
	function (f, sourceText, editRecord) {
		var renumber = F2(
			function (lineNumbers, chunks) {
				return A3($elm$core$List$map2, f.fQ, lineNumbers, chunks);
			});
		var newChunks = f.d_(sourceText);
		var newLineNumbers = A2($elm$core$List$map, f.eo, newChunks);
		var renumberIf = F2(
			function (dr, chunks) {
				return (_Utils_eq(dr.hq, _List_Nil) && (_Utils_eq(dr.fw, _List_Nil) && _Utils_eq(dr.d0, _List_Nil))) ? A2(renumber, newLineNumbers, chunks) : chunks;
			});
		var diffRecord = f.fa(
			A4($author$project$Compiler$DifferForest$diff, f.e6, f.e7, editRecord.di, newChunks));
		var parsed_ = A2(
			renumberIf,
			diffRecord,
			A6($author$project$Compiler$AbstractDifferentialParser$differentialParser, f.eo, f.fG, f.e4, f.dZ, diffRecord, editRecord));
		var tree_ = f.d8(parsed_);
		var _v0 = A2(f.dQ, editRecord.cP, tree_);
		var newAccumulator = _v0.a;
		var tree = _v0.b;
		return {
			dR: newAccumulator,
			di: newChunks,
			cP: editRecord.cP,
			dC: editRecord.dC,
			eq: f.ea(tree),
			cX: parsed_,
			eQ: tree
		};
	});
var $author$project$Compiler$DifferentialParser$update = F2(
	function (editRecord, text) {
		return A3(
			$author$project$Compiler$AbstractDifferentialParser$update,
			$author$project$Compiler$DifferentialParser$updateFunctions(editRecord.dC),
			text + '\n',
			editRecord);
	});
var $author$project$Scripta$API$update = $author$project$Compiler$DifferentialParser$update;
var $author$project$Text$xMarkdown = '\n\n| title\nXMarkdown Visual Check\n\n| contents\n\n\n\n\n@[tags check]\n\n\n# Typography\n\n\nSome *italic* and  **bold** text.  @[blue Blue stuff.]\n(Cool, no!)\n\n\n# Link\n\n[New York Times](https://nytimes.com)\n\n# Image\n\n\n\n![Bird](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRhXplhW5-ydbNOJiJe1fp7oAM9xjRwX28ung&usqp=CAU)\n\n# Mathematics\n\nThis is a formula: $a^2 + b^2 = c^2$.\n\nAnd this is a displayed formulat\n\n$$\n\\int_0^1 x^n dx = \\frac{1}{n+1}\n$$\n\ndone in the usual TeX way:\n\n```\n $$\n\\int_0^1 x^n dx = \\frac{1}{n+1}\n$$\n```\n\n## Numbered formula\n\n```\n|| equation\n\\int_0^1 x^n dx = \\frac{1}{n+1}\n```\n\n|| equation\n\\int_0^1 x^n dx = \\frac{1}{n+1}\n\n## Aligned equations\n\n```\n|| aligned\n\\label{foo}\na &= b + 1 \\\\\nc &= a^2 \\\\\n &= b^2 + 2b + 1 \\\\\n```\n\n|| aligned\n\\label{foo}\na &= b + 1 \\\\\nc &= a^2 \\\\\n &= b^2 + 2b + 1 \\\\\n\n\n## Theorems\n\n|| code\n| theorem\nThere are infinitely many primes $p \\equiv 1\\ mod\\ 4$. Isn\'t that nice?\n\n\n| theorem\nThere are infinitely many primes $p \\equiv 1\\ mod\\ 4$. Isn\'t that nice?\n\n\n# Code\n\nSome inline code `a[0] := a[0] + 1`.  A block of code:\n\n```\n # Multiplication table\n  for x in range(1, 11):\n      for y in range(1, 11):\n          print(\'%d ** %d = %d\' % (x, y, x**y)\n```\n\nHere is the source text:\n\n|| code\n```\n# Multiplication table\n  for x in range(1, 11):\n      for y in range(1, 11):\n          print(\'%d ** %d = %d\' % (x, y, x**y)\n```\n\n\n# Bulleted Lists\n\nLevels in the list are controlled by indentation.\n\n- One\n\n- Two\n\n  - Alpha\n\n  - Beta\n\n    - Ho ho ho!\n\n    - Ha ha !\n\n\n# Numbered Lists\n\nNumbered lists are constructed in the same way,\nbut with a  period `.` instead of a hyphen `-` to start a new item.\n\n. One\n\n. Two\n\n  . Alpha\n\n  . Beta\n\n    . Ho ho ho!\n\n    . Ha ha!\n';
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 14:
				var newTime = msg.a;
				var ticks = (model.ax > 10) ? 0 : (model.ax + 1);
				var tarFileState = ((model.a_ === 1) && (model.ax > 2)) ? 2 : (((model.a_ === 2) && (model.ax > 10)) ? 0 : model.a_);
				var printingState = ((model.av === 1) && (model.ax > 2)) ? 2 : (((model.av === 2) && (model.ax > 10)) ? 0 : model.av);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bQ: newTime, av: printingState, a_: tarFileState, ax: ticks}),
					$elm$core$Platform$Cmd$none);
			case 1:
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cA: model.cA + 1,
							U: A2($author$project$Scripta$API$update, model.U, str),
							aX: str
						}),
					$elm$core$Platform$Cmd$none);
			case 5:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cA: model.cA + 1,
							aE: 1,
							U: A3($author$project$Scripta$API$init, $elm$core$Dict$empty, 1, $author$project$Text$testFile),
							aX: $author$project$Text$testFile,
							fs: 1
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Main$jumpToTop('scripta-output'),
								$author$project$Main$jumpToTop('input-text')
							])));
			case 4:
				var lang = msg.a;
				var docText = function () {
					switch (lang) {
						case 0:
							return $author$project$Text$l0Demo;
						case 1:
							return $author$project$Text$microLaTeXDemo;
						case 3:
							return $author$project$Text$xMarkdown;
						default:
							return '';
					}
				}();
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cA: model.cA + 1,
							aE: 2,
							U: A3($author$project$Scripta$API$init, $elm$core$Dict$empty, lang, docText),
							aX: docText,
							fs: lang
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Main$jumpToTop('scripta-output'),
								$author$project$Main$jumpToTop('input-text')
							])));
			case 6:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cA: model.cA + 1,
							aE: 0,
							U: A3($author$project$Scripta$API$init, $elm$core$Dict$empty, 0, $author$project$Text$info),
							aX: $author$project$Text$info,
							fs: 0
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Main$jumpToTop('scripta-output'),
								$author$project$Main$jumpToTop('input-text')
							])));
			case 11:
				var defaultSettings_ = $author$project$Scripta$API$defaultSettings;
				var exportSettings_ = _Utils_update(
					defaultSettings_,
					{ek: true});
				if (_Utils_eq(
					$author$project$Scripta$API$getImageUrls(model.U.eQ),
					_List_Nil)) {
					var fileName = $author$project$Scripta$API$fileNameForExport(model.U.eQ);
					var defaultSettings = $author$project$Scripta$API$defaultSettings;
					var exportSettings = _Utils_update(
						defaultSettings,
						{ek: true});
					var exportText = A3($author$project$Scripta$API$prepareContentForExport, model.bQ, exportSettings, model.U.eQ);
					return _Utils_Tuple2(
						model,
						A2($author$project$Main$download, fileName, exportText));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{aY: 'requesting TAR file', a_: 1, ax: 0}),
						A2(
							$elm$core$Platform$Cmd$map,
							$author$project$Main$PDF,
							A3($author$project$PDF$tarCmd, model.bQ, exportSettings_, model.U)));
				}
			case 3:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 9:
				var result = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aY: 'Got PDF Link', av: 2}),
					$elm$core$Platform$Cmd$none);
			case 12:
				var printingState = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aY: 'Changing printing state', av: printingState}),
					$elm$core$Platform$Cmd$none);
			case 8:
				var defaultSettings = $author$project$Scripta$API$defaultSettings;
				var exportSettings = _Utils_update(
					defaultSettings,
					{ek: true});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aY: 'requesting PDF', av: 1, ax: 0}),
					A2(
						$elm$core$Platform$Cmd$map,
						$author$project$Main$PDF,
						A3($author$project$PDF$printCmd, model.bQ, exportSettings, model.U)));
			case 10:
				var result = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aY: 'Got TarFile', av: 2}),
					$elm$core$Platform$Cmd$none);
			case 13:
				var tarFileState = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aY: 'Changing tar file state', a_: tarFileState}),
					$elm$core$Platform$Cmd$none);
			case 2:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 4, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $author$project$Main$bgGray = function (g) {
	return $mdgriffith$elm_ui$Element$Background$color(
		A3($mdgriffith$elm_ui$Element$rgb, g, g, g));
};
var $mdgriffith$elm_ui$Internal$Model$FocusStyleOption = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Element$focusStyle = $mdgriffith$elm_ui$Internal$Model$FocusStyleOption;
var $mdgriffith$elm_ui$Internal$Style$classes = {f9: 'a', dS: 'atv', gb: 'ab', gc: 'cx', gd: 'cy', ge: 'acb', gf: 'accx', gg: 'accy', gh: 'acr', e_: 'al', e$: 'ar', gi: 'at', dT: 'ah', dU: 'av', gl: 's', gr: 'bh', gs: 'b', gv: 'w7', gx: 'bd', gy: 'bdt', df: 'bn', gz: 'bs', dh: 'cpe', gE: 'cp', gF: 'cpx', gG: 'cpy', bL: 'c', dk: 'ctr', dl: 'cb', dm: 'ccx', a7: 'ccy', cy: 'cl', dn: 'cr', gK: 'ct', gL: 'cptr', gM: 'ctxt', gZ: 'fcs', ff: 'focus-within', g_: 'fs', g$: 'g', ec: 'hbh', ee: 'hc', fk: 'he', ef: 'hf', fl: 'hfp', g5: 'hv', g8: 'ic', ha: 'fr', dz: 'lbl', he: 'iml', hf: 'imlf', hg: 'imlp', hh: 'implw', hi: 'it', hm: 'i', ft: 'lnk', b1: 'nb', fB: 'notxt', hD: 'ol', hE: 'or', bw: 'oq', hJ: 'oh', fH: 'pg', fI: 'p', hK: 'ppe', hT: 'ui', cg: 'r', hY: 'sb', hZ: 'sbx', h_: 'sby', h$: 'sbt', h4: 'e', h6: 'cap', h8: 'sev', $8: 'sk', ik: 't', il: 'tc', im: 'w8', $9: 'w2', io: 'w9', ip: 'tj', dN: 'tja', iq: 'tl', ir: 'w3', it: 'w5', iu: 'w4', iv: 'tr', iw: 'w6', ix: 'w1', iy: 'tun', f0: 'ts', bB: 'clr', iP: 'u', eT: 'wc', f5: 'we', eU: 'wf', f6: 'wfp', eW: 'wrp'};
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 1, a: a};
};
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsEl = 2;
var $mdgriffith$elm_ui$Internal$Model$asEl = 2;
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.gl + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.bL);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.gl + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.g$);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.gl + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fH);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.gl + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fI);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.gl + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cg);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.gl + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.h4);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 1:
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 2:
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 3:
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 4:
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = 4;
var $mdgriffith$elm_ui$Internal$Model$asParagraph = 4;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
var $elm$core$Set$empty = $elm$core$Dict$empty;
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 0:
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 1:
			return 'auto';
		case 2:
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 3:
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 13:
			var name = style.a;
			return name;
		case 12:
			var name = style.a;
			var o = style.b;
			return name;
		case 0:
			var _class = style.a;
			return _class;
		case 1:
			var name = style.a;
			return name;
		case 2:
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 3:
			var _class = style.a;
			return _class;
		case 4:
			var _class = style.a;
			return _class;
		case 5:
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 7:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 6:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 8:
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.hW)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.dj)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.h9.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.h9.b)))))));
		case 9:
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.cg) + ('-' + ($elm$core$String$fromInt(pos.bK) + ('-' + ($elm$core$String$fromInt(pos.eS) + ('-' + $elm$core$String$fromInt(pos.fj)))))));
		case 11:
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector) {
					case 0:
						return 'fs';
					case 1:
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0;
		return A3($elm$core$Dict$insert, key, 0, dict);
	});
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$member, key, dict);
	});
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.fo ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.hB.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.hB.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.gu) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.h5) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.gH))
				])));
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ff) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.gw),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.gq),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										gu: shadow.gu,
										gH: shadow.gH,
										fo: false,
										hB: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.hB)),
										h5: shadow.h5
									}));
						},
						focus.h3),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.gw),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.gq),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										gu: shadow.gu,
										gH: shadow.gH,
										fo: false,
										hB: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.hB)),
										h5: shadow.h5
									}));
						},
						focus.h3),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlJson(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = 3;
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = 2;
var $mdgriffith$elm_ui$Internal$Style$Self = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Bottom = 1;
var $mdgriffith$elm_ui$Internal$Style$CenterX = 4;
var $mdgriffith$elm_ui$Internal$Style$CenterY = 5;
var $mdgriffith$elm_ui$Internal$Style$Top = 0;
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[0, 1, 2, 3, 4, 5]);
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gK);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dl);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dn);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cy);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dm);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.a7);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gi);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gb);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e$);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e_);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gc);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gd);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(alignment),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ec),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gr),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h$),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ik),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ef),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eU),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ef),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eU),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f6),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eT),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment) {
				case 0:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 1:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 2:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 3:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 4:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = 0;
var $mdgriffith$elm_ui$Internal$Style$Behind = 5;
var $mdgriffith$elm_ui$Internal$Style$Below = 1;
var $mdgriffith$elm_ui$Internal$Style$OnLeft = 3;
var $mdgriffith$elm_ui$Internal$Style$OnRight = 2;
var $mdgriffith$elm_ui$Internal$Style$Within = 4;
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = 0;
	var _v0 = function () {
		switch (loc) {
			case 0:
				return 0;
			case 1:
				return 0;
			case 2:
				return 0;
			case 3:
				return 0;
			case 4:
				return 0;
			default:
				return 0;
		}
	}();
	return _List_fromArray(
		[0, 1, 2, 3, 4, 5]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h4),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.g8))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ef),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eU),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hT),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ef)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ef),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ha),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.b1),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.b1),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h4),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc) {
							case 0:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f9),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ef),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eU),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 1:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gs),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ef),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 2:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hE),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 3:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hD),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 4:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ha),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gr),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eW),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fB),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gL),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gM),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hK),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dh),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bB),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bw),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.g5, $mdgriffith$elm_ui$Internal$Style$classes.bB)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.g5, $mdgriffith$elm_ui$Internal$Style$classes.bw)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.gZ, $mdgriffith$elm_ui$Internal$Style$classes.bB)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.gZ, $mdgriffith$elm_ui$Internal$Style$classes.bw)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.dS, $mdgriffith$elm_ui$Internal$Style$classes.bB)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.dS, $mdgriffith$elm_ui$Internal$Style$classes.bw)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f0),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hZ),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cg),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h_),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bL),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h4),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gE),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gF),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gG),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eT),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.df),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gx),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gz),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ik),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hi),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h4),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cg),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f5),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ef),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fl),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eU),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dk),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.gh,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.gf,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gc),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.gf,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gc),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.gf,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gd),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.gf + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.gh + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.gf)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h8),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dz),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bL),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fk),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ef),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eU),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f6),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eT),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.ge,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.gg,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gd),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.gg,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gd),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.gg,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gd),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.gg + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.ge + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.gg)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dk),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h8),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.g$),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 1:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 2:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 3:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 4:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fH),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.gl + ($mdgriffith$elm_ui$Internal$Style$selfName(3) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.gl))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.gl + ($mdgriffith$elm_ui$Internal$Style$selfName(2) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.gl))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.he),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hh),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h4),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hg),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hf),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fI),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ec),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gr),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ik),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fI),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h4),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f5),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ha),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gr),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f9),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gs),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hE),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hD),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ik),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cg),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bL),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.g$),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ix),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.$9),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ir),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iu),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.it),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iw),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gv),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.im),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.io),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hm),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.$8),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iP),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iP),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.$8)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dN),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.il),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iv),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iq),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.gl + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.gl + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cg) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cg) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dk) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $mdgriffith$elm_ui$Internal$Style$Intermediate = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return {a6: closing, v: _List_Nil, ao: _List_Nil, ac: selector};
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 0:
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								ao: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.ao)
							});
					case 3:
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								v: A2(
									$elm$core$List$cons,
									{a6: '\n}', v: _List_Nil, ao: props, ac: '@supports (' + (prop + (':' + (value + (') {' + parent.ac))))},
									rendered.v)
							});
					case 5:
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								v: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.ac + (' + ' + selector), ''),
										adjRules),
									rendered.v)
							});
					case 1:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								v: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.ac + (' > ' + child), ''),
										childRules),
									rendered.v)
							});
					case 2:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								v: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.ac + (' ' + child), ''),
										childRules),
									rendered.v)
							});
					case 4:
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								v: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.ac, descriptor),
											''),
										descriptorRules),
									rendered.v)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								v: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.ac, ''),
										batched),
									rendered.v)
							});
				}
			});
		return A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender);
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.ao;
		if (!_v2.b) {
			return '';
		} else {
			return rule.ac + ('{' + (renderValues(rule.ao) + (rule.a6 + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.v)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.cS;
	switch (_v0) {
		case 0:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 1:
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 0:
			return 'serif';
		case 1:
			return 'sans-serif';
		case 2:
			return 'monospace';
		case 3:
			var name = font.a;
			return '\"' + (name + '\"');
		case 4:
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.fA;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return name === 'smcp';
		case 1:
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.cr);
	} else {
		return false;
	}
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 1) {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo) {
				case 1:
					var _v2 = options.g5;
					switch (_v2) {
						case 0:
							return _List_Nil;
						case 2:
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 0:
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.gl + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return '\"' + (name + '\"');
		case 1:
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.cr)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 0:
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 13:
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 12:
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 2:
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 1:
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 3:
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 4:
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 5:
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.h4;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.cg;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.eW + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.e$;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.fI;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.fH;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.e_;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.bL;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.gl;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 7:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 6:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 8:
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 0:
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 1:
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 1) {
										if (_v2.b.$ === 1) {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 1) {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 2:
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 1) {
										if (_v7.b.$ === 1) {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 1) {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 3:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.h9.a);
				var ySpacing = toGridLength(template.h9.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.hW)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.dj)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.dj)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.h9.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.h9.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.dj)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.hW)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.dj)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.h9.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.h9.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 9:
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.cg) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.fj) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.bK) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.eS) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.cg) + (' / ' + ($elm$core$String$fromInt(position.cg + position.fj) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.bK) + (' / ' + ($elm$core$String$fromInt(position.bK + position.eS) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.cg) + ('-' + ($elm$core$String$fromInt(position.bK) + ('-' + ($elm$core$String$fromInt(position.eS) + ('-' + $elm$core$String$fromInt(position.fj)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 11:
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((!_v12.a.$) && (!_v12.b.$)) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.ik + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.ik)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.h6, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.g_, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.h6 + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.h6))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.h6 + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.ik + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.h6 + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.ik)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {fj: height / size, h5: size, f2: vertical};
	});
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.cx, adjustment.cv, adjustment.cB, adjustment.cQ]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.cB,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.cv,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.cx,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		cx: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		fh: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.fj)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.f2) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.h5) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 1) {
					if (face.$ === 5) {
						var _with = face.a;
						var _v2 = _with.cu;
						if (_v2.$ === 1) {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.fh;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.cx;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 4) {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 1) {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 1) {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					dH: _Utils_ap(
						rendered.dH,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					da: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 1) {
							return rendered.da;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.da);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{dH: _List_Nil, da: _List_Nil},
			stylesheet);
		var rules = _v0.dH;
		var topLevel = _v0.da;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.cS;
		switch (_v0) {
			case 0:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 1:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.gZ)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.gZ)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 1) {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return keyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return unkeyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 0:
					return A2(createNode, 'div', attributes);
				case 1:
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.gl + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.h4))
									]))
							]));
			}
		}();
		switch (parentContext) {
			case 0:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.gl, $mdgriffith$elm_ui$Internal$Style$classes.h4, $mdgriffith$elm_ui$Internal$Style$classes.dk, $mdgriffith$elm_ui$Internal$Style$classes.a7, $mdgriffith$elm_ui$Internal$Style$classes.gh])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.gl, $mdgriffith$elm_ui$Internal$Style$classes.h4, $mdgriffith$elm_ui$Internal$Style$classes.dk, $mdgriffith$elm_ui$Internal$Style$classes.a7, $mdgriffith$elm_ui$Internal$Style$classes.gf])))
						]),
					_List_fromArray(
						[html])) : html));
			case 1:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.gl, $mdgriffith$elm_ui$Internal$Style$classes.h4, $mdgriffith$elm_ui$Internal$Style$classes.dk, $mdgriffith$elm_ui$Internal$Style$classes.gg])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.gl, $mdgriffith$elm_ui$Internal$Style$classes.h4, $mdgriffith$elm_ui$Internal$Style$classes.dk, $mdgriffith$elm_ui$Internal$Style$classes.ge])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.gl + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.ik + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.eT + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ee)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.gl + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.ik + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.eU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ef)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.g6, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.cl : _Utils_ap(styled.cl, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.g6, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.cl : _Utils_ap(styled.cl, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.g6, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.cl : _Utils_ap(styled.cl, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.g6, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.cl : _Utils_ap(styled.cl, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 1) {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.cl : _Utils_ap(rendered.cl, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.as,
						rendered.fC,
						rendered.e1,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.a5)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						g6: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.as,
							rendered.fC,
							rendered.e1,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.a5))),
						cl: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.cl : _Utils_ap(rendered.cl, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.as,
						rendered.fC,
						rendered.e1,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.a5)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						g6: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.as,
							rendered.fC,
							rendered.e1,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.a5))),
						cl: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 3, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 10, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location) {
							case 0:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.b1, $mdgriffith$elm_ui$Internal$Style$classes.h4, $mdgriffith$elm_ui$Internal$Style$classes.f9]));
							case 1:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.b1, $mdgriffith$elm_ui$Internal$Style$classes.h4, $mdgriffith$elm_ui$Internal$Style$classes.gs]));
							case 2:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.b1, $mdgriffith$elm_ui$Internal$Style$classes.h4, $mdgriffith$elm_ui$Internal$Style$classes.hE]));
							case 3:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.b1, $mdgriffith$elm_ui$Internal$Style$classes.h4, $mdgriffith$elm_ui$Internal$Style$classes.hD]));
							case 4:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.b1, $mdgriffith$elm_ui$Internal$Style$classes.h4, $mdgriffith$elm_ui$Internal$Style$classes.ha]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.b1, $mdgriffith$elm_ui$Internal$Style$classes.h4, $mdgriffith$elm_ui$Internal$Style$classes.gr]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 3:
							return $elm$virtual_dom$VirtualDom$text('');
						case 2:
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 0:
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.g6, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 0:
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 1:
				var existingBehind = existing.a;
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 2:
				var existingInFront = existing.a;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 1:
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.dT + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.e_);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.dT + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.e$);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.dT + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.gc);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.dU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.gi);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.dU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.gb);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.dU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.gd);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 2, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 0:
				switch (component.$) {
					case 0:
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 1:
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 2:
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 1:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 1:
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 2:
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 1:
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 2:
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 3:
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 4:
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 0:
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.fk + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.ee,
				_List_Nil);
		case 2:
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.ef,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.fl + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.gl + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.bL + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 0:
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.f5 + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.eT,
				_List_Nil);
		case 2:
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.eU,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.f6 + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.gl + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.cg + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 3) {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 2:
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 7:
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 1) {
					return {
						e1: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						a5: children,
						as: has,
						fC: node,
						cl: styles
					};
				} else {
					var _class = _v1.a;
					return {
						e1: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						a5: children,
						as: has,
						fC: node,
						cl: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 0:
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 3:
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 1:
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 4:
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 10:
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 7:
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 0:
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.f5 + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.eT),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.eU),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.f6 + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.gl + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.cg + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 8:
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 0:
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.fk + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.ee + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.ef + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.fl + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.gl + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.bL + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 2:
						var description = attribute.a;
						switch (description.$) {
							case 0:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 1:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 2:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 3:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 4:
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 9:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 8:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 5:
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 6:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 9:
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 3:
									return styles;
								case 2:
									var str = elem.a;
									return styles;
								case 0:
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.cl);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 6:
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = 1;
var $mdgriffith$elm_ui$Internal$Model$Layout = 0;
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	gq: $elm$core$Maybe$Nothing,
	gw: $elm$core$Maybe$Nothing,
	h3: $elm$core$Maybe$Just(
		{
			gu: 0,
			gH: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			hB: _Utils_Tuple2(0, 0),
			h5: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 0:
					var hoverable = opt.a;
					var _v4 = record.g5;
					if (_v4.$ === 1) {
						return _Utils_update(
							record,
							{
								g5: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 1:
					var focusStyle = opt.a;
					var _v5 = record.gZ;
					if (_v5.$ === 1) {
						return _Utils_update(
							record,
							{
								gZ: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.cS;
					if (_v6.$ === 1) {
						return _Utils_update(
							record,
							{
								cS: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			gZ: function () {
				var _v0 = record.gZ;
				if (_v0.$ === 1) {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			g5: function () {
				var _v1 = record.g5;
				if (_v1.$ === 1) {
					return 1;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			cS: function () {
				var _v2 = record.cS;
				if (_v2.$ === 1) {
					return 0;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{gZ: $elm$core$Maybe$Nothing, g5: $elm$core$Maybe$Nothing, cS: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 0:
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 1:
				var html = el.a.g6;
				var styles = el.a.cl;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 2:
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.cS;
			if (_v0 === 1) {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 3, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 0:
						return 'serif';
					case 1:
						return 'sans-serif';
					case 2:
						return 'monospace';
					case 3:
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 4:
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.fA;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.hI;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.hT, $mdgriffith$elm_ui$Internal$Style$classes.gl, $mdgriffith$elm_ui$Internal$Style$classes.h4]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = 1;
var $mdgriffith$elm_ui$Internal$Model$asColumn = 1;
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 8, a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 1};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 7, a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gK + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cy)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Top = 0;
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY(0);
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $author$project$Main$Info = {$: 6};
var $mdgriffith$elm_ui$Internal$Model$Above = 0;
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 0};
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 3) {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$above = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 0, element);
};
var $author$project$Main$buttonWidth = 105;
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $author$project$Main$darkRed = A3($mdgriffith$elm_ui$Element$rgb255, 140, 0, 0);
var $author$project$Main$gray = A3($mdgriffith$elm_ui$Element$rgb255, 60, 60, 60);
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 7, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.fo ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.hB.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.hB.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.gu) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.h5) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.gH)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {gu: almostShade.gu, gH: almostShade.gH, fo: false, hB: almostShade.hB, h5: almostShade.h5};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$Button$myTooltip = function (str) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0)),
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
				$mdgriffith$elm_ui$Element$padding(4),
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$Font$size(14),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					gu: 6,
					gH: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.32),
					hB: _Utils_Tuple2(0, 3),
					h5: 0
				})
			]),
		$mdgriffith$elm_ui$Element$text(str));
};
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $mdgriffith$elm_ui$Internal$Model$InFront = 4;
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 4, element);
};
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 3};
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 1:
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						g6: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.g6, add, context));
							}),
						cl: styled.cl
					});
			case 0:
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 2:
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $mdgriffith$elm_ui$Internal$Model$Hover = 1;
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 2:
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 6:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 5:
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 7:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 8:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 3:
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 4:
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 9:
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 1:
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 4:
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 10:
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			1,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$transparent = function (on) {
	return on ? A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'transparent', 1.0)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'visible', 0.0));
};
var $author$project$Button$tooltip = F2(
	function (usher, tooltip_) {
		return $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$transparent(true),
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$transparent(false)
							])),
						A3(
						$elm$core$Basics$composeL,
						usher,
						$mdgriffith$elm_ui$Element$map($elm$core$Basics$never),
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'pointerEvents', 'none'))
								]),
							tooltip_))
					]),
				$mdgriffith$elm_ui$Element$none));
	});
var $author$project$Button$addTooltip = F3(
	function (placement, label, element) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2(
					$author$project$Button$tooltip,
					placement,
					$author$project$Button$myTooltip(label))
				]),
			element);
	});
var $author$project$Button$bgGray = function (g) {
	return $mdgriffith$elm_ui$Element$Background$color(
		A3($mdgriffith$elm_ui$Element$rgb, g, g, g));
};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 8};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 4) && (attr.b.$ === 11)) && (!attr.b.a)) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 0, a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 2, a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 1) {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.gL);
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var label = _v0.dB;
		var onPress = _v0.fF;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dm + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.a7 + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.h$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fB)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 1) {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $author$project$Button$buttonStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Font$color(
		A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255)),
		A2($mdgriffith$elm_ui$Element$paddingXY, 15, 8)
	]);
var $mdgriffith$elm_ui$Internal$Model$CenterX = 1;
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX(1);
var $mdgriffith$elm_ui$Internal$Model$CenterY = 1;
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY(1);
var $author$project$Button$darkRed = A3($mdgriffith$elm_ui$Element$rgb255, 140, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$Active = 2;
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Element$mouseDown = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$active,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			2,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Internal$Model$AsRow = 0;
var $mdgriffith$elm_ui$Internal$Model$asRow = 0;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cy + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.a7)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Button$template = function (buttonData) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_Utils_ap(
			_List_fromArray(
				[
					$author$project$Button$bgGray(0.2),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$mouseDown(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($author$project$Button$darkRed)
						]))
				]),
			buttonData.e1),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$Button$buttonStyle,
				{
					dB: A3(
						$author$project$Button$addTooltip,
						buttonData.fY,
						buttonData.fZ,
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$size(14)
								]),
							$mdgriffith$elm_ui$Element$text(buttonData.dB))),
					fF: $elm$core$Maybe$Just(buttonData.fy)
				})
			]));
};
var $author$project$Main$white = A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255);
var $author$project$Main$infoButton = function (documentType) {
	var bgColor = function () {
		switch (documentType) {
			case 0:
				return $author$project$Main$darkRed;
			case 2:
				return $author$project$Main$gray;
			default:
				return $author$project$Main$gray;
		}
	}();
	return $author$project$Button$template(
		{
			e1: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$Main$white),
					$mdgriffith$elm_ui$Element$Background$color(bgColor),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px($author$project$Main$buttonWidth))
				]),
			dB: 'About',
			fy: $author$project$Main$Info,
			fY: $mdgriffith$elm_ui$Element$above,
			fZ: 'Info on the Scripta compiler'
		});
};
var $author$project$Main$ChangePrintingState = function (a) {
	return {$: 12, a: a};
};
var $author$project$Main$PrintToPDF = {$: 8};
var $author$project$Color$blue = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $author$project$Main$elementAttribute = F2(
	function (key, value) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$attribute, key, value));
	});
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var label = _v0.dB;
		var url = _v0.f1;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dm + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.a7 + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ft)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Button$simpleTemplate = F3(
	function (attrList, msg, label_) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Button$bgGray(0.2),
						$mdgriffith$elm_ui$Element$pointer,
						$mdgriffith$elm_ui$Element$mouseDown(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Button$darkRed)
							]))
					]),
				attrList),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Button$buttonStyle,
					{
						dB: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$size(14)
								]),
							$mdgriffith$elm_ui$Element$text(label_)),
						fF: $elm$core$Maybe$Just(msg)
					})
				]));
	});
var $author$project$Color$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $author$project$Main$printToPDF = function (model) {
	var _v0 = model.av;
	switch (_v0) {
		case 0:
			return A3(
				$author$project$Button$simpleTemplate,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px($author$project$Main$buttonWidth)),
						A2($author$project$Main$elementAttribute, 'title', 'Generate PDF')
					]),
				$author$project$Main$PrintToPDF,
				'PDF');
		case 1:
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$padding(8),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(30)),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Color$blue),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Color$white)
					]),
				$mdgriffith$elm_ui$Element$text('Please wait ...'));
		default:
			return A2(
				$mdgriffith$elm_ui$Element$link,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Color$white),
						A2($mdgriffith$elm_ui$Element$paddingXY, 8, 8),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Color$blue),
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$Main$ChangePrintingState(0)),
						A2($author$project$Main$elementAttribute, 'target', '_blank')
					]),
				{
					dB: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text('Click for PDF')),
					f1: _Utils_ap(
						$author$project$PDF$pdfServUrl,
						$author$project$Scripta$API$fileNameForExport(model.U.eQ))
				});
	}
};
var $author$project$Main$SetLanguage = function (a) {
	return {$: 4, a: a};
};
var $author$project$Main$setLanguageButton = F4(
	function (label, documentType, language, currentLanguage) {
		var bgColor = (_Utils_eq(language, currentLanguage) && (documentType === 2)) ? $author$project$Main$darkRed : $author$project$Main$gray;
		return $author$project$Button$template(
			{
				e1: _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Main$white),
						$mdgriffith$elm_ui$Element$Background$color(bgColor),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px($author$project$Main$buttonWidth))
					]),
				dB: label,
				fy: $author$project$Main$SetLanguage(language),
				fY: $mdgriffith$elm_ui$Element$above,
				fZ: 'Set the markup language'
			});
	});
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 5, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $author$project$Main$ChangeTarFileState = function (a) {
	return {$: 13, a: a};
};
var $author$project$Main$GetTarFile = {$: 11};
var $author$project$Main$tarFileButton = function (model) {
	var _v0 = model.a_;
	switch (_v0) {
		case 0:
			return A3(
				$author$project$Button$simpleTemplate,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px($author$project$Main$buttonWidth)),
						A2($author$project$Main$elementAttribute, 'title', 'Get Tar File')
					]),
				$author$project$Main$GetTarFile,
				'Export');
		case 1:
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$padding(8),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(30)),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Color$blue),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Color$white)
					]),
				$mdgriffith$elm_ui$Element$text('Please wait ...'));
		default:
			return A2(
				$mdgriffith$elm_ui$Element$link,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Color$white),
						A2($mdgriffith$elm_ui$Element$paddingXY, 8, 8),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Color$blue),
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$Main$ChangeTarFileState(1)),
						A2($author$project$Main$elementAttribute, 'target', '_blank')
					]),
				{
					dB: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text('Click for Tar file')),
					f1: _Utils_ap(
						$author$project$PDF$tarArchiveUrl,
						A3(
							$elm$core$String$replace,
							'.tex',
							'.tar',
							$author$project$Scripta$API$fileNameForExport(model.U.eQ)))
				});
	}
};
var $author$project$Main$SetDocument = {$: 5};
var $author$project$Main$testFileButton = function (documentType) {
	var bgColor = function () {
		switch (documentType) {
			case 0:
				return $author$project$Main$gray;
			case 2:
				return $author$project$Main$gray;
			default:
				return $author$project$Main$darkRed;
		}
	}();
	return $author$project$Button$template(
		{
			e1: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$Main$white),
					$mdgriffith$elm_ui$Element$Background$color(bgColor),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px($author$project$Main$buttonWidth))
				]),
			dB: 'Example',
			fy: $author$project$Main$SetDocument,
			fY: $mdgriffith$elm_ui$Element$above,
			fZ: 'Quantum mechanics example'
		});
};
var $author$project$Main$controls = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$spacing(18),
				A2($mdgriffith$elm_ui$Element$paddingXY, 16, 22)
			]),
		_List_fromArray(
			[
				A4($author$project$Main$setLanguageButton, 'L0', model.aE, 0, model.fs),
				A4($author$project$Main$setLanguageButton, 'MicroLaTeX', model.aE, 1, model.fs),
				A4($author$project$Main$setLanguageButton, 'XMarkdown', model.aE, 3, model.fs),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Element$paddingXY, 0, 40)
					]),
				$author$project$Main$infoButton(model.aE)),
				$author$project$Main$testFileButton(model.aE),
				$author$project$Main$tarFileButton(model),
				$author$project$Main$printToPDF(model)
			]));
};
var $author$project$Main$fontGray = function (g) {
	return $mdgriffith$elm_ui$Element$Font$color(
		A3($mdgriffith$elm_ui$Element$rgb, g, g, g));
};
var $author$project$Main$Render = function (a) {
	return {$: 2, a: a};
};
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $author$project$Main$htmlId = function (str) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$id(str));
};
var $author$project$Compiler$ASTTools$banner = function (ast) {
	return A2($author$project$Compiler$ASTTools$getBlockByName, 'banner', ast);
};
var $author$project$Render$Msg$ProposeSolution = function (a) {
	return {$: 7, a: a};
};
var $author$project$Render$Msg$Solved = function (a) {
	return {$: 1, a: a};
};
var $author$project$Render$Msg$Unsolved = {$: 0};
var $author$project$Render$Color$blue = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.gv);
var $author$project$Render$Block$getExprs = function (_v0) {
	var content = _v0.bM;
	if (!content.$) {
		return _List_Nil;
	} else {
		var stuff = content.a;
		return stuff;
	}
};
var $author$project$Render$Msg$SendLineNumber = function (a) {
	return {$: 1, a: a};
};
var $author$project$Render$Utility$sendLineNumberOnClick = function (lineNumber) {
	return $mdgriffith$elm_ui$Element$Events$onClick(
		$author$project$Render$Msg$SendLineNumber(
			$elm$core$String$fromInt(lineNumber)));
};
var $author$project$Render$Block$highlightAttrs = F2(
	function (lineNumber, settings) {
		return _Utils_eq(
			$elm$core$String$fromInt(lineNumber),
			settings.h0) ? _List_fromArray(
			[
				$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 1.0))
			]) : _List_fromArray(
			[
				$author$project$Render$Utility$sendLineNumberOnClick(lineNumber)
			]);
	});
var $author$project$Render$Utility$elementAttribute = F2(
	function (key, value) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$attribute, key, value));
	});
var $author$project$Render$Utility$idAttribute = function (k) {
	return A2(
		$author$project$Render$Utility$elementAttribute,
		'id',
		$elm$core$String$fromInt(k));
};
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.hm);
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var left = _v0.bb;
	var bottom = _v0.a4;
	var right = _v0.bf;
	var top = _v0.bh;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 9};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Render$Settings$redColor = A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0);
var $author$project$Render$Msg$SendMeta = function (a) {
	return {$: 0, a: a};
};
var $author$project$Render$Elm$backTick = $mdgriffith$elm_ui$Element$text('`');
var $author$project$Render$Elm$bibitem = function (exprs) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				function (s) {
					return '[' + (s + ']');
				}(
					A2(
						$elm$core$String$join,
						' ',
						$author$project$Compiler$ASTTools$exprListToStringList(exprs))))
			]));
};
var $author$project$Render$Msg$SelectId = function (a) {
	return {$: 2, a: a};
};
var $author$project$Render$Elm$cite = F2(
	function (acc, str) {
		var tag = A2(
			$elm$core$String$join,
			'',
			$author$project$Compiler$ASTTools$exprListToStringList(str));
		var id = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.g7;
				},
				A2($elm$core$Dict$get, tag, acc.cb)));
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Render$Msg$SendLineNumber(id)),
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Render$Msg$SelectId(id)),
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 1.0))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(
					function (s) {
						return '[' + (s + ']');
					}(tag))
				]));
	});
var $author$project$Render$Elm$colorDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'yellow',
			A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 0)),
			_Utils_Tuple2(
			'blue',
			A3($mdgriffith$elm_ui$Element$rgb255, 180, 180, 255))
		]));
var $author$project$Render$Msg$GetPublicDocumentFromAuthor = F3(
	function (a, b, c) {
		return {$: 5, a: a, b: b, c: c};
	});
var $author$project$Render$Msg$MHAsCheatSheet = 1;
var $author$project$Render$Elm$errorText_ = function (str) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
			]),
		$mdgriffith$elm_ui$Element$text(str));
};
var $author$project$Render$Elm$cslink = F4(
	function (_v0, _v1, _v2, exprList) {
		var _v3 = $elm$core$List$head(
			$author$project$Compiler$ASTTools$exprListToStringList(exprList));
		if (_v3.$ === 1) {
			return $author$project$Render$Elm$errorText_('Please: id or slug');
		} else {
			var argString = _v3.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			var fragment = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$drop, n - 1, args));
			var username = A2(
				$elm$core$Maybe$withDefault,
				'---',
				$elm$core$List$head(
					A2($elm$core$String$split, ':', fragment)));
			var label = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$take, n - 1, args));
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_Nil,
				{
					dB: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8))
							]),
						$mdgriffith$elm_ui$Element$text(label)),
					fF: $elm$core$Maybe$Just(
						A3($author$project$Render$Msg$GetPublicDocumentFromAuthor, 1, username, fragment))
				});
		}
	});
var $author$project$Render$Utility$makeSlug = function (str) {
	return A3(
		$elm$core$String$replace,
		' ',
		'',
		$elm$core$String$toLower(str));
};
var $author$project$Render$Utility$internalLink = function (str) {
	return $author$project$Render$Utility$makeSlug('#' + str);
};
var $author$project$Render$Elm$eqref = F2(
	function (acc, exprList) {
		var key = A3(
			$elm$core$String$replace,
			'label:',
			'',
			$elm$core$String$trim(
				A2(
					$elm$core$String$join,
					'',
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Compiler$ASTTools$getText, exprList)))));
		var ref_ = A2($elm$core$Dict$get, key, acc.cb);
		var val = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.fD;
				},
				ref_));
		var id = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.g7;
				},
				ref_));
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.7)),
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Render$Msg$SelectId(id))
				]),
			{
				dB: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('(' + (val + ')'))
						])),
				f1: $author$project$Render$Utility$internalLink(id)
			});
	});
var $author$project$Render$Elm$errorBackgroundColor = A3($mdgriffith$elm_ui$Element$rgb, 1, 0.8, 0.8);
var $author$project$Compiler$ASTTools$filterOutExpressionsOnName = F2(
	function (name, exprs) {
		return A2(
			$elm$core$List$filter,
			function (expr) {
				return !A2($author$project$Compiler$ASTTools$matchExprOnName, name, expr);
			},
			exprs);
	});
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $author$project$Render$Elm$footnote = F2(
	function (acc, exprList) {
		if ((exprList.b && (exprList.a.$ === 1)) && (!exprList.b.b)) {
			var _v1 = exprList.a;
			var meta = _v1.b;
			var _v2 = A2($elm$core$Dict$get, meta.g7, acc.du);
			if (!_v2.$) {
				var k = _v2.a;
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.7)),
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Render$Msg$SelectId(meta.g7 + '_'))
						]),
					{
						dB: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$html(
								A3(
									$elm$html$Html$node,
									'sup',
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											$elm$core$String$fromInt(k))
										])))),
						f1: $author$project$Render$Utility$internalLink(meta.g7 + '_')
					});
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Elm$linkColor = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var label = _v0.dB;
		var url = _v0.f1;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dm + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.a7 + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ft)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Render$Elm$href = F4(
	function (_v0, _v1, _v2, exprList) {
		var url = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$andThen,
				$author$project$Compiler$ASTTools$getText,
				A2($elm_community$list_extra$List$Extra$getAt, 0, exprList)));
		var label = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$andThen,
				$author$project$Compiler$ASTTools$getText,
				A2($elm_community$list_extra$List$Extra$getAt, 1, exprList)));
		return A2(
			$mdgriffith$elm_ui$Element$newTabLink,
			_List_Nil,
			{
				dB: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$linkColor)
						]),
					$mdgriffith$elm_ui$Element$text(label)),
				f1: url
			});
	});
var $author$project$Render$Elm$htmlId = function (str) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$id(str));
};
var $author$project$Render$Msg$GetDocumentWithSlug = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$Render$Msg$MHStandard = 0;
var $author$project$Render$Elm$ilink = F4(
	function (_v0, _v1, _v2, exprList) {
		var _v3 = $elm$core$List$head(
			$author$project$Compiler$ASTTools$exprListToStringList(exprList));
		if (_v3.$ === 1) {
			return $author$project$Render$Elm$errorText_('Please provide label and url');
		} else {
			var argString = _v3.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			var label = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$take, n - 1, args));
			var slug = A2(
				$elm$core$Maybe$withDefault,
				'((nothing))',
				$elm_community$list_extra$List$Extra$last(args));
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_Nil,
				{
					dB: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8))
							]),
						$mdgriffith$elm_ui$Element$text(label)),
					fF: $elm$core$Maybe$Just(
						A2($author$project$Render$Msg$GetDocumentWithSlug, 0, slug))
				});
		}
	});
var $author$project$Render$Graphics$argumentsFromAST = function (body) {
	return $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$elm$core$String$words,
			$author$project$Compiler$ASTTools$exprListToStringList(body)));
};
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var description = _v0.d4;
		var src = _v0.fV;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 7:
						return true;
					case 8:
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.g8),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $mdgriffith$elm_ui$Internal$Model$Left = 0;
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX(0);
var $mdgriffith$elm_ui$Internal$Model$Right = 2;
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX(2);
var $author$project$Render$Graphics$imageParameters = F2(
	function (settings, _arguments) {
		var url = A2(
			$elm$core$Maybe$withDefault,
			'no-image',
			$elm$core$List$head(_arguments));
		var remainingArguments = A2($elm$core$List$drop, 1, _arguments);
		var keyValueStrings_ = A2(
			$elm$core$List$filter,
			function (s) {
				return A2($elm$core$String$contains, ':', s);
			},
			remainingArguments);
		var keyValueStrings = A2(
			$elm$core$List$filter,
			function (s) {
				return !A2($elm$core$String$contains, 'caption', s);
			},
			keyValueStrings_);
		var displayWidth = settings.eS;
		var dict = $author$project$Render$Utility$keyValueDict(keyValueStrings);
		var placement = function () {
			var _v2 = A2($elm$core$Dict$get, 'placement', dict);
			if (_v2.$ === 1) {
				return $mdgriffith$elm_ui$Element$centerX;
			} else {
				switch (_v2.a) {
					case 'left':
						return $mdgriffith$elm_ui$Element$alignLeft;
					case 'right':
						return $mdgriffith$elm_ui$Element$alignRight;
					case 'center':
						return $mdgriffith$elm_ui$Element$centerX;
					default:
						return $mdgriffith$elm_ui$Element$centerX;
				}
			}
		}();
		var width = function () {
			var _v0 = A2($elm$core$Dict$get, 'width', dict);
			if (_v0.$ === 1) {
				return $mdgriffith$elm_ui$Element$px(displayWidth);
			} else {
				if (_v0.a === 'fill') {
					return $mdgriffith$elm_ui$Element$fill;
				} else {
					var w_ = _v0.a;
					var _v1 = $elm$core$String$toInt(w_);
					if (_v1.$ === 1) {
						return $mdgriffith$elm_ui$Element$px(displayWidth);
					} else {
						var w = _v1.a;
						return $mdgriffith$elm_ui$Element$px(w);
					}
				}
			}
		}();
		var description = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, 'caption', dict));
		var captionLeadString = A3(
			$elm$core$String$replace,
			'caption:',
			'',
			A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$filter,
					function (s) {
						return A2($elm$core$String$contains, 'caption', s);
					},
					keyValueStrings_)));
		var captionPhrase = A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$cons,
				captionLeadString,
				A2(
					$elm$core$List$filter,
					function (s) {
						return !A2($elm$core$String$contains, ':', s);
					},
					remainingArguments)));
		var caption = (captionPhrase === '') ? $mdgriffith$elm_ui$Element$none : A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					placement,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					$mdgriffith$elm_ui$Element$text(captionPhrase))
				]));
		return {dY: caption, d4: description, cZ: placement, f1: url, eS: width};
	});
var $author$project$Render$Graphics$image = F2(
	function (settings, body) {
		var params = A2(
			$author$project$Render$Graphics$imageParameters,
			settings,
			$author$project$Render$Graphics$argumentsFromAST(body));
		var inner = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.eS)),
					params.cZ,
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, 18)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(params.eS),
							params.cZ
						]),
					{d4: params.d4, fV: params.f1}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[params.cZ]),
					params.dY)
				]));
		return A2(
			$mdgriffith$elm_ui$Element$newTabLink,
			_List_Nil,
			{dB: inner, f1: params.f1});
	});
var $author$project$Render$Elm$leftBracket = $mdgriffith$elm_ui$Element$text('[');
var $author$project$Render$Elm$link = F4(
	function (_v0, _v1, _v2, exprList) {
		var _v3 = $elm$core$List$head(
			$author$project$Compiler$ASTTools$exprListToStringList(exprList));
		if (_v3.$ === 1) {
			return $author$project$Render$Elm$errorText_('Please provide label and url');
		} else {
			var argString = _v3.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			var label = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$take, n - 1, args));
			var url = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$drop, n - 1, args));
			return A2(
				$mdgriffith$elm_ui$Element$newTabLink,
				_List_Nil,
				{
					dB: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$linkColor)
							]),
						$mdgriffith$elm_ui$Element$text(label)),
					f1: url
				});
		}
	});
var $author$project$Render$Elm$par = F4(
	function (_v0, _v1, _v2, _v3) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(15))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('')
				]));
	});
var $author$project$Render$Elm$ref = F2(
	function (acc, exprList) {
		var key = $elm$core$String$trim(
			A2(
				$elm$core$String$join,
				'',
				$elm_community$maybe_extra$Maybe$Extra$values(
					A2($elm$core$List$map, $author$project$Compiler$ASTTools$getText, exprList))));
		var ref_ = A2($elm$core$Dict$get, key, acc.cb);
		var val = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.fD;
				},
				ref_));
		var id = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.g7;
				},
				ref_));
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.7)),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Render$Msg$SelectId(id))
				]),
			{
				dB: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(val)
						])),
				f1: $author$project$Render$Utility$internalLink(id)
			});
	});
var $author$project$Render$Elm$reflink = F2(
	function (acc, exprList) {
		var argString = A2(
			$elm$core$String$join,
			' ',
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2($elm$core$List$map, $author$project$Compiler$ASTTools$getText, exprList)));
		var args = $elm$core$String$words(argString);
		var n = $elm$core$List$length(args);
		var key = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$drop, n - 1, args));
		var ref_ = A2($elm$core$Dict$get, key, acc.cb);
		var id = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.g7;
				},
				ref_));
		var label = A2(
			$elm$core$String$join,
			' ',
			A2($elm$core$List$take, n - 1, args));
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.7)),
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Render$Msg$SelectId(id))
				]),
			{
				dB: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(label)
						])),
				f1: $author$project$Render$Utility$internalLink(id)
			});
	});
var $author$project$Render$Elm$errorText = F2(
	function (index, str) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
				]),
			$mdgriffith$elm_ui$Element$text(
				'(' + ($elm$core$String$fromInt(index) + (') not implemented: ' + str))));
	});
var $author$project$Render$Settings$codeColor = A3($mdgriffith$elm_ui$Element$rgb255, 0, 0, 210);
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Internal$Model$Monospace = {$: 2};
var $mdgriffith$elm_ui$Element$Font$monospace = $mdgriffith$elm_ui$Internal$Model$Monospace;
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $mdgriffith$elm_ui$Element$Font$unitalicized = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.iy);
var $author$project$Render$Elm$codeStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Font$family(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$typeface('Inconsolata'),
				$mdgriffith$elm_ui$Element$Font$monospace
			])),
		$mdgriffith$elm_ui$Element$Font$unitalicized,
		$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Settings$codeColor),
		$mdgriffith$elm_ui$Element$paddingEach(
		{a4: 0, bb: 2, bf: 2, bh: 0})
	]);
var $author$project$Render$Elm$verbatimElement = F3(
	function (formatList, meta, str) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A2(
				$elm$core$List$cons,
				$author$project$Render$Elm$htmlId(meta.g7),
				formatList),
			$mdgriffith$elm_ui$Element$text(str));
	});
var $author$project$Render$Elm$code = F2(
	function (m, str) {
		return A3($author$project$Render$Elm$verbatimElement, $author$project$Render$Elm$codeStyle, m, str);
	});
var $author$project$Render$Math$InlineMathMode = 0;
var $author$project$Parser$MathMacro$Expr = function (a) {
	return {$: 14, a: a};
};
var $author$project$Parser$MathMacro$replaceParam_ = F3(
	function (k, expr, target) {
		switch (target.$) {
			case 2:
				var exprs = target.a;
				return $author$project$Parser$MathMacro$Arg(
					A2(
						$elm$core$List$map,
						A2($author$project$Parser$MathMacro$replaceParam_, k, expr),
						exprs));
			case 3:
				var decoExpr = target.a;
				if (!decoExpr.$) {
					var decoMExpr = decoExpr.a;
					return $author$project$Parser$MathMacro$Sub(
						$author$project$Parser$MathMacro$DecoM(
							A3($author$project$Parser$MathMacro$replaceParam_, k, expr, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$Parser$MathMacro$Sub(
						$author$project$Parser$MathMacro$DecoI(m));
				}
			case 4:
				var decoExpr = target.a;
				if (!decoExpr.$) {
					var decoMExpr = decoExpr.a;
					return $author$project$Parser$MathMacro$Super(
						$author$project$Parser$MathMacro$DecoM(
							A3($author$project$Parser$MathMacro$replaceParam_, k, expr, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$Parser$MathMacro$Super(
						$author$project$Parser$MathMacro$DecoI(m));
				}
			case 5:
				var m = target.a;
				return _Utils_eq(m, k) ? expr : $author$project$Parser$MathMacro$Param(m);
			case 13:
				var name = target.a;
				var exprs = target.b;
				return A2(
					$author$project$Parser$MathMacro$Macro,
					name,
					A2(
						$elm$core$List$map,
						A2($author$project$Parser$MathMacro$replaceParam_, k, expr),
						exprs));
			default:
				return target;
		}
	});
var $author$project$Parser$MathMacro$replaceParam = F3(
	function (k, expr, exprs) {
		return A2(
			$elm$core$List$map,
			A2($author$project$Parser$MathMacro$replaceParam_, k, expr),
			exprs);
	});
var $author$project$Parser$MathMacro$replaceParams = F2(
	function (replacementList, target) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, acc) {
					var k = _v0.a;
					var replacement = _v0.b;
					return A3($author$project$Parser$MathMacro$replaceParam, k + 1, replacement, acc);
				}),
			target,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (k, item) {
						return _Utils_Tuple2(k, item);
					}),
				replacementList));
	});
var $author$project$Parser$MathMacro$expandMacro_ = F2(
	function (args, _v0) {
		var arity = _v0.a;
		var macroDefBody = _v0.b;
		return A2($author$project$Parser$MathMacro$replaceParams, args, macroDefBody);
	});
var $author$project$Parser$MathMacro$expandMacroWithDict = F2(
	function (dict, expr) {
		switch (expr.$) {
			case 13:
				var macroName = expr.a;
				var args = expr.b;
				var _v1 = A2($elm$core$Dict$get, macroName, dict);
				if (_v1.$ === 1) {
					return A2(
						$author$project$Parser$MathMacro$Macro,
						macroName,
						A2(
							$elm$core$List$map,
							$author$project$Parser$MathMacro$expandMacroWithDict(dict),
							args));
				} else {
					var _v2 = _v1.a;
					var k = _v2.a;
					var exprs = _v2.b;
					return $author$project$Parser$MathMacro$Expr(
						A2(
							$author$project$Parser$MathMacro$expandMacro_,
							A2(
								$elm$core$List$map,
								$author$project$Parser$MathMacro$expandMacroWithDict(dict),
								args),
							A2(
								$author$project$Parser$MathMacro$MacroBody,
								k,
								A2(
									$elm$core$List$map,
									$author$project$Parser$MathMacro$expandMacroWithDict(dict),
									exprs))));
				}
			case 2:
				var exprs = expr.a;
				return $author$project$Parser$MathMacro$Arg(
					A2(
						$elm$core$List$map,
						$author$project$Parser$MathMacro$expandMacroWithDict(dict),
						exprs));
			case 3:
				var decoExpr = expr.a;
				if (!decoExpr.$) {
					var decoMExpr = decoExpr.a;
					return $author$project$Parser$MathMacro$Sub(
						$author$project$Parser$MathMacro$DecoM(
							A2($author$project$Parser$MathMacro$expandMacroWithDict, dict, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$Parser$MathMacro$Sub(
						$author$project$Parser$MathMacro$DecoI(m));
				}
			case 4:
				var decoExpr = expr.a;
				if (!decoExpr.$) {
					var decoMExpr = decoExpr.a;
					return $author$project$Parser$MathMacro$Super(
						$author$project$Parser$MathMacro$DecoM(
							A2($author$project$Parser$MathMacro$expandMacroWithDict, dict, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$Parser$MathMacro$Super(
						$author$project$Parser$MathMacro$DecoI(m));
				}
			default:
				return expr;
		}
	});
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 1) {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 1) {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $elm_community$result_extra$Result$Extra$combine = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $author$project$Parser$MathMacro$parse = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$run,
		$author$project$Parser$MathMacro$many($author$project$Parser$MathMacro$mathExprParser),
		str);
};
var $author$project$Parser$MathMacro$parseMany = function (str) {
	return A2(
		$elm$core$Result$map,
		$elm$core$List$concat,
		$elm_community$result_extra$Result$Extra$combine(
			A2(
				$elm$core$List$map,
				$author$project$Parser$MathMacro$parse,
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					$elm$core$String$lines(
						$elm$core$String$trim(str))))));
};
var $author$project$Parser$MathMacro$enclose = function (str) {
	return '{' + (str + '}');
};
var $author$project$Parser$MathMacro$print = function (expr) {
	switch (expr.$) {
		case 0:
			var str = expr.a;
			return str;
		case 10:
			return '\\{';
		case 11:
			return '\\}';
		case 8:
			return '\\,';
		case 9:
			return '\\;';
		case 7:
			return '\\ ';
		case 1:
			var str = expr.a;
			return '\\' + str;
		case 5:
			var k = expr.a;
			return '#' + $elm$core$String$fromInt(k);
		case 2:
			var exprs = expr.a;
			return $author$project$Parser$MathMacro$enclose(
				$author$project$Parser$MathMacro$printList(exprs));
		case 3:
			var deco = expr.a;
			return '_' + $author$project$Parser$MathMacro$printDeco(deco);
		case 4:
			var deco = expr.a;
			return '^' + $author$project$Parser$MathMacro$printDeco(deco);
		case 12:
			var str = expr.a;
			return str;
		case 6:
			return ' ';
		case 13:
			var name = expr.a;
			var body = expr.b;
			return '\\' + (name + $author$project$Parser$MathMacro$printList(body));
		default:
			var exprs = expr.a;
			return A2(
				$elm$core$String$join,
				'',
				A2($elm$core$List$map, $author$project$Parser$MathMacro$print, exprs));
	}
};
var $author$project$Parser$MathMacro$printDeco = function (deco) {
	if (!deco.$) {
		var expr = deco.a;
		return $author$project$Parser$MathMacro$print(expr);
	} else {
		var k = deco.a;
		return $elm$core$String$fromInt(k);
	}
};
var $author$project$Parser$MathMacro$printList = function (exprs) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$Parser$MathMacro$print, exprs));
};
var $author$project$Parser$MathMacro$evalStr = F2(
	function (dict, str) {
		var _v0 = $author$project$Parser$MathMacro$parseMany(
			$elm$core$String$trim(str));
		if (!_v0.$) {
			var result = _v0.a;
			var _v1 = result;
			return $author$project$Parser$MathMacro$printList(
				A2(
					$elm$core$List$map,
					$author$project$Parser$MathMacro$expandMacroWithDict(dict),
					result));
		} else {
			return str;
		}
	});
var $author$project$Parser$TextMacro$MyMacro = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$parser$Parser$UnexpectedChar = {$: 11};
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $author$project$Parser$TextMacro$word = function (inWord) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$spaces),
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompIf(inWord)),
						$elm$parser$Parser$chompWhile(inWord)),
					$elm$parser$Parser$spaces)),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $author$project$Parser$TextMacro$arg = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$symbol('{')),
		$elm$parser$Parser$spaces),
	A2(
		$elm$parser$Parser$ignorer,
		$author$project$Parser$TextMacro$word(
			function (c) {
				return c !== '}';
			}),
		$elm$parser$Parser$symbol('}')));
var $author$project$Parser$TextMacro$itemListHelper = F2(
	function (itemParser, revItems) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (item_) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, item_, revItems));
						}),
					itemParser),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(revItems));
					},
					$elm$parser$Parser$succeed(0))
				]));
	});
var $author$project$Parser$TextMacro$itemList_ = F2(
	function (initialList, itemParser) {
		return A2(
			$elm$parser$Parser$loop,
			initialList,
			$author$project$Parser$TextMacro$itemListHelper(itemParser));
	});
var $author$project$Parser$TextMacro$itemList = function (itemParser) {
	return A2($author$project$Parser$TextMacro$itemList_, _List_Nil, itemParser);
};
var $author$project$Parser$TextMacro$argsOfNamedMacro = function (name) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol('\\' + name)),
		$author$project$Parser$TextMacro$itemList($author$project$Parser$TextMacro$arg));
};
var $author$project$Parser$TextMacro$toString = function (_v0) {
	var name = _v0.a;
	var args = _v0.b;
	return '\\' + (name + A2(
		$elm$core$String$join,
		'',
		A2(
			$elm$core$List$map,
			function (a) {
				return '{' + (a + '}');
			},
			args)));
};
var $author$project$Parser$TextMacro$eraseLeadingMacro = F2(
	function (name, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$Parser$TextMacro$argsOfNamedMacro(name),
			str);
		if (!_v0.$) {
			var args = _v0.a;
			return A3(
				$elm$core$String$replace,
				$author$project$Parser$TextMacro$toString(
					A2($author$project$Parser$TextMacro$MyMacro, name, args)),
				'',
				str);
		} else {
			return str;
		}
	});
var $author$project$Render$Math$eraseLabeMacro = function (content) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$author$project$Parser$TextMacro$eraseLeadingMacro('label'),
			$elm$core$String$lines(content)));
};
var $author$project$Render$Math$isDisplayMathMode = function (displayMode) {
	if (!displayMode) {
		return false;
	} else {
		return true;
	}
};
var $elm$html$Html$Attributes$property = $elm$virtual_dom$VirtualDom$property;
var $author$project$Render$Math$mathText_ = F2(
	function (displayMode, content) {
		return A3(
			$elm$html$Html$node,
			'math-text',
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Attributes$property,
					'display',
					$elm$json$Json$Encode$bool(
						$author$project$Render$Math$isDisplayMathMode(displayMode))),
					A2(
					$elm$html$Html$Attributes$property,
					'content',
					$elm$json$Json$Encode$string(content))
				]),
			_List_Nil);
	});
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $author$project$Render$Math$mathText = F5(
	function (generation, width, id, displayMode, content) {
		return $mdgriffith$elm_ui$Element$html(
			A3(
				$elm$html$Html$Keyed$node,
				'span',
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'padding-top', '14px'),
						A2($elm$html$Html$Attributes$style, 'padding-bottom', '14px'),
						$elm$html$Html$Attributes$id(id),
						A2($elm$html$Html$Attributes$style, 'width', width)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						$elm$core$String$fromInt(generation),
						A2(
							$author$project$Render$Math$mathText_,
							displayMode,
							$author$project$Render$Math$eraseLabeMacro(content)))
					])));
	});
var $author$project$Render$Elm$mathElement = F4(
	function (generation, acc, meta, str) {
		return A5(
			$author$project$Render$Math$mathText,
			generation,
			'width',
			meta.g7,
			0,
			A2($author$project$Parser$MathMacro$evalStr, acc.ep, str));
	});
var $author$project$Render$Elm$math = F4(
	function (g, a, m, str) {
		return A4($author$project$Render$Elm$mathElement, g, a, m, str);
	});
var $author$project$Render$Elm$verbatimDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'$',
			F5(
				function (g, a, _v0, m, str) {
					return A4($author$project$Render$Elm$math, g, a, m, str);
				})),
			_Utils_Tuple2(
			'`',
			F5(
				function (_v1, _v2, _v3, m, str) {
					return A2($author$project$Render$Elm$code, m, str);
				})),
			_Utils_Tuple2(
			'code',
			F5(
				function (_v4, _v5, _v6, m, str) {
					return A2($author$project$Render$Elm$code, m, str);
				})),
			_Utils_Tuple2(
			'math',
			F5(
				function (g, a, _v7, m, str) {
					return A4($author$project$Render$Elm$math, g, a, m, str);
				}))
		]));
var $author$project$Render$Elm$renderVerbatim = F6(
	function (name, generation, acc, settings, meta, str) {
		var _v0 = A2($elm$core$Dict$get, name, $author$project$Render$Elm$verbatimDict);
		if (_v0.$ === 1) {
			return A2($author$project$Render$Elm$errorText, 1, name);
		} else {
			var f = _v0.a;
			return A5(f, generation, acc, settings, meta, str);
		}
	});
var $author$project$Render$Elm$rightBracket = $mdgriffith$elm_ui$Element$text(']');
var $author$project$Render$Elm$errorColor = A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0);
var $author$project$Render$Elm$f1 = F2(
	function (f, exprList) {
		var _v0 = $author$project$Compiler$ASTTools$exprListToStringList(exprList);
		if (_v0.b) {
			var arg1 = _v0.a;
			return f(arg1);
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$errorColor)
					]),
				$mdgriffith$elm_ui$Element$text('Invalid arguments'));
		}
	});
var $mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var $author$project$Render$Elm$skip = function (exprList) {
	var numVal = function (str) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$String$toInt(str));
	};
	var f = function (str) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$spacingXY,
					0,
					numVal(str))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('')
				]));
	};
	return A2($author$project$Render$Elm$f1, f, exprList);
};
var $mdgriffith$elm_ui$Element$Font$strike = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.$8);
var $author$project$Render$Elm$ulink = F4(
	function (_v0, _v1, _v2, exprList) {
		var _v3 = $elm$core$List$head(
			$author$project$Compiler$ASTTools$exprListToStringList(exprList));
		if (_v3.$ === 1) {
			return $author$project$Render$Elm$errorText_('Please provide label and url');
		} else {
			var argString = _v3.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			var fragment = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$drop, n - 1, args));
			var username = A2(
				$elm$core$Maybe$withDefault,
				'---',
				$elm$core$List$head(
					A2($elm$core$String$split, ':', fragment)));
			var label = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$take, n - 1, args));
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_Nil,
				{
					dB: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8))
							]),
						$mdgriffith$elm_ui$Element$text(label)),
					fF: $elm$core$Maybe$Just(
						A3($author$project$Render$Msg$GetPublicDocumentFromAuthor, 0, username, fragment))
				});
		}
	});
var $mdgriffith$elm_ui$Element$Font$underline = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.iP);
var $author$project$Render$Elm$underscore = F4(
	function (_v0, _v1, _v2, _v3) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_Nil,
			$mdgriffith$elm_ui$Element$text('_'));
	});
var $author$project$Render$Elm$vspace = F4(
	function (_v0, _v1, _v2, exprList) {
		var h = A2(
			$elm$core$Maybe$withDefault,
			1,
			$elm$core$String$toInt(
				A2(
					$elm$core$String$join,
					'',
					$author$project$Compiler$ASTTools$exprListToStringList(exprList))));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('')
				]));
	});
var $author$project$Render$Elm$abstract = F4(
	function (g, acc, s, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(18)
						]),
					$mdgriffith$elm_ui$Element$text('Abstract.')),
					A5($author$project$Render$Elm$simpleElement, _List_Nil, g, acc, s, exprList)
				]));
	});
var $author$project$Render$Elm$blue = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 0, 0, 200))
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$boldItalic = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 0, bb: 0, bf: 2, bh: 0})
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$brackets = F4(
	function (g, acc, s, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('['),
					A5($author$project$Render$Elm$simpleElement, _List_Nil, g, acc, s, exprList),
					$mdgriffith$elm_ui$Element$text(' ]')
				]));
	});
var $author$project$Render$Elm$emph = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 0, bb: 0, bf: 2, bh: 0})
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$errorHighlight = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 255, 200, 200)),
					A2($mdgriffith$elm_ui$Element$paddingXY, 4, 2)
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$gray = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5))
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$green = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 0, 140, 0))
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$highlight = F4(
	function (g, acc, s, exprList_) {
		var exprList = A2($author$project$Compiler$ASTTools$filterOutExpressionsOnName, 'color', exprList_);
		var colorName = $elm$core$String$trim(
			A2(
				$elm$core$Maybe$withDefault,
				'yellow',
				A2(
					$elm$core$Maybe$andThen,
					$author$project$Compiler$ASTTools$getText,
					$elm$core$List$head(
						A2($author$project$Compiler$ASTTools$filterExpressionsOnName, 'color', exprList_)))));
		var colorElement = A2(
			$elm$core$Maybe$withDefault,
			A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 0),
			A2($elm$core$Dict$get, colorName, $author$project$Render$Elm$colorDict));
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(colorElement),
					A2($mdgriffith$elm_ui$Element$paddingXY, 6, 3)
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$identityFunction = F4(
	function (g, acc, s, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			A2(
				$elm$core$List$map,
				A3($author$project$Render$Elm$render, g, acc, s),
				exprList));
	});
var $author$project$Render$Elm$italic = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 0, bb: 0, bf: 2, bh: 0})
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$large = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(18)
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$magenta = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 255, 51, 192))
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$pink = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 255, 100, 100))
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$red = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 200, 0, 0))
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$render = F4(
	function (generation, acc, settings, expr) {
		switch (expr.$) {
			case 1:
				var string = expr.a;
				var meta = expr.b;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Render$Msg$SendMeta(meta)),
							$author$project$Render$Elm$htmlId(meta.g7)
						]),
					$mdgriffith$elm_ui$Element$text(string));
			case 0:
				var name = expr.a;
				var exprList = expr.b;
				var meta = expr.c;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$author$project$Render$Elm$htmlId(meta.g7)
						]),
					A5($author$project$Render$Elm$renderMarked, name, generation, acc, settings, exprList));
			default:
				var name = expr.a;
				var str = expr.b;
				var meta = expr.c;
				return A6($author$project$Render$Elm$renderVerbatim, name, generation, acc, settings, meta, str);
		}
	});
var $author$project$Render$Elm$renderMarked = F5(
	function (name, generation, acc, settings, exprList) {
		var _v2 = A2(
			$elm$core$Dict$get,
			name,
			$author$project$Render$Elm$cyclic$markupDict());
		if (_v2.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				A2(
					$elm$core$List$cons,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Elm$errorBackgroundColor),
								A2($mdgriffith$elm_ui$Element$paddingXY, 4, 2)
							]),
						$mdgriffith$elm_ui$Element$text(name)),
					A2(
						$elm$core$List$map,
						A3($author$project$Render$Elm$render, generation, acc, settings),
						exprList)));
		} else {
			var f = _v2.a;
			return A4(f, generation, acc, settings, exprList);
		}
	});
var $author$project$Render$Elm$simpleElement = F5(
	function (formatList, g, acc, s, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			formatList,
			A2(
				$elm$core$List$map,
				A3($author$project$Render$Elm$render, g, acc, s),
				exprList));
	});
var $author$project$Render$Elm$strike = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$strike]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$strong = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$bold]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$table = F4(
	function (g, acc, s, rows) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$Render$Elm$tableRow, g, acc, s),
				rows));
	});
var $author$project$Render$Elm$tableItem = F4(
	function (g, acc, s, expr) {
		if ((!expr.$) && (expr.a === 'tableItem')) {
			var exprList = expr.b;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(100))
					]),
				A2(
					$elm$core$List$map,
					A3($author$project$Render$Elm$render, g, acc, s),
					exprList));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Elm$tableRow = F4(
	function (g, acc, s, expr) {
		if ((!expr.$) && (expr.a === 'tableRow')) {
			var items = expr.b;
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				A2(
					$elm$core$List$map,
					A3($author$project$Render$Elm$tableItem, g, acc, s),
					items));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Elm$term = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 0, bb: 0, bf: 2, bh: 0})
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$title = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(36),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 0, bb: 0, bf: 2, bh: 0})
				]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$underline = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$underline]),
			g,
			acc,
			s,
			exprList);
	});
var $author$project$Render$Elm$var = F4(
	function (g, acc, s, exprList) {
		return A5($author$project$Render$Elm$simpleElement, _List_Nil, g, acc, s, exprList);
	});
var $author$project$Render$Elm$violet = F4(
	function (g, acc, s, exprList) {
		return A5(
			$author$project$Render$Elm$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 150, 100, 255))
				]),
			g,
			acc,
			s,
			exprList);
	});
function $author$project$Render$Elm$cyclic$markupDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'bibitem',
				F4(
					function (_v4, _v5, _v6, exprList) {
						return $author$project$Render$Elm$bibitem(exprList);
					})),
				_Utils_Tuple2(
				'strong',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$strong, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'bold',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$strong, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'textbf',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$strong, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'b',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$strong, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'var',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$var, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'italic',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$italic, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'textit',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$italic, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'bi',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$boldItalic, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'i',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$italic, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'boldItalic',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$boldItalic, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'strike',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$strike, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'underscore',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$underscore, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'ref',
				F4(
					function (_v7, acc, _v8, exprList) {
						return A2($author$project$Render$Elm$ref, acc, exprList);
					})),
				_Utils_Tuple2(
				'reflink',
				F4(
					function (_v9, acc, _v10, exprList) {
						return A2($author$project$Render$Elm$reflink, acc, exprList);
					})),
				_Utils_Tuple2(
				'eqref',
				F4(
					function (_v11, acc, _v12, exprList) {
						return A2($author$project$Render$Elm$eqref, acc, exprList);
					})),
				_Utils_Tuple2(
				'underline',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$underline, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'hide',
				F4(
					function (_v13, _v14, _v15, _v16) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'author',
				F4(
					function (_v17, _v18, _v19, _v20) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'date',
				F4(
					function (_v21, _v22, _v23, _v24) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'today',
				F4(
					function (_v25, _v26, _v27, _v28) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'comment',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$blue, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'lambda',
				F4(
					function (_v29, _v30, _v31, _v32) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'title',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$title, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'setcounter',
				F4(
					function (_v33, _v34, _v35, _v36) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'red',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$red, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'blue',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$blue, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'green',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$green, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'pink',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$pink, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'magenta',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$magenta, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'violet',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$violet, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'highlight',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$highlight, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'gray',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$gray, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'errorHighlight',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$errorHighlight, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'skip',
				F4(
					function (_v37, _v38, _v39, exprList) {
						return $author$project$Render$Elm$skip(exprList);
					})),
				_Utils_Tuple2(
				'link',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$link, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'href',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$href, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'ilink',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$ilink, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'ulink',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$ulink, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'cslink',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$cslink, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'abstract',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$abstract, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'large',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$large, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'mdash',
				F4(
					function (_v40, _v41, _v42, _v43) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('—'));
					})),
				_Utils_Tuple2(
				'ndash',
				F4(
					function (_v44, _v45, _v46, _v47) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('–'));
					})),
				_Utils_Tuple2(
				'label',
				F4(
					function (_v48, _v49, _v50, _v51) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'cite',
				F4(
					function (_v52, acc, _v53, exprList) {
						return A2($author$project$Render$Elm$cite, acc, exprList);
					})),
				_Utils_Tuple2(
				'table',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$table, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'image',
				F4(
					function (_v54, _v55, s, exprList) {
						return A2($author$project$Render$Graphics$image, s, exprList);
					})),
				_Utils_Tuple2(
				'tags',
				F4(
					function (_v56, _v57, _v58, _v59) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2('vspace', $author$project$Render$Elm$vspace),
				_Utils_Tuple2('par', $author$project$Render$Elm$par),
				_Utils_Tuple2(
				'term',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$term, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'term_',
				F4(
					function (_v60, _v61, _v62, _v63) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'footnote',
				F4(
					function (_v64, acc, _v65, exprList) {
						return A2($author$project$Render$Elm$footnote, acc, exprList);
					})),
				_Utils_Tuple2(
				'emph',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$emph, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'group',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$identityFunction, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'dollarSign',
				F4(
					function (_v66, _v67, _v68, _v69) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('$'));
					})),
				_Utils_Tuple2(
				'dollar',
				F4(
					function (_v70, _v71, _v72, _v73) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('$'));
					})),
				_Utils_Tuple2(
				'brackets',
				F4(
					function (g, acc, s, exprList) {
						return A4($author$project$Render$Elm$brackets, g, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'rb',
				F4(
					function (_v74, _v75, _v76, _v77) {
						return $author$project$Render$Elm$rightBracket;
					})),
				_Utils_Tuple2(
				'lb',
				F4(
					function (_v78, _v79, _v80, _v81) {
						return $author$project$Render$Elm$leftBracket;
					})),
				_Utils_Tuple2(
				'bt',
				F4(
					function (_v82, _v83, _v84, _v85) {
						return $author$project$Render$Elm$backTick;
					})),
				_Utils_Tuple2(
				'ds',
				F4(
					function (_v86, _v87, _v88, _v89) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('$'));
					})),
				_Utils_Tuple2(
				'bs',
				F4(
					function (g, acc, s, exprList) {
						return A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$text('\\'),
								A2(
									$elm$core$List$map,
									A3($author$project$Render$Elm$render, g, acc, s),
									exprList)));
					})),
				_Utils_Tuple2(
				'texarg',
				F4(
					function (g, acc, s, exprList) {
						return A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_Utils_ap(
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$text('{'),
									A2(
										$elm$core$List$map,
										A3($author$project$Render$Elm$render, g, acc, s),
										exprList)),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(' }')
									])));
					})),
				_Utils_Tuple2(
				'backTick',
				F4(
					function (_v90, _v91, _v92, _v93) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('`'));
					}))
			]));
}
var $author$project$Render$Elm$markupDict = $author$project$Render$Elm$cyclic$markupDict();
$author$project$Render$Elm$cyclic$markupDict = function () {
	return $author$project$Render$Elm$markupDict;
};
var $author$project$Render$Block$renderWithDefault = F5(
	function (_default, count, acc, settings, exprs) {
		return $elm$core$List$isEmpty(exprs) ? _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Settings$redColor),
						$mdgriffith$elm_ui$Element$Font$size(14)
					]),
				$mdgriffith$elm_ui$Element$text(_default))
			]) : A2(
			$elm$core$List$map,
			A3($author$project$Render$Elm$render, count, acc, settings),
			exprs);
	});
var $author$project$Render$Block$answer = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var title = A2(
			$elm$core$String$join,
			' ',
			A2($elm$core$List$drop, 1, args));
		var id = $elm$core$String$fromInt(lineNumber);
		var clicker = _Utils_eq(settings.h0, id) ? $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$Render$Msg$ProposeSolution($author$project$Render$Msg$Unsolved)) : $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$Render$Msg$ProposeSolution(
				$author$project$Render$Msg$Solved(id)));
		var _v0 = _Utils_Tuple2(id, args);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 24, bb: 0, bf: 0, bh: 0})
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue),
							clicker
						]),
					$mdgriffith$elm_ui$Element$text(title)),
					_Utils_eq(settings.h0, id) ? A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Render$Msg$ProposeSolution($author$project$Render$Msg$Unsolved))
						]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$italic,
									$author$project$Render$Utility$idAttribute(lineNumber),
									A2($mdgriffith$elm_ui$Element$paddingXY, 8, 8)
								]),
							A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
						A5(
							$author$project$Render$Block$renderWithDefault,
							'...',
							count,
							acc,
							settings,
							$author$project$Render$Block$getExprs(block)))) : $mdgriffith$elm_ui$Element$none
				]));
	});
var $author$project$Render$Settings$topMarginForChildren = 6;
var $author$project$Render$Utility$vspace = F2(
	function (top, bottom) {
		return $mdgriffith$elm_ui$Element$paddingEach(
			{a4: bottom, bb: 0, bf: 0, bh: top});
	});
var $author$project$Render$Block$vspace = $author$project$Render$Utility$vspace;
var $author$project$Render$Block$bibitem = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var label = function (s) {
			return '[' + (s + ']');
		}(
			A2(
				$elm$core$Maybe$withDefault,
				'(12)',
				A2($elm_community$list_extra$List$Extra$getAt, 0, args)));
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignTop,
						$author$project$Render$Utility$idAttribute(lineNumber),
						A2($author$project$Render$Block$vspace, 0, $author$project$Render$Settings$topMarginForChildren)
					]),
				A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(34))
						]),
					$mdgriffith$elm_ui$Element$text(label)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$paddingEach(
								{a4: 0, bb: 25, bf: 0, bh: 0}),
								$author$project$Render$Utility$sendLineNumberOnClick(lineNumber)
							]),
						A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
					A5(
						$author$project$Render$Block$renderWithDefault,
						'bibitem',
						count,
						acc,
						settings,
						$author$project$Render$Block$getExprs(block)))
				]));
	});
var $elm$regex$Regex$never = _Regex_never;
var $elm_community$string_extra$String$Extra$regexFromString = A2(
	$elm$core$Basics$composeR,
	$elm$regex$Regex$fromString,
	$elm$core$Maybe$withDefault($elm$regex$Regex$never));
var $elm_community$string_extra$String$Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (_v0) {
					var head = _v0.a;
					var tail = _v0.b;
					return A2(
						$elm$core$String$cons,
						mutator(head),
						tail);
				},
				$elm$core$String$uncons(word)));
	});
var $elm$core$Char$toUpper = _Char_toUpper;
var $elm_community$string_extra$String$Extra$toSentenceCase = function (word) {
	return A2($elm_community$string_extra$String$Extra$changeCase, $elm$core$Char$toUpper, word);
};
var $elm_community$string_extra$String$Extra$toTitleCase = function (ws) {
	var uppercaseMatch = A2(
		$elm$regex$Regex$replace,
		$elm_community$string_extra$String$Extra$regexFromString('\\w+'),
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.cR;
			},
			$elm_community$string_extra$String$Extra$toSentenceCase));
	return A3(
		$elm$regex$Regex$replace,
		$elm_community$string_extra$String$Extra$regexFromString('^([a-z])|\\s+([a-z])'),
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.cR;
			},
			uppercaseMatch),
		ws);
};
var $author$project$Render$Block$blockHeading = F3(
	function (name, args, properties) {
		return A2(
			$elm$core$List$member,
			name,
			_List_fromArray(
				[
					$elm$core$Maybe$Just('banner_'),
					$elm$core$Maybe$Just('banner')
				])) ? '' : ($elm_community$string_extra$String$Extra$toTitleCase(
			A2($elm$core$Maybe$withDefault, '(name)', name)) + (' ' + (A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, 'label', properties)) + (' ' + A2($elm$core$String$join, ' ', args)))));
	});
var $author$project$Render$Color$lightBlue = A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 1.0);
var $author$project$Render$Block$box = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var name = block.fA;
		var args = block.gn;
		var properties = block.w;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 48, 0)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Color$lightBlue),
								$mdgriffith$elm_ui$Element$padding(20),
								$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
								$author$project$Render$Utility$idAttribute(lineNumber),
								$mdgriffith$elm_ui$Element$spacing(18)
							]),
						A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$bold]),
							$mdgriffith$elm_ui$Element$text(
								A3($author$project$Render$Block$blockHeading, name, args, properties))),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							A5(
								$author$project$Render$Block$renderWithDefault,
								'box',
								count,
								acc,
								settings,
								$author$project$Render$Block$getExprs(block)))
						]))
				]));
	});
var $author$project$Render$Block$collection = F4(
	function (_v0, _v1, _v2, _v3) {
		return $mdgriffith$elm_ui$Element$none;
	});
var $author$project$Render$Block$comment = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var author_ = A2($elm$core$String$join, ' ', args);
		var author = (author_ === '') ? '' : (author_ + ':');
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(6)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue)
						]),
					$mdgriffith$elm_ui$Element$text(author)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$italic,
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue),
								$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
								$author$project$Render$Utility$idAttribute(lineNumber)
							]),
						A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
					A5(
						$author$project$Render$Block$renderWithDefault,
						'| comment',
						count,
						acc,
						settings,
						$author$project$Render$Block$getExprs(block)))
				]));
	});
var $author$project$Render$Block$argString = function (args) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filter,
			function (arg) {
				return !A2($elm$core$String$contains, 'label:', arg);
			},
			args));
};
var $author$project$Render$Settings$leftIndentation = $mdgriffith$elm_ui$Element$paddingEach(
	{a4: 0, bb: 18, bf: 0, bh: 0});
var $author$project$Render$Block$desc = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var label = $author$project$Render$Block$argString(args);
		var id = $elm$core$String$fromInt(lineNumber);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignTop,
						$author$project$Render$Utility$idAttribute(lineNumber),
						A2($author$project$Render$Block$vspace, 0, $author$project$Render$Settings$topMarginForChildren)
					]),
				A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(100))
						]),
					$mdgriffith$elm_ui$Element$text(label)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$author$project$Render$Settings$leftIndentation,
							$author$project$Render$Utility$sendLineNumberOnClick(lineNumber)
						]),
					A5(
						$author$project$Render$Block$renderWithDefault,
						'| desc',
						count,
						acc,
						settings,
						$author$project$Render$Block$getExprs(block)))
				]));
	});
var $author$project$Render$Block$fontColor = F3(
	function (selectedId, selectedSlug, docId) {
		return _Utils_eq(selectedId, docId) ? $mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0)) : (_Utils_eq(
			selectedSlug,
			$elm$core$Maybe$Just(docId)) ? $mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0)) : $mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.9)));
	});
var $author$project$Render$Msg$GetPublicDocument = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$Render$Block$ilink = F4(
	function (docTitle, selectedId, selecteSlug, docId) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_Nil,
			{
				dB: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Font$size(14),
							A3($author$project$Render$Block$fontColor, selectedId, selecteSlug, docId)
						]),
					$mdgriffith$elm_ui$Element$text(docTitle)),
				fF: $elm$core$Maybe$Just(
					A2($author$project$Render$Msg$GetPublicDocument, 0, docId))
			});
	});
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $author$project$Render$Block$truncateString_ = F2(
	function (k, str) {
		if (_Utils_cmp(
			$elm$core$String$length(str),
			k) < 0) {
			return str;
		} else {
			var words = $elm$core$String$words(str);
			var n = $elm$core$List$length(words);
			return A2(
				$author$project$Render$Block$truncateString_,
				k,
				A2(
					$elm$core$String$join,
					' ',
					A2($elm$core$List$take, n - 1, words)));
		}
	});
var $author$project$Render$Block$truncateString = F2(
	function (k, str) {
		var str2 = A2($author$project$Render$Block$truncateString_, k, str);
		return _Utils_eq(str, str2) ? str : (str2 + ' ...');
	});
var $author$project$Render$Block$document = F4(
	function (_v0, _v1, settings, block) {
		var id = block.g7;
		var args = block.gn;
		var properties = block.w;
		var title = A2(
			$author$project$Render$Block$truncateString,
			35,
			A2(
				$elm$core$String$join,
				' ',
				$elm_community$maybe_extra$Maybe$Extra$values(
					A2(
						$elm$core$List$map,
						$author$project$Compiler$ASTTools$getText,
						$author$project$Render$Block$getExprs(block)))));
		var sectionNumber = function () {
			var _v5 = A2($elm$core$Dict$get, 'label', properties);
			if (!_v5.$) {
				if (_v5.a === '-') {
					return '- ';
				} else {
					var s = _v5.a;
					return s + '. ';
				}
			} else {
				return '- ';
			}
		}();
		var level = A2(
			$elm$core$Maybe$withDefault,
			1,
			$elm$core$String$toInt(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2($elm_community$list_extra$List$Extra$getAt, 1, args))));
		var docId = function () {
			var _v2 = $elm$core$List$head(args);
			if (!_v2.$) {
				var idx = _v2.a;
				return idx;
			} else {
				var _v3 = A2(
					$elm$core$Maybe$map,
					function (_v4) {
						var a = _v4.a;
						var b = _v4.b;
						return a + (':' + b);
					},
					$elm$core$List$head(
						$elm$core$Dict$toList(properties)));
				if (!_v3.$) {
					var ident = _v3.a;
					return ident;
				} else {
					return '(noId)';
				}
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					A2($author$project$Render$Utility$elementAttribute, 'id', settings.h0),
					A2($author$project$Render$Block$vspace, 0, $author$project$Render$Settings$topMarginForChildren),
					$mdgriffith$elm_ui$Element$moveRight(15 * (level - 1)),
					A3($author$project$Render$Block$fontColor, settings.h0, settings.h1, docId)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(30))
						]),
					$mdgriffith$elm_ui$Element$text(sectionNumber)),
					A4($author$project$Render$Block$ilink, title, settings.h0, settings.h1, docId)
				]));
	});
var $author$project$Render$Block$htmlId = function (str) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$id(str));
};
var $author$project$Render$Block$renderFootnote = function (_v0) {
	var label = _v0.dB;
	var content = _v0.bM;
	var id = _v0.g7;
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(4)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$author$project$Render$Block$htmlId(id),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(24))
					]),
				$mdgriffith$elm_ui$Element$text(
					$elm$core$String$fromInt(label) + '.')),
				$mdgriffith$elm_ui$Element$text(content)
			]));
};
var $author$project$Render$Block$endnotes = F4(
	function (_v0, acc, _v1, _v2) {
		var lineNumber = _v2.eo;
		var args = _v2.gn;
		var endnoteList = A2(
			$elm$core$List$sortBy,
			function ($) {
				return $.dB;
			},
			A2(
				$elm$core$List$map,
				function (_v3) {
					var content = _v3.a;
					var meta = _v3.b;
					return {
						bM: content,
						g7: meta.g7 + '_',
						dB: A2(
							$elm$core$Maybe$withDefault,
							0,
							A2($elm$core$Dict$get, meta.g7, acc.du))
					};
				},
				$elm$core$Dict$toList(acc.dv)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			A2(
				$elm$core$List$cons,
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text('Endnotes')),
				A2($elm$core$List$map, $author$project$Render$Block$renderFootnote, endnoteList)));
	});
var $author$project$Render$Block$renderWithDefault2 = F5(
	function (_v0, count, acc, settings, exprs) {
		return A2(
			$elm$core$List$map,
			A3($author$project$Render$Elm$render, count, acc, settings),
			exprs);
	});
var $author$project$Render$Block$env = F4(
	function (count, acc, settings, _v0) {
		var name = _v0.fA;
		var indent = _v0.hb;
		var args = _v0.gn;
		var blockType = _v0.dW;
		var content = _v0.bM;
		var lineNumber = _v0.eo;
		var properties = _v0.w;
		if (!content.$) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var exprs = content.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8),
							$author$project$Render$Utility$idAttribute(lineNumber)
						]),
					A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$bold,
								$author$project$Render$Utility$sendLineNumberOnClick(lineNumber)
							]),
						$mdgriffith$elm_ui$Element$text(
							A3($author$project$Render$Block$blockHeading, name, args, properties))),
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$italic,
								$author$project$Render$Utility$sendLineNumberOnClick(lineNumber)
							]),
						A5(
							$author$project$Render$Block$renderWithDefault2,
							'??' + A2($elm$core$Maybe$withDefault, '(name)', name),
							count,
							acc,
							settings,
							exprs))
					]));
		}
	});
var $author$project$Render$Block$env_ = F4(
	function (count, acc, settings, block) {
		var name = block.fA;
		var lineNumber = block.eo;
		var indent = block.hb;
		var args = block.gn;
		var blockType = block.dW;
		var content = block.bM;
		var properties = block.w;
		var _v0 = $elm$core$List$head(args);
		if (_v0.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$author$project$Render$Utility$idAttribute(lineNumber),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Settings$redColor),
						$author$project$Render$Utility$sendLineNumberOnClick(lineNumber)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text('| env (missing name!)')
					]));
		} else {
			return A4($author$project$Render$Block$env, count, acc, settings, block);
		}
	});
var $author$project$Render$Block$indented = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Render$Settings$leftIndentation,
						$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
						$author$project$Render$Utility$idAttribute(lineNumber)
					]),
				A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
			A5(
				$author$project$Render$Block$renderWithDefault,
				'indent',
				count,
				acc,
				settings,
				$author$project$Render$Block$getExprs(block)));
	});
var $elm_community$list_extra$List$Extra$greedyGroupsOfWithStep = F3(
	function (size, step, list) {
		if ((size <= 0) || (step <= 0)) {
			return _List_Nil;
		} else {
			var go = F2(
				function (xs, acc) {
					go:
					while (true) {
						if ($elm$core$List$isEmpty(xs)) {
							return $elm$core$List$reverse(acc);
						} else {
							var $temp$xs = A2($elm$core$List$drop, step, xs),
								$temp$acc = A2(
								$elm$core$List$cons,
								A2($elm$core$List$take, size, xs),
								acc);
							xs = $temp$xs;
							acc = $temp$acc;
							continue go;
						}
					}
				});
			return A2(go, list, _List_Nil);
		}
	});
var $elm_community$list_extra$List$Extra$greedyGroupsOf = F2(
	function (size, xs) {
		return A3($elm_community$list_extra$List$Extra$greedyGroupsOfWithStep, size, size, xs);
	});
var $author$project$Render$Block$GBlankLine = {$: 0};
var $author$project$Render$Block$GItem = function (a) {
	return {$: 1, a: a};
};
var $author$project$Render$Block$group = function (_v0) {
	var item_ = _v0.a;
	var list = _v0.b;
	return A2(
		$elm$core$List$cons,
		$author$project$Render$Block$GBlankLine,
		A2(
			$elm$core$List$cons,
			$author$project$Render$Block$GItem(item_),
			A2($elm$core$List$map, $author$project$Render$Block$GItem, list)));
};
var $elm_community$list_extra$List$Extra$groupWhile = F2(
	function (isSameGroup, items) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					if (!acc.b) {
						return _List_fromArray(
							[
								_Utils_Tuple2(x, _List_Nil)
							]);
					} else {
						var _v1 = acc.a;
						var y = _v1.a;
						var restOfGroup = _v1.b;
						var groups = acc.b;
						return A2(isSameGroup, x, y) ? A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								x,
								A2($elm$core$List$cons, y, restOfGroup)),
							groups) : A2(
							$elm$core$List$cons,
							_Utils_Tuple2(x, _List_Nil),
							acc);
					}
				}),
			_List_Nil,
			items);
	});
var $author$project$Render$Block$normalize = function (gp) {
	var _v0 = $elm$core$List$head(gp);
	if (!_v0.$) {
		if (!_v0.a.$) {
			var _v1 = _v0.a;
			return A2($elm$core$List$drop, 1, gp);
		} else {
			return gp;
		}
	} else {
		return gp;
	}
};
var $author$project$Render$Block$indexItem_ = function (_v0) {
	var name = _v0.a;
	var loc = _v0.b;
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8)),
				$mdgriffith$elm_ui$Element$Events$onClick(
				$author$project$Render$Msg$SelectId(loc.g7))
			]),
		{
			dB: A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text(
					$elm$core$String$toLower(name))),
			f1: $author$project$Render$Utility$internalLink(loc.g7)
		});
};
var $author$project$Render$Block$indexItem = function (groupItem) {
	if (!groupItem.$) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(8))
				]),
			$mdgriffith$elm_ui$Element$text(''));
	} else {
		var item_ = groupItem.a;
		return $author$project$Render$Block$indexItem_(item_);
	}
};
var $author$project$Render$Block$renderGroup = function (groupItems) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$spacing(6),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(150))
			]),
		A2($elm$core$List$map, $author$project$Render$Block$indexItem, groupItems));
};
var $author$project$Render$Block$index = F4(
	function (_v0, acc, _v1, _v2) {
		var lineNumber = _v2.eo;
		var args = _v2.gn;
		var groupItemList = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (thing) {
					return $author$project$Render$Block$group(thing);
				},
				A2(
					$elm_community$list_extra$List$Extra$groupWhile,
					F2(
						function (a, b) {
							return _Utils_eq(
								A2($elm$core$String$left, 1, a.a),
								A2($elm$core$String$left, 1, b.a));
						}),
					A2(
						$elm$core$List$sortBy,
						function (_v4) {
							var name = _v4.a;
							return name;
						},
						A2(
							$elm$core$List$map,
							function (_v3) {
								var name = _v3.a;
								var item_ = _v3.b;
								return _Utils_Tuple2(
									$elm$core$String$trim(name),
									item_);
							},
							$elm$core$Dict$toList(acc.dM))))));
		var groupItemListList = A2(
			$elm$core$List$map,
			$author$project$Render$Block$normalize,
			A2($elm_community$list_extra$List$Extra$greedyGroupsOf, 30, groupItemList));
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(18)
				]),
			A2($elm$core$List$map, $author$project$Render$Block$renderGroup, groupItemListList));
	});
var $author$project$Render$Block$indentationScale = 15;
var $elm$core$Basics$modBy = _Basics_modBy;
var $author$project$Render$Block$item = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var id = $elm$core$String$fromInt(lineNumber);
		var level = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.en;
				},
				A2($elm$core$Dict$get, id, acc.bd)));
		var label = function () {
			var _v0 = A2($elm$core$Basics$modBy, 3, level);
			switch (_v0) {
				case 0:
					return $elm$core$String$fromChar('●');
				case 1:
					return $elm$core$String$fromChar('○');
				default:
					return '◊';
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveRight($author$project$Render$Block$indentationScale * level),
					$mdgriffith$elm_ui$Element$alignTop,
					$author$project$Render$Utility$idAttribute(lineNumber),
					A2($author$project$Render$Block$vspace, 0, $author$project$Render$Settings$topMarginForChildren)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$moveRight(6),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(24)),
							$author$project$Render$Settings$leftIndentation
						]),
					$mdgriffith$elm_ui$Element$text(label)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$author$project$Render$Settings$leftIndentation,
							$author$project$Render$Utility$sendLineNumberOnClick(lineNumber)
						]),
					A5(
						$author$project$Render$Block$renderWithDefault,
						'| item',
						count,
						acc,
						settings,
						$author$project$Render$Block$getExprs(block)))
				]));
	});
var $author$project$Render$Settings$leftRightIndentation = $mdgriffith$elm_ui$Element$paddingEach(
	{a4: 0, bb: 18, bf: 8, bh: 0});
var $author$project$Render$Block$numbered = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var romanNumerals = _List_fromArray(
			['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'vi']);
		var roman = function (k) {
			return A2(
				$elm$core$Maybe$withDefault,
				'i',
				A2(
					$elm_community$list_extra$List$Extra$getAt,
					A2($elm$core$Basics$modBy, 26, k - 1),
					romanNumerals));
		};
		var id = $elm$core$String$fromInt(lineNumber);
		var val = A2($elm$core$Dict$get, id, acc.bd);
		var index_ = A2(
			$elm$core$Maybe$withDefault,
			1,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.dy;
				},
				val));
		var level = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.en;
				},
				val));
		var alphabet = _List_fromArray(
			['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']);
		var alpha = function (k) {
			return A2(
				$elm$core$Maybe$withDefault,
				'a',
				A2(
					$elm_community$list_extra$List$Extra$getAt,
					A2($elm$core$Basics$modBy, 26, k - 1),
					alphabet));
		};
		var label = function () {
			var _v0 = A2($elm$core$Basics$modBy, 3, level);
			switch (_v0) {
				case 1:
					return alpha(index_);
				case 2:
					return roman(index_);
				default:
					return $elm$core$String$fromInt(index_);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveRight($author$project$Render$Block$indentationScale * level),
					$mdgriffith$elm_ui$Element$alignTop,
					$author$project$Render$Utility$idAttribute(lineNumber),
					A2($author$project$Render$Block$vspace, 0, $author$project$Render$Settings$topMarginForChildren)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(24)),
							$author$project$Render$Settings$leftRightIndentation
						]),
					$mdgriffith$elm_ui$Element$text(label + '. ')),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$author$project$Render$Settings$leftIndentation,
							$author$project$Render$Utility$sendLineNumberOnClick(lineNumber)
						]),
					A5(
						$author$project$Render$Block$renderWithDefault,
						'| numbered',
						count,
						acc,
						settings,
						$author$project$Render$Block$getExprs(block)))
				]));
	});
var $author$project$Render$Msg$HighlightId = function (a) {
	return {$: 3, a: a};
};
var $author$project$Render$Block$getLabel = function (dict) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'label', dict));
};
var $author$project$Render$Block$question = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var properties = block.w;
		var title = A2($elm$core$String$join, ' ', args);
		var label = ' ' + $author$project$Render$Block$getLabel(properties);
		var id = $elm$core$String$fromInt(lineNumber);
		var qId = A2(
			$elm$core$Maybe$withDefault,
			id,
			A2($elm$core$Dict$get, id, acc.eB));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue),
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Render$Msg$HighlightId(qId))
						]),
					$mdgriffith$elm_ui$Element$text(title + (' ' + label))),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$italic,
								$mdgriffith$elm_ui$Element$Events$onClick(
								$author$project$Render$Msg$HighlightId(qId)),
								$author$project$Render$Utility$idAttribute(lineNumber)
							]),
						A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
					A5(
						$author$project$Render$Block$renderWithDefault,
						'...',
						count,
						acc,
						settings,
						$author$project$Render$Block$getExprs(block)))
				]));
	});
var $author$project$Render$Block$quotation = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var properties = block.w;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$italic,
								$author$project$Render$Settings$leftIndentation,
								$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
								$author$project$Render$Utility$idAttribute(lineNumber)
							]),
						A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
					A5(
						$author$project$Render$Block$renderWithDefault,
						'(quotation)',
						count,
						acc,
						settings,
						$author$project$Render$Block$getExprs(block)))
				]));
	});
var $author$project$Render$Block$blockLabel = function (properties) {
	return A2(
		$elm$core$Maybe$withDefault,
		'??',
		A2($elm$core$Dict$get, 'label', properties));
};
var $author$project$Compiler$ASTTools$stringValue = function (text) {
	switch (text.$) {
		case 1:
			var str = text.a;
			return str;
		case 0:
			var textList = text.b;
			return A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$map, $author$project$Compiler$ASTTools$stringValue, textList));
		default:
			var str = text.b;
			return str;
	}
};
var $author$project$Compiler$ASTTools$stringValueOfList = function (textList) {
	return A2(
		$elm$core$String$join,
		' ',
		A2($elm$core$List$map, $author$project$Compiler$ASTTools$stringValue, textList));
};
var $author$project$Render$Utility$makeId = function (exprs) {
	return A2(
		$author$project$Render$Utility$elementAttribute,
		'id',
		$author$project$Render$Utility$makeSlug(
			$elm$core$String$trim(
				$author$project$Compiler$ASTTools$stringValueOfList(exprs))));
};
var $author$project$Render$Settings$maxHeadingFontSize = 32;
var $author$project$Render$Block$renderWithDefaultWithSize = F6(
	function (size, _default, count, acc, settings, exprs) {
		return $elm$core$List$isEmpty(exprs) ? _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Settings$redColor),
						$mdgriffith$elm_ui$Element$Font$size(size)
					]),
				$mdgriffith$elm_ui$Element$text(_default))
			]) : A2(
			$elm$core$List$map,
			A3($author$project$Render$Elm$render, count, acc, settings),
			exprs);
	});
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $author$project$Render$Block$section = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var properties = block.w;
		var headingLevel = function () {
			var _v1 = $elm$core$List$head(args);
			if (_v1.$ === 1) {
				return 3;
			} else {
				var level = _v1.a;
				return function (x) {
					return x + 1;
				}(
					A2(
						$elm$core$Maybe$withDefault,
						2,
						$elm$core$String$toFloat(level)));
			}
		}();
		var fontSize = $elm$core$Basics$round(
			$author$project$Render$Settings$maxHeadingFontSize / $elm$core$Basics$sqrt(headingLevel));
		var sectionNumber = function () {
			var _v0 = A2($elm_community$list_extra$List$Extra$getAt, 1, args);
			if ((!_v0.$) && (_v0.a === '-')) {
				return $mdgriffith$elm_ui$Element$none;
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(fontSize)
						]),
					$mdgriffith$elm_ui$Element$text(
						$author$project$Render$Block$blockLabel(properties) + '. '));
			}
		}();
		var exprs = $author$project$Render$Block$getExprs(block);
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(fontSize),
						$author$project$Render$Utility$makeId(exprs),
						$author$project$Render$Utility$idAttribute(lineNumber),
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$Render$Msg$SendLineNumber('title')),
						$mdgriffith$elm_ui$Element$paddingEach(
						{a4: 0, bb: 0, bf: 0, bh: 20})
					]),
				A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
			{
				dB: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					A2(
						$elm$core$List$cons,
						sectionNumber,
						A6($author$project$Render$Block$renderWithDefaultWithSize, 18, '??', count, acc, settings, exprs))),
				f1: $author$project$Render$Utility$internalLink(settings.fW + 'title')
			});
	});
var $author$project$Render$Block$subheading = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$Font$bold,
						$author$project$Render$Utility$makeId(
						$author$project$Render$Block$getExprs(block)),
						$author$project$Render$Utility$idAttribute(lineNumber),
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$Render$Msg$SendLineNumber('title')),
						$mdgriffith$elm_ui$Element$paddingEach(
						{a4: 0, bb: 0, bf: 0, bh: 10})
					]),
				A2($author$project$Render$Block$highlightAttrs, lineNumber, settings)),
			{
				dB: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					A5(
						$author$project$Render$Block$renderWithDefault,
						'| subheading',
						count,
						acc,
						settings,
						$author$project$Render$Block$getExprs(block))),
				f1: $author$project$Render$Utility$internalLink(settings.fW + 'title')
			});
	});
var $author$project$Render$Block$blockDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('indent', $author$project$Render$Block$indented),
			_Utils_Tuple2('box', $author$project$Render$Block$box),
			_Utils_Tuple2('quotation', $author$project$Render$Block$quotation),
			_Utils_Tuple2(
			'set-key',
			F4(
				function (_v0, _v1, _v2, _v3) {
					return $mdgriffith$elm_ui$Element$none;
				})),
			_Utils_Tuple2('comment', $author$project$Render$Block$comment),
			_Utils_Tuple2('q', $author$project$Render$Block$question),
			_Utils_Tuple2('a', $author$project$Render$Block$answer),
			_Utils_Tuple2('document', $author$project$Render$Block$document),
			_Utils_Tuple2('collection', $author$project$Render$Block$collection),
			_Utils_Tuple2('bibitem', $author$project$Render$Block$bibitem),
			_Utils_Tuple2('section', $author$project$Render$Block$section),
			_Utils_Tuple2('subheading', $author$project$Render$Block$subheading),
			_Utils_Tuple2(
			'runninghead_',
			F4(
				function (_v4, _v5, _v6, _v7) {
					return $mdgriffith$elm_ui$Element$none;
				})),
			_Utils_Tuple2(
			'banner',
			F4(
				function (_v8, _v9, _v10, _v11) {
					return $mdgriffith$elm_ui$Element$none;
				})),
			_Utils_Tuple2(
			'title',
			F4(
				function (_v12, _v13, _v14, _v15) {
					return $mdgriffith$elm_ui$Element$none;
				})),
			_Utils_Tuple2(
			'subtitle',
			F4(
				function (_v16, _v17, _v18, _v19) {
					return $mdgriffith$elm_ui$Element$none;
				})),
			_Utils_Tuple2(
			'author',
			F4(
				function (_v20, _v21, _v22, _v23) {
					return $mdgriffith$elm_ui$Element$none;
				})),
			_Utils_Tuple2(
			'date',
			F4(
				function (_v24, _v25, _v26, _v27) {
					return $mdgriffith$elm_ui$Element$none;
				})),
			_Utils_Tuple2(
			'contents',
			F4(
				function (_v28, _v29, _v30, _v31) {
					return $mdgriffith$elm_ui$Element$none;
				})),
			_Utils_Tuple2(
			'tags',
			F4(
				function (_v32, _v33, _v34, _v35) {
					return $mdgriffith$elm_ui$Element$none;
				})),
			_Utils_Tuple2(
			'type',
			F4(
				function (_v36, _v37, _v38, _v39) {
					return $mdgriffith$elm_ui$Element$none;
				})),
			_Utils_Tuple2('env', $author$project$Render$Block$env_),
			_Utils_Tuple2('item', $author$project$Render$Block$item),
			_Utils_Tuple2('desc', $author$project$Render$Block$desc),
			_Utils_Tuple2('numbered', $author$project$Render$Block$numbered),
			_Utils_Tuple2('index', $author$project$Render$Block$index),
			_Utils_Tuple2('endnotes', $author$project$Render$Block$endnotes),
			_Utils_Tuple2(
			'setcounter',
			F4(
				function (_v40, _v41, _v42, _v43) {
					return $mdgriffith$elm_ui$Element$none;
				}))
		]));
var $author$project$Render$Block$selectedColor = F2(
	function (id, settings) {
		return _Utils_eq(id, settings.h0) ? $mdgriffith$elm_ui$Element$Background$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 1.0)) : $mdgriffith$elm_ui$Element$Background$color(settings.gq);
	});
var $author$project$Render$Block$topPaddingForIndentedElements = 10;
var $author$project$Render$Block$indentOrdinaryBlock = F4(
	function (indent, id, settings, x) {
		return (indent > 0) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$Render$Block$selectedColor, id, settings),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 0, bb: 0, bf: 0, bh: $author$project$Render$Block$topPaddingForIndentedElements})
				]),
			x) : x;
	});
var $author$project$Render$Block$noSuchOrdinaryBlock = F4(
	function (count, acc, settings, block) {
		var args = block.gn;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(4)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb255, 180, 0, 0))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							'No such block:' + A2($elm$core$String$join, ' ', args))
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					A2(
						$elm$core$List$map,
						A3($author$project$Render$Elm$render, count, acc, settings),
						$author$project$Render$Block$getExprs(block)))
				]));
	});
var $author$project$Render$Block$renderOrdinaryBlock = F4(
	function (count, acc, settings, block) {
		var name = block.fA;
		var indent = block.hb;
		var error = block.fb;
		var args = block.gn;
		var blockType = block.dW;
		var content = block.bM;
		var lineNumber = block.eo;
		if (!content.$) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			if (name.$ === 1) {
				return A4($author$project$Render$Block$noSuchOrdinaryBlock, count, acc, settings, block);
			} else {
				var functionName = name.a;
				var _v2 = A2($elm$core$Dict$get, functionName, $author$project$Render$Block$blockDict);
				if (_v2.$ === 1) {
					return A4(
						$author$project$Render$Block$indentOrdinaryBlock,
						indent,
						$elm$core$String$fromInt(lineNumber),
						settings,
						A4($author$project$Render$Block$env, count, acc, settings, block));
				} else {
					var f = _v2.a;
					return A4(
						$author$project$Render$Block$indentOrdinaryBlock,
						indent,
						$elm$core$String$fromInt(lineNumber),
						settings,
						A4(f, count, acc, settings, block));
				}
			}
		}
	});
var $author$project$Render$Block$clickableParagraph = F3(
	function (lineNumber, color, elements) {
		var id = $elm$core$String$fromInt(lineNumber);
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					color,
					$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
					$author$project$Render$Block$htmlId(id)
				]),
			elements);
	});
var $author$project$Render$Block$indentParagraph = F2(
	function (indent, x) {
		return (indent > 0) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 0, bb: 0, bf: 0, bh: $author$project$Render$Block$topPaddingForIndentedElements})
				]),
			x) : x;
	});
var $author$project$Render$Block$renderParagraph = F4(
	function (count, acc, settings, _v0) {
		var name = _v0.fA;
		var indent = _v0.hb;
		var args = _v0.gn;
		var blockType = _v0.dW;
		var content = _v0.bM;
		var lineNumber = _v0.eo;
		var id = _v0.g7;
		if (content.$ === 1) {
			var exprs = content.a;
			return A2(
				$author$project$Render$Block$indentParagraph,
				indent,
				A3(
					$author$project$Render$Block$clickableParagraph,
					lineNumber,
					A2($author$project$Render$Block$selectedColor, id, settings),
					A2(
						$elm$core$List$map,
						A3($author$project$Render$Elm$render, count, acc, settings),
						exprs)));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Block$noSuchVerbatimBlock = F2(
	function (functionName, content) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(4)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb255, 180, 0, 0))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('No such block: ' + functionName)
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(4)
						]),
					A2(
						$elm$core$List$map,
						function (t) {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(t));
						},
						$elm$core$String$lines(content)))
				]));
	});
var $author$project$Render$Math$DisplayMathMode = 1;
var $author$project$Render$Math$aligned_ = F6(
	function (count, acc, settings, _v0, id, str) {
		var w = $elm$core$String$fromInt(settings.eS) + 'px';
		var leftPadding = $mdgriffith$elm_ui$Element$paddingEach(
			{a4: 0, bb: 45, bf: 0, bh: 0});
		var filteredLines = A2(
			$elm$core$List$filter,
			function (line) {
				return (!(A2($elm$core$String$left, 6, line) === '[label')) && (!(line === ''));
			},
			$elm$core$String$lines(str));
		var deleteTrailingSlashes = function (str_) {
			return (A2($elm$core$String$right, 2, str_) === '\\\\') ? A2($elm$core$String$dropRight, 2, str_) : str_;
		};
		var attrs = _Utils_eq(id, settings.h0) ? _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Events$onClick(
				$author$project$Render$Msg$SendLineNumber(id)),
				leftPadding,
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 1.0))
			]) : _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Events$onClick(
				$author$project$Render$Msg$SendLineNumber(id)),
				leftPadding
			]);
		var adjustedLines_ = A2(
			$elm$core$List$map,
			function (line) {
				return line + '\\\\';
			},
			A2(
				$elm$core$List$filter,
				function (line) {
					return line !== '';
				},
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						deleteTrailingSlashes,
						$author$project$Parser$MathMacro$evalStr(acc.ep)),
					filteredLines)));
		var adjustedLines = A2(
			$elm$core$List$cons,
			'\\begin{aligned}',
			_Utils_ap(
				adjustedLines_,
				_List_fromArray(
					['\\end{aligned}'])));
		var content = A2($elm$core$String$join, '\n', adjustedLines);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			attrs,
			_List_fromArray(
				[
					A5($author$project$Render$Math$mathText, count, w, id, 1, content)
				]));
	});
var $author$project$Render$Math$equationLabelPadding = $mdgriffith$elm_ui$Element$paddingEach(
	{a4: 0, bb: 0, bf: 18, bh: 0});
var $author$project$Render$Math$getContent = function (_v0) {
	var content = _v0.bM;
	if (!content.$) {
		var str = content.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Render$Math$getLabel = F2(
	function (label, dict) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, label, dict));
	});
var $author$project$Render$Math$aligned = F4(
	function (count, acc, settings, block) {
		var id = block.g7;
		var args = block.gn;
		var properties = block.w;
		var error = block.fb;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.eS)),
							A2($author$project$Render$Utility$elementAttribute, 'id', id)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							A6(
								$author$project$Render$Math$aligned_,
								count,
								acc,
								settings,
								args,
								id,
								$author$project$Render$Math$getContent(block))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignRight,
									$mdgriffith$elm_ui$Element$Font$size(12),
									$author$project$Render$Math$equationLabelPadding
								]),
							$mdgriffith$elm_ui$Element$text(
								'(' + (A2($author$project$Render$Math$getLabel, 'equation', properties) + ')')))
						]))
				]));
	});
var $author$project$Render$Data$ChartData2D = function (a) {
	return {$: 0, a: a};
};
var $author$project$Render$Data$ChartData3D = function (a) {
	return {$: 1, a: a};
};
var $author$project$Render$Data$valueOfPair = function (_v0) {
	var ma = _v0.a;
	var mb = _v0.b;
	var _v1 = _Utils_Tuple2(ma, mb);
	if ((!_v1.a.$) && (!_v1.b.$)) {
		var a = _v1.a.a;
		var b = _v1.b.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(a, b));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$Data$listTo2DPoint = function (list) {
	if (list.b && list.b.b) {
		var x = list.a;
		var _v1 = list.b;
		var y = _v1.a;
		var rest = _v1.b;
		return A2(
			$elm$core$Maybe$map,
			function (_v2) {
				var u = _v2.a;
				var v = _v2.b;
				return {bD: u, bj: v};
			},
			$author$project$Render$Data$valueOfPair(
				_Utils_Tuple2(
					$elm$core$String$toFloat(
						$elm$core$String$trim(x)),
					$elm$core$String$toFloat(
						$elm$core$String$trim(y)))));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$Data$csvTo2DData = function (data) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$Render$Data$listTo2DPoint, data));
};
var $author$project$Render$Data$valueOfTriple = function (_v0) {
	var ma = _v0.a;
	var mb = _v0.b;
	var mc = _v0.c;
	var _v1 = _Utils_Tuple3(ma, mb, mc);
	if (((!_v1.a.$) && (!_v1.b.$)) && (!_v1.c.$)) {
		var a = _v1.a.a;
		var b = _v1.b.a;
		var c = _v1.c.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple3(a, b, c));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$Data$listTo3DPoint = function (list) {
	if ((list.b && list.b.b) && list.b.b.b) {
		var x = list.a;
		var _v1 = list.b;
		var y = _v1.a;
		var _v2 = _v1.b;
		var z = _v2.a;
		var rest = _v2.b;
		return A2(
			$elm$core$Maybe$map,
			function (_v3) {
				var u = _v3.a;
				var v = _v3.b;
				var w = _v3.c;
				return {bD: u, bj: v, f8: w};
			},
			$author$project$Render$Data$valueOfTriple(
				_Utils_Tuple3(
					$elm$core$String$toFloat(
						$elm$core$String$trim(x)),
					$elm$core$String$toFloat(
						$elm$core$String$trim(y)),
					$elm$core$String$toFloat(
						$elm$core$String$trim(z)))));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$Data$csvTo3DData = function (data) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$Render$Data$listTo3DPoint, data));
};
var $author$project$Render$Data$makeTimeseries = function (data) {
	return A2(
		$elm$core$List$indexedMap,
		F2(
			function (i, oneList) {
				return A2(
					$elm$core$List$cons,
					$elm$core$String$fromInt(i),
					oneList);
			}),
		data);
};
var $author$project$Render$Data$maybeApply = F3(
	function (maybe, f, x) {
		if (!maybe.$) {
			return f(x);
		} else {
			return x;
		}
	});
var $author$project$Render$Data$applyFunctions = F2(
	function (fs, a) {
		return $elm$core$List$reverse(
			A3(
				$elm$core$List$foldl,
				F2(
					function (f, acc) {
						return A2(
							$elm$core$List$cons,
							f(a),
							acc);
					}),
				_List_Nil,
				fs));
	});
var $elm_community$maybe_extra$Maybe$Extra$combineHelp = F2(
	function (list, acc) {
		combineHelp:
		while (true) {
			if (list.b) {
				var head = list.a;
				var tail = list.b;
				if (!head.$) {
					var a = head.a;
					var $temp$list = tail,
						$temp$acc = A2($elm$core$List$cons, a, acc);
					list = $temp$list;
					acc = $temp$acc;
					continue combineHelp;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Just(
					$elm$core$List$reverse(acc));
			}
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$combine = function (list) {
	return A2($elm_community$maybe_extra$Maybe$Extra$combineHelp, list, _List_Nil);
};
var $author$project$Render$Data$select = F2(
	function (columns_, data) {
		if (columns_.$ === 1) {
			return $elm$core$Maybe$Just(data);
		} else {
			var columns = columns_.a;
			var selectors = A2($elm$core$List$map, $elm_community$list_extra$List$Extra$getAt, columns);
			return $elm_community$maybe_extra$Maybe$Extra$combine(
				A2($author$project$Render$Data$applyFunctions, selectors, data));
		}
	});
var $author$project$Render$Data$selectColumns = F2(
	function (columns, data) {
		return _Utils_eq(
			columns,
			$elm$core$Maybe$Just(_List_Nil)) ? $elm$core$Maybe$Just(data) : A2(
			$elm$core$Maybe$map,
			$elm_community$list_extra$List$Extra$transpose,
			A2(
				$author$project$Render$Data$select,
				columns,
				$elm_community$list_extra$List$Extra$transpose(data)));
	});
var $author$project$Render$Data$csvToChartData = F2(
	function (options, str) {
		var dataLines = A3(
			$author$project$Render$Data$maybeApply,
			options.eE,
			$elm$core$List$reverse,
			A2(
				$elm$core$List$filter,
				function (line) {
					return ($elm$core$String$trim(line) !== '') && (A2($elm$core$String$left, 1, line) !== '#');
				},
				$elm$core$String$lines(str)));
		var data_ = function () {
			var _v3 = options.eN;
			if (!_v3.$) {
				return A2(
					$elm$core$Maybe$map,
					$author$project$Render$Data$makeTimeseries,
					A2(
						$author$project$Render$Data$selectColumns,
						options.dj,
						A2(
							$elm$core$List$map,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$split(','),
								$elm$core$List$map($elm$core$String$trim)),
							dataLines)));
			} else {
				return A2(
					$author$project$Render$Data$selectColumns,
					options.dj,
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$split(','),
							$elm$core$List$map($elm$core$String$trim)),
						dataLines));
			}
		}();
		var dimension = A2(
			$elm$core$Maybe$map,
			$elm$core$List$length,
			A2($elm$core$Maybe$andThen, $elm$core$List$head, data_));
		var _v0 = _Utils_Tuple2(dimension, data_);
		if (_v0.a.$ === 1) {
			var _v1 = _v0.a;
			return $elm$core$Maybe$Nothing;
		} else {
			if (_v0.b.$ === 1) {
				var _v2 = _v0.b;
				return $elm$core$Maybe$Nothing;
			} else {
				switch (_v0.a.a) {
					case 2:
						var data = _v0.b.a;
						return $elm$core$Maybe$Just(
							$author$project$Render$Data$ChartData2D(
								$author$project$Render$Data$csvTo2DData(data)));
					case 3:
						var data = _v0.b.a;
						return $elm$core$Maybe$Just(
							$author$project$Render$Data$ChartData3D(
								$author$project$Render$Data$csvTo3DData(data)));
					default:
						return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $author$project$Render$Data$getArg = F2(
	function (name, args) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				function (item) {
					return A2($elm$core$String$contains, name, item);
				},
				args));
	});
var $author$project$Render$Data$getRange = function (str) {
	var _v0 = A2(
		$elm$core$List$take,
		2,
		A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ',', str)));
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var low = _v0.a;
		var _v1 = _v0.b;
		var high = _v1.a;
		return $elm$core$Maybe$Just(
			{
				eg: $elm$core$String$toFloat(high),
				b0: $elm$core$String$toFloat(low)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $terezka$charts$Internal$Property$Property = function (a) {
	return {$: 0, a: a};
};
var $terezka$charts$Internal$Property$property = F3(
	function (value, inter, attrs) {
		return $terezka$charts$Internal$Property$Property(
			{
				l: attrs,
				gV: F5(
					function (_v0, _v1, _v2, _v3, _v4) {
						return _List_Nil;
					}),
				ak: A2(
					$elm$core$Basics$composeR,
					value,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map($elm$core$String$fromFloat),
						$elm$core$Maybe$withDefault('N/A'))),
				hj: inter,
				fv: $elm$core$Maybe$Nothing,
				ag: value,
				db: value
			});
	});
var $terezka$charts$Chart$bar = function (y) {
	return A2(
		$terezka$charts$Internal$Property$property,
		A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
		_List_Nil);
};
var $terezka$charts$Chart$BarsElement = F5(
	function (a, b, c, d, e) {
		return {$: 2, a: a, b: b, c: c, d: d, e: e};
	});
var $terezka$charts$Chart$Indexed = function (a) {
	return {$: 0, a: a};
};
var $terezka$charts$Internal$Many$apply = F2(
	function (_v0, items) {
		var func = _v0.b;
		return func(items);
	});
var $terezka$charts$Chart$Item$apply = $terezka$charts$Internal$Many$apply;
var $terezka$charts$Internal$Helpers$apply = F2(
	function (funcs, _default) {
		var apply_ = F2(
			function (f, a) {
				return f(a);
			});
		return A3($elm$core$List$foldl, apply_, _default, funcs);
	});
var $terezka$charts$Internal$Many$Remodel = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $terezka$charts$Internal$Item$Rendered = $elm$core$Basics$identity;
var $terezka$charts$Internal$Many$editLimits = F2(
	function (edit, _v0) {
		var group_ = _v0;
		return _Utils_update(
			group_,
			{
				iG: function (c) {
					return function (_v1) {
						var x = _v1.a;
						var xs = _v1.b;
						return A2(
							edit,
							x,
							group_.iG(c));
					}(c.at);
				}
			});
	});
var $terezka$charts$Internal$Item$getPosition = F2(
	function (plane, _v0) {
		var item = _v0;
		return A2(item.iJ, plane, item.gJ);
	});
var $terezka$charts$Internal$Item$getX1 = function (_v0) {
	var item = _v0;
	return item.gJ.iS.ct;
};
var $terezka$charts$Internal$Item$getX2 = function (_v0) {
	var item = _v0;
	return item.gJ.iS.dc;
};
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $terezka$charts$Internal$Helpers$gatherWith = F2(
	function (testFn, list) {
		var helper = F2(
			function (scattered, gathered) {
				if (!scattered.b) {
					return $elm$core$List$reverse(gathered);
				} else {
					var toGather = scattered.a;
					var population = scattered.b;
					var _v1 = A2(
						$elm$core$List$partition,
						testFn(toGather),
						population);
					var gathering = _v1.a;
					var remaining = _v1.b;
					return A2(
						helper,
						remaining,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(toGather, gathering),
							gathered));
				}
			});
		return A2(helper, list, _List_Nil);
	});
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $terezka$charts$Internal$Coordinates$Position = F4(
	function (x1, x2, y1, y2) {
		return {ct: x1, dc: x2, iZ: y1, eX: y2};
	});
var $terezka$charts$Internal$Coordinates$foldPosition = F2(
	function (func, data) {
		var fold = F2(
			function (datum, posM) {
				if (!posM.$) {
					var pos = posM.a;
					return $elm$core$Maybe$Just(
						{
							ct: A2(
								$elm$core$Basics$min,
								func(datum).ct,
								pos.ct),
							dc: A2(
								$elm$core$Basics$max,
								func(datum).dc,
								pos.dc),
							iZ: A2(
								$elm$core$Basics$min,
								func(datum).iZ,
								pos.iZ),
							eX: A2(
								$elm$core$Basics$max,
								func(datum).eX,
								pos.eX)
						});
				} else {
					return $elm$core$Maybe$Just(
						func(datum));
				}
			});
		return A2(
			$elm$core$Maybe$withDefault,
			A4($terezka$charts$Internal$Coordinates$Position, 0, 0, 0, 0),
			A3($elm$core$List$foldl, fold, $elm$core$Maybe$Nothing, data));
	});
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $terezka$charts$Internal$Item$getLimits = function (_v0) {
	var item = _v0;
	return item.iG(item.gJ);
};
var $elm$html$Html$table = _VirtualDom_node('table');
var $terezka$charts$Internal$Item$toHtml = function (_v0) {
	var item = _v0;
	return item.iF(item.gJ);
};
var $terezka$charts$Internal$Item$toSvg = F2(
	function (plane, _v0) {
		var item = _v0;
		return A3(
			item.iK,
			plane,
			item.gJ,
			A2(item.iJ, plane, item.gJ));
	});
var $terezka$charts$Internal$Many$toGroup = F2(
	function (first, rest) {
		var concatTuple = function (_v1) {
			var x = _v1.a;
			var xs = _v1.b;
			return A2($elm$core$List$cons, x, xs);
		};
		return {
			gJ: {
				at: _Utils_Tuple2(first, rest)
			},
			iF: function (c) {
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$table,
						_List_Nil,
						A2(
							$elm$core$List$concatMap,
							$terezka$charts$Internal$Item$toHtml,
							concatTuple(c.at)))
					]);
			},
			iG: function (c) {
				return A2(
					$terezka$charts$Internal$Coordinates$foldPosition,
					$terezka$charts$Internal$Item$getLimits,
					concatTuple(c.at));
			},
			iJ: F2(
				function (p, c) {
					return A2(
						$terezka$charts$Internal$Coordinates$foldPosition,
						$terezka$charts$Internal$Item$getPosition(p),
						concatTuple(c.at));
				}),
			iK: F3(
				function (p, c, _v0) {
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$class('elm-charts__group')
							]),
						A2(
							$elm$core$List$map,
							$terezka$charts$Internal$Item$toSvg(p),
							concatTuple(c.at)));
				})
		};
	});
var $terezka$charts$Internal$Many$groupingHelp = F2(
	function (_v0, items) {
		var shared = _v0.dK;
		var equality = _v0.dr;
		var edits = _v0.dq;
		var toShared = function (_v2) {
			var item = _v2;
			return shared(item.gJ);
		};
		var toNewGroup = function (_v1) {
			var i = _v1.a;
			var is = _v1.b;
			return edits(
				A2($terezka$charts$Internal$Many$toGroup, i, is));
		};
		var toEquality = F2(
			function (aO, bO) {
				return A2(
					equality,
					toShared(aO),
					toShared(bO));
			});
		return A2(
			$elm$core$List$map,
			toNewGroup,
			A2($terezka$charts$Internal$Helpers$gatherWith, toEquality, items));
	});
var $terezka$charts$Internal$Many$bins = A2(
	$terezka$charts$Internal$Many$Remodel,
	$terezka$charts$Internal$Item$getPosition,
	$terezka$charts$Internal$Many$groupingHelp(
		{
			dq: $terezka$charts$Internal$Many$editLimits(
				F2(
					function (item, pos) {
						return _Utils_update(
							pos,
							{
								ct: $terezka$charts$Internal$Item$getX1(item),
								dc: $terezka$charts$Internal$Item$getX2(item)
							});
					})),
			dr: F2(
				function (a, b) {
					return _Utils_eq(a.ct, b.ct) && (_Utils_eq(a.dc, b.dc) && (_Utils_eq(a.gR, b.gR) && _Utils_eq(a.d1, b.d1)));
				}),
			dK: function (config) {
				return {d1: config.dO.bR, gR: config.dO.gR, ct: config.iS.ct, dc: config.iS.dc};
			}
		}));
var $terezka$charts$Chart$Item$bins = $terezka$charts$Internal$Many$bins;
var $terezka$charts$Internal$Produce$defaultBars = {g$: false, g0: true, bs: 0.1, hU: 0, hV: 0, h9: 0.05, ct: $elm$core$Maybe$Nothing, dc: $elm$core$Maybe$Nothing};
var $terezka$charts$Internal$Item$generalize = F2(
	function (toAny, _v0) {
		var item = _v0;
		return {
			gJ: {
				hM: toAny(item.gJ.hM),
				iE: $elm$core$Basics$identity,
				dO: item.gJ.dO,
				iS: item.gJ.iS
			},
			iF: function (c) {
				return $terezka$charts$Internal$Item$toHtml(item);
			},
			iG: function (_v1) {
				return item.iG(item.gJ);
			},
			iJ: F2(
				function (plane, _v2) {
					return A2(item.iJ, plane, item.gJ);
				}),
			iK: F3(
				function (plane, _v3, _v4) {
					return A2($terezka$charts$Internal$Item$toSvg, plane, item);
				})
		};
	});
var $terezka$charts$Internal$Many$getMembers = function (_v0) {
	var group_ = _v0;
	return function (_v1) {
		var x = _v1.a;
		var xs = _v1.b;
		return A2($elm$core$List$cons, x, xs);
	}(group_.gJ.at);
};
var $terezka$charts$Internal$Many$getGenerals = function (group_) {
	var generalize = function (_v0) {
		var item = _v0;
		return A2($terezka$charts$Internal$Item$generalize, item.gJ.iE, item);
	};
	return A2(
		$elm$core$List$map,
		generalize,
		$terezka$charts$Internal$Many$getMembers(group_));
};
var $terezka$charts$Chart$Item$getLimits = $terezka$charts$Internal$Item$getLimits;
var $terezka$charts$Internal$Item$map = F2(
	function (func, _v0) {
		var item = _v0;
		return {
			gJ: {
				hM: item.gJ.hM,
				iE: item.gJ.iE,
				dO: item.gJ.dO,
				iS: {
					gP: func(item.gJ.iS.gP),
					hl: item.gJ.iS.hl,
					ct: item.gJ.iS.ct,
					dc: item.gJ.iS.dc,
					bj: item.gJ.iS.bj
				}
			},
			iF: function (_v1) {
				return $terezka$charts$Internal$Item$toHtml(item);
			},
			iG: function (_v2) {
				return item.iG(item.gJ);
			},
			iJ: F2(
				function (plane, _v3) {
					return A2(item.iJ, plane, item.gJ);
				}),
			iK: F3(
				function (plane, _v4, _v5) {
					return A2($terezka$charts$Internal$Item$toSvg, plane, item);
				})
		};
	});
var $elm$svg$Svg$map = $elm$virtual_dom$VirtualDom$map;
var $terezka$charts$Internal$Legend$BarLegend = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $terezka$charts$Chart$Attributes$border = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{_: v});
	});
var $terezka$charts$Chart$Attributes$color = F2(
	function (v, config) {
		return (v === '') ? config : _Utils_update(
			config,
			{gH: v});
	});
var $terezka$charts$Internal$Helpers$pink = '#ea60df';
var $terezka$charts$Internal$Svg$defaultBar = {l: _List_Nil, _: 'white', ae: 0, gH: $terezka$charts$Internal$Helpers$pink, d5: $elm$core$Maybe$Nothing, g2: 0, g3: '', g4: 10, aJ: 1, hU: 0, hV: 0};
var $terezka$charts$Chart$Attributes$roundBottom = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{hU: v});
	});
var $terezka$charts$Chart$Attributes$roundTop = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{hV: v});
	});
var $terezka$charts$Internal$Property$toConfigs = function (prop) {
	if (!prop.$) {
		var config = prop.a;
		return _List_fromArray(
			[config]);
	} else {
		var configs = prop.a;
		return configs;
	}
};
var $terezka$charts$Internal$Helpers$blue = '#12A5ED';
var $terezka$charts$Internal$Helpers$brown = '#871c1c';
var $terezka$charts$Internal$Helpers$green = '#71c614';
var $terezka$charts$Internal$Helpers$moss = '#92b42c';
var $terezka$charts$Internal$Helpers$orange = '#FF8400';
var $terezka$charts$Internal$Helpers$purple = '#7b4dff';
var $terezka$charts$Internal$Helpers$red = '#F5325B';
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $terezka$charts$Internal$Helpers$toDefault = F3(
	function (_default, items, index) {
		var dict = $elm$core$Dict$fromList(
			A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, items));
		var numOfItems = $elm$core$Dict$size(dict);
		var itemIndex = index % numOfItems;
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2($elm$core$Dict$get, itemIndex, dict));
	});
var $terezka$charts$Internal$Helpers$turquoise = '#22d2ba';
var $terezka$charts$Internal$Helpers$yellow = '#FFCA00';
var $terezka$charts$Internal$Helpers$toDefaultColor = A2(
	$terezka$charts$Internal$Helpers$toDefault,
	$terezka$charts$Internal$Helpers$pink,
	_List_fromArray(
		[$terezka$charts$Internal$Helpers$purple, $terezka$charts$Internal$Helpers$pink, $terezka$charts$Internal$Helpers$blue, $terezka$charts$Internal$Helpers$green, $terezka$charts$Internal$Helpers$red, $terezka$charts$Internal$Helpers$yellow, $terezka$charts$Internal$Helpers$turquoise, $terezka$charts$Internal$Helpers$orange, $terezka$charts$Internal$Helpers$moss, $terezka$charts$Internal$Helpers$brown]));
var $terezka$charts$Internal$Legend$toBarLegends = F3(
	function (elIndex, barsAttrs, properties) {
		var toBarConfig = function (attrs) {
			return A2($terezka$charts$Internal$Helpers$apply, attrs, $terezka$charts$Internal$Svg$defaultBar);
		};
		var barsConfig = A2($terezka$charts$Internal$Helpers$apply, barsAttrs, $terezka$charts$Internal$Produce$defaultBars);
		var toBarLegend = F2(
			function (colorIndex, prop) {
				var rounding = A2($elm$core$Basics$max, barsConfig.hV, barsConfig.hU);
				var defaultName = 'Property #' + $elm$core$String$fromInt(colorIndex + 1);
				var defaultColor = $terezka$charts$Internal$Helpers$toDefaultColor(colorIndex);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$charts$Chart$Attributes$roundTop(rounding),
						$terezka$charts$Chart$Attributes$roundBottom(rounding),
						$terezka$charts$Chart$Attributes$color(defaultColor),
						$terezka$charts$Chart$Attributes$border(defaultColor)
					]);
				var attrsOrg = _Utils_ap(defaultAttrs, prop.l);
				var productOrg = toBarConfig(attrsOrg);
				var attrs = _Utils_eq(productOrg._, defaultColor) ? _Utils_ap(
					attrsOrg,
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$border(productOrg.gH)
						])) : attrsOrg;
				return A2(
					$terezka$charts$Internal$Legend$BarLegend,
					A2($elm$core$Maybe$withDefault, defaultName, prop.fv),
					attrs);
			});
		return A2(
			$elm$core$List$indexedMap,
			function (propIndex) {
				return toBarLegend(elIndex + propIndex);
			},
			A2($elm$core$List$concatMap, $terezka$charts$Internal$Property$toConfigs, properties));
	});
var $terezka$charts$Internal$Item$Bar = function (a) {
	return {$: 1, a: a};
};
var $terezka$charts$Internal$Commands$Arc = F7(
	function (a, b, c, d, e, f, g) {
		return {$: 6, a: a, b: b, c: c, d: d, e: e, f: f, g: g};
	});
var $terezka$charts$Internal$Commands$Line = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $terezka$charts$Internal$Commands$Move = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $terezka$charts$Internal$Commands$joinCommands = function (commands) {
	return A2($elm$core$String$join, ' ', commands);
};
var $terezka$charts$Internal$Commands$stringBoolInt = function (bool) {
	return bool ? '1' : '0';
};
var $terezka$charts$Internal$Commands$stringPoint = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $elm$core$String$fromFloat(x) + (' ' + $elm$core$String$fromFloat(y));
};
var $terezka$charts$Internal$Commands$stringPoints = function (points) {
	return A2(
		$elm$core$String$join,
		',',
		A2($elm$core$List$map, $terezka$charts$Internal$Commands$stringPoint, points));
};
var $terezka$charts$Internal$Commands$stringCommand = function (command) {
	switch (command.$) {
		case 0:
			var x = command.a;
			var y = command.b;
			return 'M' + $terezka$charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 1:
			var x = command.a;
			var y = command.b;
			return 'L' + $terezka$charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 2:
			var cx1 = command.a;
			var cy1 = command.b;
			var cx2 = command.c;
			var cy2 = command.d;
			var x = command.e;
			var y = command.f;
			return 'C' + $terezka$charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(cx2, cy2),
						_Utils_Tuple2(x, y)
					]));
		case 3:
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 4:
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 5:
			var x = command.a;
			var y = command.b;
			return 'T' + $terezka$charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 6:
			var rx = command.a;
			var ry = command.b;
			var xAxisRotation = command.c;
			var largeArcFlag = command.d;
			var sweepFlag = command.e;
			var x = command.f;
			var y = command.g;
			return 'A ' + $terezka$charts$Internal$Commands$joinCommands(
				_List_fromArray(
					[
						$terezka$charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(rx, ry)),
						$elm$core$String$fromInt(xAxisRotation),
						$terezka$charts$Internal$Commands$stringBoolInt(largeArcFlag),
						$terezka$charts$Internal$Commands$stringBoolInt(sweepFlag),
						$terezka$charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(x, y))
					]));
		default:
			return 'Z';
	}
};
var $terezka$charts$Internal$Commands$Close = {$: 7};
var $terezka$charts$Internal$Commands$CubicBeziers = F6(
	function (a, b, c, d, e, f) {
		return {$: 2, a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $terezka$charts$Internal$Commands$CubicBeziersShort = F4(
	function (a, b, c, d) {
		return {$: 3, a: a, b: b, c: c, d: d};
	});
var $terezka$charts$Internal$Commands$QuadraticBeziers = F4(
	function (a, b, c, d) {
		return {$: 4, a: a, b: b, c: c, d: d};
	});
var $terezka$charts$Internal$Commands$QuadraticBeziersShort = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $terezka$charts$Internal$Coordinates$innerLength = function (axis) {
	return A2($elm$core$Basics$max, 1, (axis.aI - axis.ho) - axis.hn);
};
var $terezka$charts$Internal$Coordinates$innerWidth = function (plane) {
	return $terezka$charts$Internal$Coordinates$innerLength(plane.bD);
};
var $terezka$charts$Internal$Coordinates$range = function (axis) {
	var diff = axis.fu - axis.et;
	return (diff > 0) ? diff : 1;
};
var $terezka$charts$Internal$Coordinates$scaleSVGX = F2(
	function (plane, value) {
		return (value * $terezka$charts$Internal$Coordinates$innerWidth(plane)) / $terezka$charts$Internal$Coordinates$range(plane.bD);
	});
var $terezka$charts$Internal$Coordinates$toSVGX = F2(
	function (plane, value) {
		return A2($terezka$charts$Internal$Coordinates$scaleSVGX, plane, value - plane.bD.et) + plane.bD.ho;
	});
var $terezka$charts$Internal$Coordinates$innerHeight = function (plane) {
	return $terezka$charts$Internal$Coordinates$innerLength(plane.bj);
};
var $terezka$charts$Internal$Coordinates$scaleSVGY = F2(
	function (plane, value) {
		return (value * $terezka$charts$Internal$Coordinates$innerHeight(plane)) / $terezka$charts$Internal$Coordinates$range(plane.bj);
	});
var $terezka$charts$Internal$Coordinates$toSVGY = F2(
	function (plane, value) {
		return A2($terezka$charts$Internal$Coordinates$scaleSVGY, plane, plane.bj.fu - value) + plane.bj.ho;
	});
var $terezka$charts$Internal$Commands$translate = F2(
	function (plane, command) {
		switch (command.$) {
			case 0:
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$charts$Internal$Commands$Move,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 1:
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$charts$Internal$Commands$Line,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 2:
				var cx1 = command.a;
				var cy1 = command.b;
				var cx2 = command.c;
				var cy2 = command.d;
				var x = command.e;
				var y = command.f;
				return A6(
					$terezka$charts$Internal$Commands$CubicBeziers,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, cx2),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, cy2),
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 3:
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$charts$Internal$Commands$CubicBeziersShort,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 4:
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$charts$Internal$Commands$QuadraticBeziers,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 5:
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$charts$Internal$Commands$QuadraticBeziersShort,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 6:
				var rx = command.a;
				var ry = command.b;
				var xAxisRotation = command.c;
				var largeArcFlag = command.d;
				var sweepFlag = command.e;
				var x = command.f;
				var y = command.g;
				return A7(
					$terezka$charts$Internal$Commands$Arc,
					rx,
					ry,
					xAxisRotation,
					largeArcFlag,
					sweepFlag,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			default:
				return $terezka$charts$Internal$Commands$Close;
		}
	});
var $terezka$charts$Internal$Commands$description = F2(
	function (plane, commands) {
		return $terezka$charts$Internal$Commands$joinCommands(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$terezka$charts$Internal$Commands$translate(plane),
					$terezka$charts$Internal$Commands$stringCommand),
				commands));
	});
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $terezka$charts$Internal$Coordinates$scaleCartesianX = F2(
	function (plane, value) {
		return (value * $terezka$charts$Internal$Coordinates$range(plane.bD)) / $terezka$charts$Internal$Coordinates$innerWidth(plane);
	});
var $terezka$charts$Internal$Coordinates$scaleCartesianY = F2(
	function (plane, value) {
		return (value * $terezka$charts$Internal$Coordinates$range(plane.bj)) / $terezka$charts$Internal$Coordinates$innerHeight(plane);
	});
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $terezka$charts$Internal$Svg$apply = F2(
	function (funcs, _default) {
		var apply_ = F2(
			function (f, a) {
				return f(a);
			});
		return A3($elm$core$List$foldl, apply_, _default, funcs);
	});
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $elm$svg$Svg$linearGradient = $elm$svg$Svg$trustedNode('linearGradient');
var $elm$svg$Svg$Attributes$offset = _VirtualDom_attribute('offset');
var $elm$svg$Svg$pattern = $elm$svg$Svg$trustedNode('pattern');
var $elm$svg$Svg$Attributes$patternTransform = _VirtualDom_attribute('patternTransform');
var $elm$svg$Svg$Attributes$patternUnits = _VirtualDom_attribute('patternUnits');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $elm$svg$Svg$stop = $elm$svg$Svg$trustedNode('stop');
var $elm$svg$Svg$Attributes$stopColor = _VirtualDom_attribute('stop-color');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $terezka$charts$Internal$Svg$toPattern = F2(
	function (defaultColor, design) {
		var toPatternId = function (props) {
			return A3(
				$elm$core$String$replace,
				'(',
				'-',
				A3(
					$elm$core$String$replace,
					')',
					'-',
					A3(
						$elm$core$String$replace,
						'.',
						'-',
						A3(
							$elm$core$String$replace,
							',',
							'-',
							A3(
								$elm$core$String$replace,
								' ',
								'-',
								A2(
									$elm$core$String$join,
									'-',
									_Utils_ap(
										_List_fromArray(
											[
												'elm-charts__pattern',
												function () {
												switch (design.$) {
													case 0:
														return 'striped';
													case 1:
														return 'dotted';
													default:
														return 'gradient';
												}
											}()
											]),
										props)))))));
		};
		var toPatternDefs = F4(
			function (id, spacing, rotate, inside) {
				return A2(
					$elm$svg$Svg$defs,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$pattern,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(id),
									$elm$svg$Svg$Attributes$patternUnits('userSpaceOnUse'),
									$elm$svg$Svg$Attributes$width(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$height(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$patternTransform(
									'rotate(' + ($elm$core$String$fromFloat(rotate) + ')'))
								]),
							_List_fromArray(
								[inside]))
						]));
			});
		var _v0 = function () {
			switch (design.$) {
				case 0:
					var edits = design.a;
					var config = A2(
						$terezka$charts$Internal$Svg$apply,
						edits,
						{gH: defaultColor, G: 45, h9: 4, eS: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.gH,
								$elm$core$String$fromFloat(config.eS),
								$elm$core$String$fromFloat(config.h9),
								$elm$core$String$fromFloat(config.G)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.h9,
							config.G,
							A2(
								$elm$svg$Svg$line,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$x1('0'),
										$elm$svg$Svg$Attributes$y('0'),
										$elm$svg$Svg$Attributes$x2('0'),
										$elm$svg$Svg$Attributes$y2(
										$elm$core$String$fromFloat(config.h9)),
										$elm$svg$Svg$Attributes$stroke(config.gH),
										$elm$svg$Svg$Attributes$strokeWidth(
										$elm$core$String$fromFloat(config.eS))
									]),
								_List_Nil)),
						theId);
				case 1:
					var edits = design.a;
					var config = A2(
						$terezka$charts$Internal$Svg$apply,
						edits,
						{gH: defaultColor, G: 45, h9: 4, eS: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.gH,
								$elm$core$String$fromFloat(config.eS),
								$elm$core$String$fromFloat(config.h9),
								$elm$core$String$fromFloat(config.G)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.h9,
							config.G,
							A2(
								$elm$svg$Svg$circle,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$fill(config.gH),
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(config.eS / 3)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(config.eS / 3)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(config.eS / 3))
									]),
								_List_Nil)),
						theId);
				default:
					var edits = design.a;
					var colors = _Utils_eq(edits, _List_Nil) ? _List_fromArray(
						[defaultColor, 'white']) : edits;
					var theId = toPatternId(colors);
					var totalColors = $elm$core$List$length(colors);
					var toPercentage = function (i) {
						return (i * 100) / (totalColors - 1);
					};
					var toStop = F2(
						function (i, c) {
							return A2(
								$elm$svg$Svg$stop,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$offset(
										$elm$core$String$fromFloat(
											toPercentage(i)) + '%'),
										$elm$svg$Svg$Attributes$stopColor(c)
									]),
								_List_Nil);
						});
					return _Utils_Tuple2(
						A2(
							$elm$svg$Svg$defs,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$svg$Svg$linearGradient,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$id(theId),
											$elm$svg$Svg$Attributes$x1('0'),
											$elm$svg$Svg$Attributes$x2('0'),
											$elm$svg$Svg$Attributes$y1('0'),
											$elm$svg$Svg$Attributes$y2('1')
										]),
									A2($elm$core$List$indexedMap, toStop, colors))
								])),
						theId);
			}
		}();
		var patternDefs = _v0.a;
		var patternId = _v0.b;
		return _Utils_Tuple2(patternDefs, 'url(#' + (patternId + ')'));
	});
var $elm$html$Html$Attributes$map = $elm$virtual_dom$VirtualDom$mapAttribute;
var $terezka$charts$Internal$Svg$withAttrs = F3(
	function (attrs, toEl, defaultAttrs) {
		return toEl(
			_Utils_ap(
				defaultAttrs,
				A2(
					$elm$core$List$map,
					$elm$html$Html$Attributes$map($elm$core$Basics$never),
					attrs)));
	});
var $elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');
var $terezka$charts$Internal$Coordinates$toId = function (plane) {
	var numToStr = A2(
		$elm$core$Basics$composeR,
		$elm$core$String$fromFloat,
		A2($elm$core$String$replace, '.', '-'));
	return A2(
		$elm$core$String$join,
		'_',
		_List_fromArray(
			[
				'elm-charts__id',
				numToStr(plane.bD.aI),
				numToStr(plane.bD.et),
				numToStr(plane.bD.fu),
				numToStr(plane.bD.ho),
				numToStr(plane.bD.hn),
				numToStr(plane.bj.aI),
				numToStr(plane.bj.et),
				numToStr(plane.bj.fu),
				numToStr(plane.bj.ho),
				numToStr(plane.bj.hn)
			]));
};
var $terezka$charts$Internal$Svg$withinChartArea = function (plane) {
	return $elm$svg$Svg$Attributes$clipPath(
		'url(#' + ($terezka$charts$Internal$Coordinates$toId(plane) + ')'));
};
var $terezka$charts$Internal$Svg$bar = F3(
	function (plane, config, point) {
		var viewBar = F6(
			function (fill, fillOpacity, border, borderWidth, strokeOpacity, cmds) {
				return A4(
					$terezka$charts$Internal$Svg$withAttrs,
					config.l,
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__bar'),
							$elm$svg$Svg$Attributes$fill(fill),
							$elm$svg$Svg$Attributes$fillOpacity(
							$elm$core$String$fromFloat(fillOpacity)),
							$elm$svg$Svg$Attributes$stroke(border),
							$elm$svg$Svg$Attributes$strokeWidth(
							$elm$core$String$fromFloat(borderWidth)),
							$elm$svg$Svg$Attributes$strokeOpacity(
							$elm$core$String$fromFloat(strokeOpacity)),
							$elm$svg$Svg$Attributes$d(
							A2($terezka$charts$Internal$Commands$description, plane, cmds)),
							$terezka$charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_Nil);
			});
		var highlightColor = (config.g3 === '') ? config.gH : config.g3;
		var borderWidthCarY = A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, config.ae / 2);
		var highlightWidthCarY = borderWidthCarY + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, config.g4 / 2);
		var borderWidthCarX = A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, config.ae / 2);
		var highlightWidthCarX = borderWidthCarX + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, config.g4 / 2);
		var pos = {
			ct: A2($elm$core$Basics$min, point.ct, point.dc) + borderWidthCarX,
			dc: A2($elm$core$Basics$max, point.ct, point.dc) - borderWidthCarX,
			iZ: A2($elm$core$Basics$min, point.iZ, point.eX) + borderWidthCarY,
			eX: A2($elm$core$Basics$max, point.iZ, point.eX) - borderWidthCarY
		};
		var height = $elm$core$Basics$abs(pos.eX - pos.iZ);
		var highlightPos = {ct: pos.ct - highlightWidthCarX, dc: pos.dc + highlightWidthCarX, iZ: pos.iZ - highlightWidthCarY, eX: pos.eX + highlightWidthCarY};
		var width = $elm$core$Basics$abs(pos.dc - pos.ct);
		var roundingBottom = (A2($terezka$charts$Internal$Coordinates$scaleSVGX, plane, width) * 0.5) * A3($elm$core$Basics$clamp, 0, 1, config.hU);
		var radiusBottomX = A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, roundingBottom);
		var radiusBottomY = A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, roundingBottom);
		var roundingTop = (A2($terezka$charts$Internal$Coordinates$scaleSVGX, plane, width) * 0.5) * A3($elm$core$Basics$clamp, 0, 1, config.hV);
		var radiusTopX = A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, roundingTop);
		var radiusTopY = A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, roundingTop);
		var _v0 = ((((height - (radiusTopY * 0.8)) - (radiusBottomY * 0.8)) <= 0) || (((width - (radiusTopX * 0.8)) - (radiusBottomX * 0.8)) <= 0)) ? _Utils_Tuple2(0, 0) : _Utils_Tuple2(config.hV, config.hU);
		var roundTop = _v0.a;
		var roundBottom = _v0.b;
		var _v1 = function () {
			if (_Utils_eq(pos.iZ, pos.eX)) {
				return _Utils_Tuple2(_List_Nil, _List_Nil);
			} else {
				var _v2 = _Utils_Tuple2(roundTop > 0, roundBottom > 0);
				if (!_v2.a) {
					if (!_v2.b) {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, pos.ct, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.iZ)
								]),
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, highlightPos.ct, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.ct, highlightPos.eX),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.dc, highlightPos.eX),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.dc, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.iZ)
								]));
					} else {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, pos.ct + radiusBottomX, pos.iZ),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.ct, pos.iZ + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.iZ + radiusBottomY),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.dc - radiusBottomX, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.ct + radiusBottomX, pos.iZ)
								]),
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, highlightPos.ct + radiusBottomX, highlightPos.iZ),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.ct, highlightPos.iZ + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.ct, highlightPos.eX),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.dc, highlightPos.eX),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.dc, highlightPos.iZ + radiusBottomY),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.dc - radiusBottomX, highlightPos.iZ),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.ct + radiusBottomX, highlightPos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.dc - radiusBottomX, pos.iZ),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, false, pos.dc, pos.iZ + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.iZ + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.iZ)
								]));
					}
				} else {
					if (!_v2.b) {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, pos.ct, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.eX - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.ct + radiusTopX, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.dc - radiusTopX, pos.eX),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.dc, pos.eX - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.iZ)
								]),
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, highlightPos.ct, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.ct, highlightPos.eX - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.ct + radiusTopX, highlightPos.eX),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.dc - radiusTopX, highlightPos.eX),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.dc, highlightPos.eX - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.dc, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.eX - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.dc - radiusTopX, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.ct + radiusTopX, pos.eX),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.ct, pos.eX - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.iZ)
								]));
					} else {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, pos.ct + radiusBottomX, pos.iZ),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.ct, pos.iZ + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.eX - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.ct + radiusTopX, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.dc - radiusTopX, pos.eX),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.dc, pos.eX - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.iZ + radiusBottomY),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.dc - radiusBottomX, pos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.ct + radiusBottomX, pos.iZ)
								]),
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, highlightPos.ct + radiusBottomX, highlightPos.iZ),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.ct, highlightPos.iZ + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.ct, highlightPos.eX - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.ct + radiusTopX, highlightPos.eX),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.dc - radiusTopX, highlightPos.eX),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.dc, highlightPos.eX - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.dc, highlightPos.iZ + radiusBottomY),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.dc - radiusBottomX, highlightPos.iZ),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.ct + radiusBottomX, highlightPos.iZ),
									A2($terezka$charts$Internal$Commands$Line, pos.dc - radiusBottomX, pos.iZ),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, false, pos.dc, pos.iZ + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.eX - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.dc - radiusTopX, pos.eX),
									A2($terezka$charts$Internal$Commands$Line, pos.ct + radiusTopX, pos.eX),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.ct, pos.eX - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, pos.ct, pos.iZ + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.dc, pos.iZ)
								]));
					}
				}
			}
		}();
		var commands = _v1.a;
		var highlightCommands = _v1.b;
		var viewAuraBar = function (fill) {
			return (!config.g2) ? A6(viewBar, fill, config.aJ, config._, config.ae, 1, commands) : A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__bar-with-highlight')
					]),
				_List_fromArray(
					[
						A6(viewBar, highlightColor, config.g2, 'transparent', 0, 0, highlightCommands),
						A6(viewBar, fill, config.aJ, config._, config.ae, 1, commands)
					]));
		};
		var _v3 = config.d5;
		if (_v3.$ === 1) {
			return viewAuraBar(config.gH);
		} else {
			var design = _v3.a;
			var _v4 = A2($terezka$charts$Internal$Svg$toPattern, config.gH, design);
			var patternDefs = _v4.a;
			var fill = _v4.b;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__bar-with-pattern')
					]),
				_List_fromArray(
					[
						patternDefs,
						viewAuraBar(fill)
					]));
		}
	});
var $terezka$charts$Internal$Produce$toDefaultName = F2(
	function (index, name) {
		return A2(
			$elm$core$Maybe$withDefault,
			'Property #' + $elm$core$String$fromInt(index + 1),
			name);
	});
var $elm$html$Html$td = _VirtualDom_node('td');
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $terezka$charts$Internal$Produce$tooltipRow = F3(
	function (color, title, text) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', color),
							A2($elm$html$Html$Attributes$style, 'padding', '0'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '3px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(title + ':')
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
							A2($elm$html$Html$Attributes$style, 'padding', '0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(text)
						]))
				]));
	});
var $terezka$charts$Internal$Helpers$withSurround = F2(
	function (all, func) {
		var fold = F4(
			function (index, prev, acc, list) {
				fold:
				while (true) {
					if (list.b) {
						if (list.b.b) {
							var a = list.a;
							var _v1 = list.b;
							var b = _v1.a;
							var rest = _v1.b;
							var $temp$index = index + 1,
								$temp$prev = $elm$core$Maybe$Just(a),
								$temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A4(
										func,
										index,
										prev,
										a,
										$elm$core$Maybe$Just(b))
									])),
								$temp$list = A2($elm$core$List$cons, b, rest);
							index = $temp$index;
							prev = $temp$prev;
							acc = $temp$acc;
							list = $temp$list;
							continue fold;
						} else {
							var a = list.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A4(func, index, prev, a, $elm$core$Maybe$Nothing)
									]));
						}
					} else {
						return acc;
					}
				}
			});
		return A4(fold, 0, $elm$core$Maybe$Nothing, _List_Nil, all);
	});
var $terezka$charts$Internal$Produce$toBarSeries = F4(
	function (elIndex, barsAttrs, properties, data) {
		var toBarConfig = function (attrs) {
			return A2($terezka$charts$Internal$Helpers$apply, attrs, $terezka$charts$Internal$Svg$defaultBar);
		};
		var barsConfig = A2($terezka$charts$Internal$Helpers$apply, barsAttrs, $terezka$charts$Internal$Produce$defaultBars);
		var toBarItem = F7(
			function (sections, barIndex, sectionIndex, section, colorIndex, dataIndex, bin) {
				var visual = section.db(bin.gP);
				var value = section.ag(bin.gP);
				var start = bin.ib;
				var numOfSections = $elm$core$List$length(sections);
				var numOfBars = barsConfig.g0 ? $elm$core$List$length(properties) : 1;
				var minY = (numOfSections > 1) ? $elm$core$Basics$max(0) : $elm$core$Basics$identity;
				var y1 = minY(
					A2($elm$core$Maybe$withDefault, 0, visual) - A2($elm$core$Maybe$withDefault, 0, value));
				var y2 = minY(
					A2($elm$core$Maybe$withDefault, 0, visual));
				var isSingle = numOfSections === 1;
				var isLast = _Utils_eq(sectionIndex, numOfSections - 1);
				var roundTop = (isSingle || isLast) ? barsConfig.hV : 0;
				var isFirst = !sectionIndex;
				var roundBottom = (isSingle || isFirst) ? barsConfig.hU : 0;
				var end = bin.bp;
				var length = end - start;
				var margin = length * barsConfig.bs;
				var spacing = length * barsConfig.h9;
				var width = ((length - (margin * 2)) - ((numOfBars - 1) * spacing)) / numOfBars;
				var offset = barsConfig.g0 ? ((barIndex * width) + (barIndex * spacing)) : 0;
				var x1 = (start + margin) + offset;
				var x2 = ((start + margin) + offset) + width;
				var defaultColor = $terezka$charts$Internal$Helpers$toDefaultColor(colorIndex);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$charts$Chart$Attributes$roundTop(roundTop),
						$terezka$charts$Chart$Attributes$roundBottom(roundBottom),
						$terezka$charts$Chart$Attributes$color(defaultColor),
						$terezka$charts$Chart$Attributes$border(defaultColor)
					]);
				var attrs = _Utils_ap(
					defaultAttrs,
					_Utils_ap(
						section.l,
						A5(section.gV, barIndex, sectionIndex, dataIndex, section.fv, bin.gP)));
				var productOrg = toBarConfig(attrs);
				var product = function (p) {
					return _Utils_eq(p._, defaultColor) ? _Utils_update(
						p,
						{_: p.gH}) : p;
				}(
					function (p) {
						var _v21 = p.d5;
						if (((!_v21.$) && (_v21.a.$ === 2)) && _v21.a.a.b) {
							var _v22 = _v21.a.a;
							var color = _v22.a;
							return _Utils_eq(p.gH, defaultColor) ? _Utils_update(
								p,
								{gH: color}) : p;
						} else {
							return p;
						}
					}(productOrg));
				return {
					gJ: {
						hM: product,
						iE: $terezka$charts$Internal$Item$Bar,
						dO: {
							_: product._,
							ae: product.ae,
							gH: product.gH,
							bR: dataIndex,
							gR: elIndex,
							fg: section.ak(bin.gP),
							dy: colorIndex,
							fA: section.fv,
							hN: barIndex,
							k: sectionIndex
						},
						iS: {
							gP: bin.gP,
							hl: function () {
								if (!value.$) {
									return true;
								} else {
									return false;
								}
							}(),
							ct: start,
							dc: end,
							bj: A2($elm$core$Maybe$withDefault, 0, value)
						}
					},
					iF: function (c) {
						return _List_fromArray(
							[
								A3(
								$terezka$charts$Internal$Produce$tooltipRow,
								c.dO.gH,
								A2($terezka$charts$Internal$Produce$toDefaultName, colorIndex, c.dO.fA),
								section.ak(bin.gP))
							]);
					},
					iG: function (config) {
						return {
							ct: x1,
							dc: x2,
							iZ: A2($elm$core$Basics$min, y1, y2),
							eX: A2($elm$core$Basics$max, y1, y2)
						};
					},
					iJ: F2(
						function (_v20, config) {
							return {ct: x1, dc: x2, iZ: y1, eX: y2};
						}),
					iK: F3(
						function (plane, config, position) {
							return A3($terezka$charts$Internal$Svg$bar, plane, product, position);
						})
				};
			});
		var toSeriesItem = F6(
			function (bins, sections, barIndex, sectionIndex, section, colorIndex) {
				var _v13 = A2(
					$elm$core$List$indexedMap,
					A5(toBarItem, sections, barIndex, sectionIndex, section, colorIndex),
					bins);
				if (!_v13.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					var first = _v13.a;
					var rest = _v13.b;
					return $elm$core$Maybe$Just(
						{
							gJ: {
								at: _Utils_Tuple2(first, rest)
							},
							iF: function (c) {
								return _List_fromArray(
									[
										A2(
										$elm$html$Html$table,
										_List_fromArray(
											[
												A2($elm$html$Html$Attributes$style, 'margin', '0')
											]),
										A2(
											$elm$core$List$concatMap,
											$terezka$charts$Internal$Item$toHtml,
											function (_v14) {
												var x = _v14.a;
												var xs = _v14.b;
												return A2($elm$core$List$cons, x, xs);
											}(c.at)))
									]);
							},
							iG: function (c) {
								return A2(
									$terezka$charts$Internal$Coordinates$foldPosition,
									$terezka$charts$Internal$Item$getLimits,
									function (_v15) {
										var x = _v15.a;
										var xs = _v15.b;
										return A2($elm$core$List$cons, x, xs);
									}(c.at));
							},
							iJ: F2(
								function (plane, c) {
									return A2(
										$terezka$charts$Internal$Coordinates$foldPosition,
										$terezka$charts$Internal$Item$getPosition(plane),
										function (_v16) {
											var x = _v16.a;
											var xs = _v16.b;
											return A2($elm$core$List$cons, x, xs);
										}(c.at));
								}),
							iK: F3(
								function (plane, c, _v17) {
									return A2(
										$elm$svg$Svg$g,
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$class('elm-charts__bar-series')
											]),
										A2(
											$elm$core$List$map,
											$terezka$charts$Internal$Item$toSvg(plane),
											function (_v18) {
												var x = _v18.a;
												var xs = _v18.b;
												return A2($elm$core$List$cons, x, xs);
											}(c.at)));
								})
						});
				}
			});
		var toBin = F4(
			function (index, prevM, curr, nextM) {
				var _v0 = _Utils_Tuple2(barsConfig.ct, barsConfig.dc);
				if (_v0.a.$ === 1) {
					if (_v0.b.$ === 1) {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return {gP: curr, bp: (index + 1) + 0.5, ib: (index + 1) - 0.5};
					} else {
						var _v8 = _v0.a;
						var toEnd = _v0.b.a;
						var _v9 = _Utils_Tuple2(prevM, nextM);
						if (!_v9.a.$) {
							var prev = _v9.a.a;
							return {
								gP: curr,
								bp: toEnd(curr),
								ib: toEnd(prev)
							};
						} else {
							if (!_v9.b.$) {
								var _v10 = _v9.a;
								var next = _v9.b.a;
								return {
									gP: curr,
									bp: toEnd(curr),
									ib: toEnd(curr) - (toEnd(next) - toEnd(curr))
								};
							} else {
								var _v11 = _v9.a;
								var _v12 = _v9.b;
								return {
									gP: curr,
									bp: toEnd(curr),
									ib: toEnd(curr) - 1
								};
							}
						}
					}
				} else {
					if (_v0.b.$ === 1) {
						var toStart = _v0.a.a;
						var _v3 = _v0.b;
						var _v4 = _Utils_Tuple2(prevM, nextM);
						if (!_v4.b.$) {
							var next = _v4.b.a;
							return {
								gP: curr,
								bp: toStart(next),
								ib: toStart(curr)
							};
						} else {
							if (!_v4.a.$) {
								var prev = _v4.a.a;
								var _v5 = _v4.b;
								return {
									gP: curr,
									bp: toStart(curr) + (toStart(curr) - toStart(prev)),
									ib: toStart(curr)
								};
							} else {
								var _v6 = _v4.a;
								var _v7 = _v4.b;
								return {
									gP: curr,
									bp: toStart(curr) + 1,
									ib: toStart(curr)
								};
							}
						}
					} else {
						var toStart = _v0.a.a;
						var toEnd = _v0.b.a;
						return {
							gP: curr,
							bp: toEnd(curr),
							ib: toStart(curr)
						};
					}
				}
			});
		return function (bins) {
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (propIndex, f) {
							return f(elIndex + propIndex);
						}),
					$elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (barIndex, stacks) {
									return A2(
										$elm$core$List$indexedMap,
										A3(toSeriesItem, bins, stacks, barIndex),
										$elm$core$List$reverse(stacks));
								}),
							A2($elm$core$List$map, $terezka$charts$Internal$Property$toConfigs, properties)))));
		}(
			A2($terezka$charts$Internal$Helpers$withSurround, data, toBin));
	});
var $terezka$charts$Chart$barsMap = F4(
	function (mapData, edits, properties, data) {
		return $terezka$charts$Chart$Indexed(
			function (index) {
				var legends_ = A3($terezka$charts$Internal$Legend$toBarLegends, index, edits, properties);
				var items = A4($terezka$charts$Internal$Produce$toBarSeries, index, edits, properties, data);
				var generalized = A2(
					$elm$core$List$map,
					$terezka$charts$Internal$Item$map(mapData),
					A2($elm$core$List$concatMap, $terezka$charts$Internal$Many$getGenerals, items));
				var bins = A2($terezka$charts$Chart$Item$apply, $terezka$charts$Chart$Item$bins, generalized);
				var toLimits = A2($elm$core$List$map, $terezka$charts$Internal$Item$getLimits, bins);
				var barsConfig = A2($terezka$charts$Internal$Helpers$apply, edits, $terezka$charts$Internal$Produce$defaultBars);
				var toTicks = F2(
					function (plane, acc) {
						return _Utils_update(
							acc,
							{
								ah: _Utils_ap(
									acc.ah,
									barsConfig.g$ ? A2(
										$elm$core$List$concatMap,
										A2(
											$elm$core$Basics$composeR,
											$terezka$charts$Chart$Item$getLimits,
											function (pos) {
												return _List_fromArray(
													[pos.ct, pos.dc]);
											}),
										bins) : _List_Nil)
							});
					});
				return _Utils_Tuple2(
					A5(
						$terezka$charts$Chart$BarsElement,
						toLimits,
						generalized,
						legends_,
						toTicks,
						function (plane) {
							return A2(
								$elm$svg$Svg$map,
								$elm$core$Basics$never,
								A2(
									$elm$svg$Svg$g,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$class('elm-charts__bar-series')
										]),
									A2(
										$elm$core$List$map,
										$terezka$charts$Internal$Item$toSvg(plane),
										items)));
						}),
					index + $elm$core$List$length(
						A2($elm$core$List$concatMap, $terezka$charts$Internal$Property$toConfigs, properties)));
			});
	});
var $terezka$charts$Chart$bars = F3(
	function (edits, properties, data) {
		return A4($terezka$charts$Chart$barsMap, $elm$core$Basics$identity, edits, properties, data);
	});
var $terezka$charts$Internal$Svg$Event = F2(
	function (name, handler) {
		return {fi: handler, fA: name};
	});
var $elm$svg$Svg$clipPath = $elm$svg$Svg$trustedNode('clipPath');
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $debois$elm_dom$DOM$offsetHeight = A2($elm$json$Json$Decode$field, 'offsetHeight', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$offsetWidth = A2($elm$json$Json$Decode$field, 'offsetWidth', $elm$json$Json$Decode$float);
var $elm$json$Json$Decode$map4 = _Json_map4;
var $debois$elm_dom$DOM$offsetLeft = A2($elm$json$Json$Decode$field, 'offsetLeft', $elm$json$Json$Decode$float);
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $debois$elm_dom$DOM$offsetParent = F2(
	function (x, decoder) {
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$field,
					'offsetParent',
					$elm$json$Json$Decode$null(x)),
					A2($elm$json$Json$Decode$field, 'offsetParent', decoder)
				]));
	});
var $debois$elm_dom$DOM$offsetTop = A2($elm$json$Json$Decode$field, 'offsetTop', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$scrollLeft = A2($elm$json$Json$Decode$field, 'scrollLeft', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$scrollTop = A2($elm$json$Json$Decode$field, 'scrollTop', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$position = F2(
	function (x, y) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (_v0) {
				var x_ = _v0.a;
				var y_ = _v0.b;
				return A2(
					$debois$elm_dom$DOM$offsetParent,
					_Utils_Tuple2(x_, y_),
					A2($debois$elm_dom$DOM$position, x_, y_));
			},
			A5(
				$elm$json$Json$Decode$map4,
				F4(
					function (scrollLeftP, scrollTopP, offsetLeftP, offsetTopP) {
						return _Utils_Tuple2((x + offsetLeftP) - scrollLeftP, (y + offsetTopP) - scrollTopP);
					}),
				$debois$elm_dom$DOM$scrollLeft,
				$debois$elm_dom$DOM$scrollTop,
				$debois$elm_dom$DOM$offsetLeft,
				$debois$elm_dom$DOM$offsetTop));
	});
var $debois$elm_dom$DOM$boundingClientRect = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (_v0, width, height) {
			var x = _v0.a;
			var y = _v0.b;
			return {fj: height, bb: x, bh: y, eS: width};
		}),
	A2($debois$elm_dom$DOM$position, 0, 0),
	$debois$elm_dom$DOM$offsetWidth,
	$debois$elm_dom$DOM$offsetHeight);
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(0));
};
var $debois$elm_dom$DOM$parentElement = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'parentElement', decoder);
};
function $terezka$charts$Internal$Svg$cyclic$decodePosition() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$debois$elm_dom$DOM$boundingClientRect,
				$elm$json$Json$Decode$lazy(
				function (_v0) {
					return $debois$elm_dom$DOM$parentElement(
						$terezka$charts$Internal$Svg$cyclic$decodePosition());
				})
			]));
}
var $terezka$charts$Internal$Svg$decodePosition = $terezka$charts$Internal$Svg$cyclic$decodePosition();
$terezka$charts$Internal$Svg$cyclic$decodePosition = function () {
	return $terezka$charts$Internal$Svg$decodePosition;
};
var $terezka$charts$Internal$Coordinates$toCartesianX = F2(
	function (plane, value) {
		return A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, value - plane.bD.ho) + plane.bD.et;
	});
var $terezka$charts$Internal$Coordinates$toCartesianY = F2(
	function (plane, value) {
		return ($terezka$charts$Internal$Coordinates$range(plane.bj) - A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, value - plane.bj.ho)) + plane.bj.et;
	});
var $terezka$charts$Internal$Svg$fromSvg = F2(
	function (plane, point) {
		return {
			bD: A2($terezka$charts$Internal$Coordinates$toCartesianX, plane, point.bD),
			bj: A2($terezka$charts$Internal$Coordinates$toCartesianY, plane, point.bj)
		};
	});
var $debois$elm_dom$DOM$target = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'target', decoder);
};
var $terezka$charts$Internal$Svg$decoder = F2(
	function (plane, toMsg) {
		var handle = F3(
			function (mouseX, mouseY, box) {
				var yPrev = plane.bj;
				var xPrev = plane.bD;
				var widthPercent = box.eS / plane.bD.aI;
				var heightPercent = box.fj / plane.bj.aI;
				var newPlane = _Utils_update(
					plane,
					{
						bD: _Utils_update(
							xPrev,
							{aI: box.eS, hn: plane.bD.hn * widthPercent, ho: plane.bD.ho * widthPercent}),
						bj: _Utils_update(
							yPrev,
							{aI: box.fj, hn: plane.bj.hn * heightPercent, ho: plane.bj.ho * heightPercent})
					});
				var searched = A2(
					$terezka$charts$Internal$Svg$fromSvg,
					newPlane,
					{bD: mouseX - box.bb, bj: mouseY - box.bh});
				return A2(toMsg, newPlane, searched);
			});
		return A4(
			$elm$json$Json$Decode$map3,
			handle,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			$debois$elm_dom$DOM$target($terezka$charts$Internal$Svg$decodePosition));
	});
var $elm$svg$Svg$Events$on = $elm$html$Html$Events$on;
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $terezka$charts$Internal$Svg$container = F5(
	function (plane, config, below, chartEls, above) {
		var toEvent = function (event) {
			return A2(
				$elm$svg$Svg$Events$on,
				event.fA,
				A2($terezka$charts$Internal$Svg$decoder, plane, event.fi));
		};
		var svgAttrsSize = config.dG ? _List_fromArray(
			[
				$elm$svg$Svg$Attributes$viewBox(
				'0 0 ' + ($elm$core$String$fromFloat(plane.bD.aI) + (' ' + $elm$core$String$fromFloat(plane.bj.aI)))),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]) : _List_fromArray(
			[
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(plane.bD.aI)),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(plane.bj.aI)),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]);
		var htmlAttrsSize = config.dG ? _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%')
			]) : _List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$elm$core$String$fromFloat(plane.bD.aI) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'height',
				$elm$core$String$fromFloat(plane.bj.aI) + 'px')
			]);
		var htmlAttrsDef = _List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-charts__container-inner')
			]);
		var htmlAttrs = _Utils_ap(
			config.dx,
			_Utils_ap(htmlAttrsDef, htmlAttrsSize));
		var chartPosition = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$x(
				$elm$core$String$fromFloat(plane.bD.ho)),
				$elm$svg$Svg$Attributes$y(
				$elm$core$String$fromFloat(plane.bj.ho)),
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(
					$terezka$charts$Internal$Coordinates$innerWidth(plane))),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(
					$terezka$charts$Internal$Coordinates$innerHeight(plane))),
				$elm$svg$Svg$Attributes$fill('transparent')
			]);
		var clipPathDefs = A2(
			$elm$svg$Svg$defs,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$clipPath,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$id(
							$terezka$charts$Internal$Coordinates$toId(plane))
						]),
					_List_fromArray(
						[
							A2($elm$svg$Svg$rect, chartPosition, _List_Nil)
						]))
				]));
		var catcher = A2(
			$elm$svg$Svg$rect,
			_Utils_ap(
				chartPosition,
				A2($elm$core$List$map, toEvent, config.gS)),
			_List_Nil);
		var chart = A2(
			$elm$svg$Svg$svg,
			_Utils_ap(svgAttrsSize, config.l),
			_Utils_ap(
				_List_fromArray(
					[clipPathDefs]),
				_Utils_ap(
					chartEls,
					_List_fromArray(
						[catcher]))));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('elm-charts__container'),
					A2($elm$html$Html$Attributes$style, 'position', 'relative')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					htmlAttrs,
					_Utils_ap(
						below,
						_Utils_ap(
							_List_fromArray(
								[chart]),
							above)))
				]));
	});
var $terezka$charts$Chart$Attributes$lowest = F3(
	function (v, edit, b) {
		return _Utils_update(
			b,
			{
				et: A3(edit, v, b.et, b.gO)
			});
	});
var $terezka$charts$Chart$Attributes$orLower = F3(
	function (least, real, _v0) {
		return (_Utils_cmp(real, least) > 0) ? least : real;
	});
var $terezka$charts$Chart$definePlane = F2(
	function (config, elements) {
		var width = A2($elm$core$Basics$max, 1, (config.eS - config.aK.bb) - config.aK.bf);
		var toLimit = F5(
			function (length, marginMin, marginMax, min, max) {
				return {gN: max, gO: min, aI: length, hn: marginMax, ho: marginMin, fu: max, et: min};
			});
		var height = A2($elm$core$Basics$max, 1, (config.fj - config.aK.a4) - config.aK.bh);
		var fixSingles = function (bs) {
			return _Utils_eq(bs.et, bs.fu) ? _Utils_update(
				bs,
				{fu: bs.et + 10}) : bs;
		};
		var collectLimits = F2(
			function (el, acc) {
				switch (el.$) {
					case 0:
						return acc;
					case 1:
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 2:
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 3:
						return acc;
					case 4:
						return acc;
					case 5:
						return acc;
					case 6:
						return acc;
					case 7:
						return acc;
					case 8:
						return acc;
					case 9:
						return acc;
					case 10:
						return acc;
					case 11:
						var subs = el.a;
						return A3($elm$core$List$foldl, collectLimits, acc, subs);
					case 12:
						return acc;
					default:
						return acc;
				}
			});
		var limits_ = function (pos) {
			return function (_v3) {
				var x = _v3.bD;
				var y = _v3.bj;
				return {
					bD: fixSingles(x),
					bj: fixSingles(y)
				};
			}(
				{
					bD: A5(toLimit, width, config.bs.bb, config.bs.bf, pos.ct, pos.dc),
					bj: A5(toLimit, height, config.bs.bh, config.bs.a4, pos.iZ, pos.eX)
				});
		}(
			A2(
				$terezka$charts$Internal$Coordinates$foldPosition,
				$elm$core$Basics$identity,
				A3($elm$core$List$foldl, collectLimits, _List_Nil, elements)));
		var calcRange = function () {
			var _v2 = config.eC;
			if (!_v2.b) {
				return limits_.bD;
			} else {
				var some = _v2;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (f, b) {
							return f(b);
						}),
					limits_.bD,
					some);
			}
		}();
		var calcDomain = function () {
			var _v1 = config.d6;
			if (!_v1.b) {
				return A3($terezka$charts$Chart$Attributes$lowest, 0, $terezka$charts$Chart$Attributes$orLower, limits_.bj);
			} else {
				var some = _v1;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (f, b) {
							return f(b);
						}),
					limits_.bj,
					some);
			}
		}();
		var unpadded = {bD: calcRange, bj: calcDomain};
		var scalePadX = $terezka$charts$Internal$Coordinates$scaleCartesianX(unpadded);
		var xMax = calcRange.fu + scalePadX(config.aK.bf);
		var xMin = calcRange.et - scalePadX(config.aK.bb);
		var scalePadY = $terezka$charts$Internal$Coordinates$scaleCartesianY(unpadded);
		var yMax = calcDomain.fu + scalePadY(config.aK.bh);
		var yMin = calcDomain.et - scalePadY(config.aK.a4);
		return {
			bD: _Utils_update(
				calcRange,
				{
					aI: config.eS,
					fu: A2($elm$core$Basics$max, xMin, xMax),
					et: A2($elm$core$Basics$min, xMin, xMax)
				}),
			bj: _Utils_update(
				calcDomain,
				{
					aI: config.fj,
					fu: A2($elm$core$Basics$max, yMin, yMax),
					et: A2($elm$core$Basics$min, yMin, yMax)
				})
		};
	});
var $terezka$charts$Chart$getItems = F2(
	function (plane, elements) {
		var toItems = F2(
			function (el, acc) {
				switch (el.$) {
					case 0:
						return acc;
					case 1:
						var items = el.b;
						return _Utils_ap(acc, items);
					case 2:
						var items = el.b;
						return _Utils_ap(acc, items);
					case 3:
						var item = el.a;
						return _Utils_ap(
							acc,
							_List_fromArray(
								[item]));
					case 4:
						var func = el.a;
						return acc;
					case 5:
						return acc;
					case 6:
						return acc;
					case 7:
						return acc;
					case 8:
						return acc;
					case 9:
						return acc;
					case 10:
						return acc;
					case 11:
						var subs = el.a;
						return A3($elm$core$List$foldl, toItems, acc, subs);
					case 12:
						return acc;
					default:
						return acc;
				}
			});
		return A3($elm$core$List$foldl, toItems, _List_Nil, elements);
	});
var $terezka$charts$Chart$getLegends = function (elements) {
	var toLegends = F2(
		function (el, acc) {
			switch (el.$) {
				case 0:
					return acc;
				case 1:
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 2:
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 3:
					return acc;
				case 4:
					return acc;
				case 5:
					return acc;
				case 6:
					return acc;
				case 7:
					return acc;
				case 8:
					return acc;
				case 9:
					return acc;
				case 10:
					return acc;
				case 11:
					var subs = el.a;
					return A3($elm$core$List$foldl, toLegends, acc, subs);
				case 12:
					return acc;
				default:
					return acc;
			}
		});
	return A3($elm$core$List$foldl, toLegends, _List_Nil, elements);
};
var $terezka$charts$Chart$TickValues = F4(
	function (xAxis, yAxis, xs, ys) {
		return {dd: xAxis, ah: xs, de: yAxis, az: ys};
	});
var $terezka$charts$Chart$getTickValues = F3(
	function (plane, items, elements) {
		var toValues = F2(
			function (el, acc) {
				switch (el.$) {
					case 0:
						return acc;
					case 1:
						return acc;
					case 2:
						var func = el.d;
						return A2(func, plane, acc);
					case 3:
						var func = el.b;
						return acc;
					case 4:
						var func = el.a;
						return A2(func, plane, acc);
					case 5:
						var func = el.a;
						return A2(func, plane, acc);
					case 6:
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 7:
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 8:
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 10:
						var func = el.a;
						return A3(
							$elm$core$List$foldl,
							toValues,
							acc,
							A2(func, plane, items));
					case 9:
						return acc;
					case 11:
						var subs = el.a;
						return A3($elm$core$List$foldl, toValues, acc, subs);
					case 12:
						return acc;
					default:
						return acc;
				}
			});
		return A3(
			$elm$core$List$foldl,
			toValues,
			A4($terezka$charts$Chart$TickValues, _List_Nil, _List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$charts$Chart$GridElement = function (a) {
	return {$: 9, a: a};
};
var $terezka$charts$Internal$Svg$Circle = 0;
var $terezka$charts$Chart$Attributes$circle = function (config) {
	return _Utils_update(
		config,
		{
			ci: $elm$core$Maybe$Just(0)
		});
};
var $terezka$charts$Internal$Helpers$darkGray = 'rgb(200 200 200)';
var $terezka$charts$Chart$Attributes$dashed = F2(
	function (value, config) {
		return _Utils_update(
			config,
			{$7: value});
	});
var $terezka$charts$Internal$Svg$defaultDot = {_: '', ae: 0, gH: $terezka$charts$Internal$Helpers$pink, B: false, g2: 0, g3: '', g4: 5, aJ: 1, ci: $elm$core$Maybe$Nothing, h5: 6};
var $terezka$charts$Internal$Svg$isWithinPlane = F3(
	function (plane, x, y) {
		return _Utils_eq(
			A3($elm$core$Basics$clamp, plane.bD.et, plane.bD.fu, x),
			x) && _Utils_eq(
			A3($elm$core$Basics$clamp, plane.bj.et, plane.bj.fu, y),
			y);
	});
var $elm$core$Basics$pi = _Basics_pi;
var $terezka$charts$Internal$Svg$plusPath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(area_ / 4) + off;
		var r6 = side / 2;
		var r3 = side;
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_ - r6) + (' ' + $elm$core$String$fromFloat(((y_ - r3) - r6) + off))),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat(r3),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat(r3),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(-r3),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(-r3),
					'v' + $elm$core$String$fromFloat(r3 - off)
				]));
	});
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $elm$core$Basics$tan = _Basics_tan;
var $terezka$charts$Internal$Svg$trianglePath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(
			(area_ * 4) / $elm$core$Basics$sqrt(3)) + (off * $elm$core$Basics$sqrt(3));
		var height = ($elm$core$Basics$sqrt(3) * side) / 2;
		var fromMiddle = height - (($elm$core$Basics$tan(
			$elm$core$Basics$degrees(30)) * side) / 2);
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_) + (' ' + $elm$core$String$fromFloat(y_ - fromMiddle))),
					'l' + ($elm$core$String$fromFloat((-side) / 2) + (' ' + $elm$core$String$fromFloat(height))),
					'h' + $elm$core$String$fromFloat(side),
					'z'
				]));
	});
var $terezka$charts$Internal$Svg$dot = F5(
	function (plane, toX, toY, config, datum_) {
		var yOrg = toY(datum_);
		var y_ = A2($terezka$charts$Internal$Coordinates$toSVGY, plane, yOrg);
		var xOrg = toX(datum_);
		var x_ = A2($terezka$charts$Internal$Coordinates$toSVGX, plane, xOrg);
		var styleAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(
				(config._ === '') ? config.gH : config._),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.ae)),
				$elm$svg$Svg$Attributes$fillOpacity(
				$elm$core$String$fromFloat(config.aJ)),
				$elm$svg$Svg$Attributes$fill(config.gH),
				$elm$svg$Svg$Attributes$class('elm-charts__dot'),
				config.B ? $terezka$charts$Internal$Svg$withinChartArea(plane) : $elm$svg$Svg$Attributes$class('')
			]);
		var showDot = A3($terezka$charts$Internal$Svg$isWithinPlane, plane, xOrg, yOrg) || config.B;
		var highlightColor = (config.g3 === '') ? config.gH : config.g3;
		var highlightAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(highlightColor),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.g4)),
				$elm$svg$Svg$Attributes$strokeOpacity(
				$elm$core$String$fromFloat(config.g2)),
				$elm$svg$Svg$Attributes$fill('transparent'),
				$elm$svg$Svg$Attributes$class('elm-charts__dot-highlight')
			]);
		var view = F3(
			function (toEl, highlightOff, toAttrs) {
				return (config.g2 > 0) ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__dot-container')
						]),
					_List_fromArray(
						[
							A2(
							toEl,
							_Utils_ap(
								toAttrs(highlightOff),
								highlightAttrs),
							_List_Nil),
							A2(
							toEl,
							_Utils_ap(
								toAttrs(0),
								styleAttrs),
							_List_Nil)
						])) : A2(
					toEl,
					_Utils_ap(
						toAttrs(0),
						styleAttrs),
					_List_Nil);
			});
		var area_ = (2 * $elm$core$Basics$pi) * config.h5;
		if (!showDot) {
			return $elm$svg$Svg$text('');
		} else {
			var _v0 = config.ci;
			if (_v0.$ === 1) {
				return $elm$svg$Svg$text('');
			} else {
				switch (_v0.a) {
					case 0:
						var _v1 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$circle,
							config.g4 / 2,
							function (off) {
								var radius = $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(x_)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(y_)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(radius + off))
									]);
							});
					case 1:
						var _v2 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.g4,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$charts$Internal$Svg$trianglePath, area_, off, x_, y_))
									]);
							});
					case 2:
						var _v3 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.g4,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff))
									]);
							});
					case 3:
						var _v4 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.g4,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					case 4:
						var _v5 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.g4,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$charts$Internal$Svg$plusPath, area_, off, x_, y_)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					default:
						var _v6 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.g4,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$charts$Internal$Svg$plusPath, area_, off, x_, y_))
									]);
							});
				}
			}
		}
	});
var $terezka$charts$Chart$Svg$dot = F4(
	function (plane, toX, toY, edits) {
		return A4(
			$terezka$charts$Internal$Svg$dot,
			plane,
			toX,
			toY,
			A2($terezka$charts$Internal$Helpers$apply, edits, $terezka$charts$Internal$Svg$defaultDot));
	});
var $terezka$charts$Internal$Helpers$gray = '#EFF2FA';
var $terezka$charts$Internal$Svg$defaultLine = {l: _List_Nil, gC: false, gH: 'rgb(210, 210, 210)', $7: _List_Nil, o: false, B: false, aJ: 1, iA: -90, iB: 0, eS: 1, ct: $elm$core$Maybe$Nothing, dc: $elm$core$Maybe$Nothing, iY: $elm$core$Maybe$Nothing, r: 0, iZ: $elm$core$Maybe$Nothing, eX: $elm$core$Maybe$Nothing, i_: $elm$core$Maybe$Nothing, s: 0};
var $elm$core$Basics$cos = _Basics_cos;
var $terezka$charts$Internal$Svg$lengthInCartesianX = $terezka$charts$Internal$Coordinates$scaleCartesianX;
var $terezka$charts$Internal$Svg$lengthInCartesianY = $terezka$charts$Internal$Coordinates$scaleCartesianY;
var $elm$core$Basics$sin = _Basics_sin;
var $elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var $terezka$charts$Internal$Svg$line = F2(
	function (plane, config) {
		var angle = $elm$core$Basics$degrees(config.iA);
		var _v0 = function () {
			var _v3 = _Utils_Tuple3(
				_Utils_Tuple2(config.ct, config.dc),
				_Utils_Tuple2(config.iZ, config.eX),
				_Utils_Tuple2(config.iY, config.i_));
			if (!_v3.a.a.$) {
				if (!_v3.a.b.$) {
					if (_v3.b.a.$ === 1) {
						if (_v3.b.b.$ === 1) {
							var _v4 = _v3.a;
							var a = _v4.a.a;
							var b = _v4.b.a;
							var _v5 = _v3.b;
							var _v6 = _v5.a;
							var _v7 = _v5.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(plane.bj.et, plane.bj.et));
						} else {
							var _v38 = _v3.a;
							var a = _v38.a.a;
							var b = _v38.b.a;
							var _v39 = _v3.b;
							var _v40 = _v39.a;
							var c = _v39.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						}
					} else {
						if (_v3.b.b.$ === 1) {
							var _v41 = _v3.a;
							var a = _v41.a.a;
							var b = _v41.b.a;
							var _v42 = _v3.b;
							var c = _v42.a.a;
							var _v43 = _v42.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						} else {
							return _Utils_Tuple2(
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.bD.et, config.ct),
									A2($elm$core$Maybe$withDefault, plane.bD.fu, config.dc)),
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.bj.et, config.iZ),
									A2($elm$core$Maybe$withDefault, plane.bj.fu, config.eX)));
						}
					}
				} else {
					if (_v3.b.a.$ === 1) {
						if (_v3.b.b.$ === 1) {
							var _v8 = _v3.a;
							var a = _v8.a.a;
							var _v9 = _v8.b;
							var _v10 = _v3.b;
							var _v11 = _v10.a;
							var _v12 = _v10.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, a),
								_Utils_Tuple2(plane.bj.et, plane.bj.fu));
						} else {
							if (!_v3.c.a.$) {
								if (!_v3.c.b.$) {
									var _v51 = _v3.a;
									var a = _v51.a.a;
									var _v52 = _v51.b;
									var _v53 = _v3.b;
									var _v54 = _v53.a;
									var b = _v53.b.a;
									var _v55 = _v3.c;
									var xOff = _v55.a.a;
									var yOff = _v55.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v56 = _v3.a;
									var a = _v56.a.a;
									var _v57 = _v56.b;
									var _v58 = _v3.b;
									var _v59 = _v58.a;
									var b = _v58.b.a;
									var _v60 = _v3.c;
									var xOff = _v60.a.a;
									var _v61 = _v60.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 1) {
									var _v44 = _v3.a;
									var a = _v44.a.a;
									var _v45 = _v44.b;
									var _v46 = _v3.b;
									var _v47 = _v46.a;
									var b = _v46.b.a;
									var _v48 = _v3.c;
									var _v49 = _v48.a;
									var _v50 = _v48.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.bD.fu),
										_Utils_Tuple2(b, b));
								} else {
									var _v62 = _v3.a;
									var a = _v62.a.a;
									var _v63 = _v62.b;
									var _v64 = _v3.b;
									var _v65 = _v64.a;
									var b = _v64.b.a;
									var _v66 = _v3.c;
									var _v67 = _v66.a;
									var yOff = _v66.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (!_v3.b.b.$) {
							var _v35 = _v3.a;
							var c = _v35.a.a;
							var _v36 = _v35.b;
							var _v37 = _v3.b;
							var a = _v37.a.a;
							var b = _v37.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (!_v3.c.a.$) {
								if (!_v3.c.b.$) {
									var _v75 = _v3.a;
									var a = _v75.a.a;
									var _v76 = _v75.b;
									var _v77 = _v3.b;
									var b = _v77.a.a;
									var _v78 = _v77.b;
									var _v79 = _v3.c;
									var xOff = _v79.a.a;
									var yOff = _v79.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v80 = _v3.a;
									var a = _v80.a.a;
									var _v81 = _v80.b;
									var _v82 = _v3.b;
									var b = _v82.a.a;
									var _v83 = _v82.b;
									var _v84 = _v3.c;
									var xOff = _v84.a.a;
									var _v85 = _v84.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 1) {
									var _v68 = _v3.a;
									var a = _v68.a.a;
									var _v69 = _v68.b;
									var _v70 = _v3.b;
									var b = _v70.a.a;
									var _v71 = _v70.b;
									var _v72 = _v3.c;
									var _v73 = _v72.a;
									var _v74 = _v72.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.bD.fu),
										_Utils_Tuple2(b, b));
								} else {
									var _v86 = _v3.a;
									var a = _v86.a.a;
									var _v87 = _v86.b;
									var _v88 = _v3.b;
									var b = _v88.a.a;
									var _v89 = _v88.b;
									var _v90 = _v3.c;
									var _v91 = _v90.a;
									var yOff = _v90.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				}
			} else {
				if (!_v3.a.b.$) {
					if (_v3.b.a.$ === 1) {
						if (_v3.b.b.$ === 1) {
							var _v13 = _v3.a;
							var _v14 = _v13.a;
							var b = _v13.b.a;
							var _v15 = _v3.b;
							var _v16 = _v15.a;
							var _v17 = _v15.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(b, b),
								_Utils_Tuple2(plane.bj.et, plane.bj.fu));
						} else {
							if (!_v3.c.a.$) {
								if (!_v3.c.b.$) {
									var _v99 = _v3.a;
									var _v100 = _v99.a;
									var a = _v99.b.a;
									var _v101 = _v3.b;
									var _v102 = _v101.a;
									var b = _v101.b.a;
									var _v103 = _v3.c;
									var xOff = _v103.a.a;
									var yOff = _v103.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v104 = _v3.a;
									var _v105 = _v104.a;
									var a = _v104.b.a;
									var _v106 = _v3.b;
									var _v107 = _v106.a;
									var b = _v106.b.a;
									var _v108 = _v3.c;
									var xOff = _v108.a.a;
									var _v109 = _v108.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 1) {
									var _v92 = _v3.a;
									var _v93 = _v92.a;
									var a = _v92.b.a;
									var _v94 = _v3.b;
									var _v95 = _v94.a;
									var b = _v94.b.a;
									var _v96 = _v3.c;
									var _v97 = _v96.a;
									var _v98 = _v96.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.bD.fu),
										_Utils_Tuple2(b, b));
								} else {
									var _v110 = _v3.a;
									var _v111 = _v110.a;
									var a = _v110.b.a;
									var _v112 = _v3.b;
									var _v113 = _v112.a;
									var b = _v112.b.a;
									var _v114 = _v3.c;
									var _v115 = _v114.a;
									var yOff = _v114.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (!_v3.b.b.$) {
							var _v32 = _v3.a;
							var _v33 = _v32.a;
							var c = _v32.b.a;
							var _v34 = _v3.b;
							var a = _v34.a.a;
							var b = _v34.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (!_v3.c.a.$) {
								if (!_v3.c.b.$) {
									var _v123 = _v3.a;
									var _v124 = _v123.a;
									var a = _v123.b.a;
									var _v125 = _v3.b;
									var b = _v125.a.a;
									var _v126 = _v125.b;
									var _v127 = _v3.c;
									var xOff = _v127.a.a;
									var yOff = _v127.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v128 = _v3.a;
									var _v129 = _v128.a;
									var a = _v128.b.a;
									var _v130 = _v3.b;
									var b = _v130.a.a;
									var _v131 = _v130.b;
									var _v132 = _v3.c;
									var xOff = _v132.a.a;
									var _v133 = _v132.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 1) {
									var _v116 = _v3.a;
									var _v117 = _v116.a;
									var a = _v116.b.a;
									var _v118 = _v3.b;
									var b = _v118.a.a;
									var _v119 = _v118.b;
									var _v120 = _v3.c;
									var _v121 = _v120.a;
									var _v122 = _v120.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.bD.fu),
										_Utils_Tuple2(b, b));
								} else {
									var _v134 = _v3.a;
									var _v135 = _v134.a;
									var a = _v134.b.a;
									var _v136 = _v3.b;
									var b = _v136.a.a;
									var _v137 = _v136.b;
									var _v138 = _v3.c;
									var _v139 = _v138.a;
									var yOff = _v138.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				} else {
					if (!_v3.b.a.$) {
						if (!_v3.b.b.$) {
							var _v18 = _v3.a;
							var _v19 = _v18.a;
							var _v20 = _v18.b;
							var _v21 = _v3.b;
							var a = _v21.a.a;
							var b = _v21.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.bD.et, plane.bD.et),
								_Utils_Tuple2(a, b));
						} else {
							var _v22 = _v3.a;
							var _v23 = _v22.a;
							var _v24 = _v22.b;
							var _v25 = _v3.b;
							var a = _v25.a.a;
							var _v26 = _v25.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.bD.et, plane.bD.fu),
								_Utils_Tuple2(a, a));
						}
					} else {
						if (!_v3.b.b.$) {
							var _v27 = _v3.a;
							var _v28 = _v27.a;
							var _v29 = _v27.b;
							var _v30 = _v3.b;
							var _v31 = _v30.a;
							var b = _v30.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.bD.et, plane.bD.fu),
								_Utils_Tuple2(b, b));
						} else {
							var _v140 = _v3.a;
							var _v141 = _v140.a;
							var _v142 = _v140.b;
							var _v143 = _v3.b;
							var _v144 = _v143.a;
							var _v145 = _v143.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.bD.et, plane.bD.fu),
								_Utils_Tuple2(plane.bj.et, plane.bj.fu));
						}
					}
				}
			}
		}();
		var _v1 = _v0.a;
		var x1 = _v1.a;
		var x2 = _v1.b;
		var _v2 = _v0.b;
		var y1 = _v2.a;
		var y2 = _v2.b;
		var x1_ = x1 + A2($terezka$charts$Internal$Svg$lengthInCartesianX, plane, config.r);
		var x2_ = x2 + A2($terezka$charts$Internal$Svg$lengthInCartesianX, plane, config.r);
		var y1_ = y1 - A2($terezka$charts$Internal$Svg$lengthInCartesianY, plane, config.s);
		var y2_ = y2 - A2($terezka$charts$Internal$Svg$lengthInCartesianY, plane, config.s);
		var _v146 = (config.iB > 0) ? _Utils_Tuple2(
			A2(
				$terezka$charts$Internal$Svg$lengthInCartesianX,
				plane,
				$elm$core$Basics$cos(angle) * config.iB),
			A2(
				$terezka$charts$Internal$Svg$lengthInCartesianY,
				plane,
				$elm$core$Basics$sin(angle) * config.iB)) : _Utils_Tuple2(0, 0);
		var tickOffsetX = _v146.a;
		var tickOffsetY = _v146.b;
		var cmds = config.o ? _Utils_ap(
			(config.iB > 0) ? _List_fromArray(
				[
					A2($terezka$charts$Internal$Commands$Move, x2_ + tickOffsetX, y2_ + tickOffsetY),
					A2($terezka$charts$Internal$Commands$Line, x2_, y2_)
				]) : _List_fromArray(
				[
					A2($terezka$charts$Internal$Commands$Move, x2_, y2_)
				]),
			_Utils_ap(
				config.gC ? _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x2_, y1_),
						A2($terezka$charts$Internal$Commands$Line, x1_, y1_)
					]) : _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x1_, y1_)
					]),
				(config.iB > 0) ? _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x1_ + tickOffsetX, y1_ + tickOffsetY)
					]) : _List_Nil)) : _Utils_ap(
			(config.iB > 0) ? _List_fromArray(
				[
					A2($terezka$charts$Internal$Commands$Move, x1_ + tickOffsetX, y1_ + tickOffsetY),
					A2($terezka$charts$Internal$Commands$Line, x1_, y1_)
				]) : _List_fromArray(
				[
					A2($terezka$charts$Internal$Commands$Move, x1_, y1_)
				]),
			_Utils_ap(
				config.gC ? _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x1_, y2_),
						A2($terezka$charts$Internal$Commands$Line, x2_, y2_)
					]) : _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x2_, y2_)
					]),
				(config.iB > 0) ? _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x2_ + tickOffsetX, y2_ + tickOffsetY)
					]) : _List_Nil));
		return A4(
			$terezka$charts$Internal$Svg$withAttrs,
			config.l,
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('elm-charts__line'),
					$elm$svg$Svg$Attributes$fill('transparent'),
					$elm$svg$Svg$Attributes$stroke(config.gH),
					$elm$svg$Svg$Attributes$strokeWidth(
					$elm$core$String$fromFloat(config.eS)),
					$elm$svg$Svg$Attributes$strokeOpacity(
					$elm$core$String$fromFloat(config.aJ)),
					$elm$svg$Svg$Attributes$strokeDasharray(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, $elm$core$String$fromFloat, config.$7))),
					$elm$svg$Svg$Attributes$d(
					A2($terezka$charts$Internal$Commands$description, plane, cmds)),
					config.B ? $terezka$charts$Internal$Svg$withinChartArea(plane) : $elm$svg$Svg$Attributes$class('')
				]),
			_List_Nil);
	});
var $terezka$charts$Chart$Svg$line = F2(
	function (plane, edits) {
		return A2(
			$terezka$charts$Internal$Svg$line,
			plane,
			A2($terezka$charts$Internal$Helpers$apply, edits, $terezka$charts$Internal$Svg$defaultLine));
	});
var $terezka$charts$Chart$Attributes$size = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{h5: v});
	});
var $terezka$charts$Chart$Attributes$width = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{eS: v});
	});
var $terezka$charts$Chart$Attributes$x1 = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				ct: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$charts$Chart$Attributes$y1 = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				iZ: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$charts$Chart$grid = function (edits) {
	var config = A2(
		$terezka$charts$Internal$Helpers$apply,
		edits,
		{gH: '', $7: _List_Nil, cD: false, eS: 0});
	var width = (!config.eS) ? (config.cD ? 0.5 : 1) : config.eS;
	var color = $elm$core$String$isEmpty(config.gH) ? (config.cD ? $terezka$charts$Internal$Helpers$darkGray : $terezka$charts$Internal$Helpers$gray) : config.gH;
	var toDot = F4(
		function (vs, p, x, y) {
			return (A2($elm$core$List$member, x, vs.dd) || A2($elm$core$List$member, y, vs.de)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A5(
					$terezka$charts$Chart$Svg$dot,
					p,
					function ($) {
						return $.bD;
					},
					function ($) {
						return $.bj;
					},
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$color(color),
							$terezka$charts$Chart$Attributes$size(width),
							$terezka$charts$Chart$Attributes$circle
						]),
					{bD: x, bj: y}));
		});
	var toXGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.dd) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$color(color),
							$terezka$charts$Chart$Attributes$width(width),
							$terezka$charts$Chart$Attributes$x1(v),
							$terezka$charts$Chart$Attributes$dashed(config.$7)
						])));
		});
	var toYGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.de) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$color(color),
							$terezka$charts$Chart$Attributes$width(width),
							$terezka$charts$Chart$Attributes$y1(v),
							$terezka$charts$Chart$Attributes$dashed(config.$7)
						])));
		});
	return $terezka$charts$Chart$GridElement(
		F2(
			function (p, vs) {
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__grid')
						]),
					config.cD ? A2(
						$elm$core$List$concatMap,
						function (x) {
							return A2(
								$elm$core$List$filterMap,
								A3(toDot, vs, p, x),
								vs.az);
						},
						vs.ah) : _List_fromArray(
						[
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__x-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toXGrid, vs, p),
								vs.ah)),
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__y-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toYGrid, vs, p),
								vs.az))
						]));
			}));
};
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $terezka$charts$Chart$viewElements = F6(
	function (config, plane, tickValues, allItems, allLegends, elements) {
		var viewOne = F2(
			function (el, _v0) {
				var before = _v0.a;
				var chart_ = _v0.b;
				var after = _v0.c;
				switch (el.$) {
					case 0:
						return _Utils_Tuple3(before, chart_, after);
					case 1:
						var view = el.d;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 2:
						var view = el.e;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 3:
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 4:
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 5:
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 6:
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 7:
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 8:
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 9:
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(view, plane, tickValues),
								chart_),
							after);
					case 10:
						var func = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							A2(func, plane, allItems));
					case 11:
						var els = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							els);
					case 12:
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					default:
						var view = el.a;
						return _Utils_Tuple3(
							($elm$core$List$length(chart_) > 0) ? A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								before) : before,
							chart_,
							($elm$core$List$length(chart_) > 0) ? after : A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								after));
				}
			});
		return A3(
			$elm$core$List$foldr,
			viewOne,
			_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$charts$Chart$chart = F2(
	function (edits, unindexedElements) {
		var indexedElements = function () {
			var toIndexedEl = F2(
				function (el, _v4) {
					var acc = _v4.a;
					var index = _v4.b;
					switch (el.$) {
						case 0:
							var toElAndIndex = el.a;
							var _v6 = toElAndIndex(index);
							var newEl = _v6.a;
							var newIndex = _v6.b;
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[newEl])),
								newIndex);
						case 11:
							var els = el.a;
							return A3(
								$elm$core$List$foldl,
								toIndexedEl,
								_Utils_Tuple2(acc, index),
								els);
						default:
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[el])),
								index);
					}
				});
			return A3(
				$elm$core$List$foldl,
				toIndexedEl,
				_Utils_Tuple2(_List_Nil, 0),
				unindexedElements).a;
		}();
		var elements = function () {
			var isGrid = function (el) {
				if (el.$ === 9) {
					return true;
				} else {
					return false;
				}
			};
			return A2($elm$core$List$any, isGrid, indexedElements) ? indexedElements : A2(
				$elm$core$List$cons,
				$terezka$charts$Chart$grid(_List_Nil),
				indexedElements);
		}();
		var legends_ = $terezka$charts$Chart$getLegends(elements);
		var config = A2(
			$terezka$charts$Internal$Helpers$apply,
			edits,
			{
				l: _List_fromArray(
					[
						$elm$svg$Svg$Attributes$style('overflow: visible;')
					]),
				d6: _List_Nil,
				gS: _List_Nil,
				fj: 300,
				dx: _List_Nil,
				bs: {a4: 0, bb: 0, bf: 0, bh: 0},
				aK: {a4: 0, bb: 0, bf: 0, bh: 0},
				eC: _List_Nil,
				dG: true,
				eS: 300
			});
		var plane = A2($terezka$charts$Chart$definePlane, config, elements);
		var items = A2($terezka$charts$Chart$getItems, plane, elements);
		var toEvent = function (_v2) {
			var event_ = _v2;
			var _v1 = event_.d3;
			var decoder = _v1;
			return A2(
				$terezka$charts$Internal$Svg$Event,
				event_.fA,
				decoder(items));
		};
		var tickValues = A3($terezka$charts$Chart$getTickValues, plane, items, elements);
		var _v0 = A6($terezka$charts$Chart$viewElements, config, plane, tickValues, items, legends_, elements);
		var beforeEls = _v0.a;
		var chartEls = _v0.b;
		var afterEls = _v0.c;
		return A5(
			$terezka$charts$Internal$Svg$container,
			plane,
			{
				l: config.l,
				gS: A2($elm$core$List$map, toEvent, config.gS),
				dx: config.dx,
				dG: config.dG
			},
			beforeEls,
			chartEls,
			afterEls);
	});
var $terezka$charts$Chart$Attributes$domain = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{d6: v});
	});
var $terezka$charts$Chart$Attributes$exactly = F3(
	function (exact, _v0, _v1) {
		return exact;
	});
var $terezka$charts$Chart$Attributes$highest = F3(
	function (v, edit, b) {
		return _Utils_update(
			b,
			{
				fu: A3(edit, v, b.fu, b.gN)
			});
	});
var $terezka$charts$Chart$Attributes$orHigher = F3(
	function (most, real, _v0) {
		return (_Utils_cmp(real, most) < 0) ? most : real;
	});
var $author$project$Render$Data$expandRange = function (_v0) {
	var lowest = _v0.b0;
	var highest = _v0.eg;
	var low = function () {
		if (lowest.$ === 1) {
			return A2($terezka$charts$Chart$Attributes$lowest, 0, $terezka$charts$Chart$Attributes$orLower);
		} else {
			var u = lowest.a;
			return A2($terezka$charts$Chart$Attributes$lowest, u, $terezka$charts$Chart$Attributes$exactly);
		}
	}();
	var high = function () {
		if (highest.$ === 1) {
			return A2($terezka$charts$Chart$Attributes$highest, 100, $terezka$charts$Chart$Attributes$orHigher);
		} else {
			var u = highest.a;
			return A2($terezka$charts$Chart$Attributes$highest, u, $terezka$charts$Chart$Attributes$exactly);
		}
	}();
	return _List_fromArray(
		[low, high]);
};
var $terezka$charts$Chart$Attributes$fontSize = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				A: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$charts$Chart$Attributes$height = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{fj: v});
	});
var $terezka$charts$Internal$Svg$Linear = 0;
var $terezka$charts$Chart$Attributes$linear = function (config) {
	return _Utils_update(
		config,
		{
			er: $elm$core$Maybe$Just(0)
		});
};
var $terezka$charts$Chart$interpolated = F2(
	function (y, inter) {
		return A2(
			$terezka$charts$Internal$Property$property,
			A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
			_Utils_ap(
				_List_fromArray(
					[$terezka$charts$Chart$Attributes$linear]),
				inter));
	});
var $terezka$charts$Chart$Attributes$range = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{eC: v});
	});
var $terezka$charts$Chart$Attributes$red = $terezka$charts$Internal$Helpers$red;
var $terezka$charts$Chart$scatter = function (y) {
	return A2(
		$terezka$charts$Internal$Property$property,
		A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
		_List_Nil);
};
var $terezka$charts$Chart$SeriesElement = F4(
	function (a, b, c, d) {
		return {$: 1, a: a, b: b, c: c, d: d};
	});
var $terezka$charts$Internal$Legend$LineLegend = F3(
	function (a, b, c) {
		return {$: 1, a: a, b: b, c: c};
	});
var $terezka$charts$Internal$Svg$defaultInterpolation = {l: _List_Nil, gH: $terezka$charts$Internal$Helpers$pink, $7: _List_Nil, d5: $elm$core$Maybe$Nothing, er: $elm$core$Maybe$Nothing, aJ: 0, eS: 1};
var $terezka$charts$Chart$Attributes$opacity = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{aJ: v});
	});
var $terezka$charts$Internal$Legend$toDotLegends = F2(
	function (elIndex, properties) {
		var toInterConfig = function (attrs) {
			return A2($terezka$charts$Internal$Helpers$apply, attrs, $terezka$charts$Internal$Svg$defaultInterpolation);
		};
		var toDotLegend = F3(
			function (props, prop, colorIndex) {
				var defaultOpacity = ($elm$core$List$length(props) > 1) ? 0.4 : 0;
				var interAttr = _Utils_ap(
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$color(
							$terezka$charts$Internal$Helpers$toDefaultColor(colorIndex)),
							$terezka$charts$Chart$Attributes$opacity(defaultOpacity)
						]),
					prop.hj);
				var interConfig = toInterConfig(interAttr);
				var defaultName = 'Property #' + $elm$core$String$fromInt(colorIndex + 1);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$charts$Chart$Attributes$color(interConfig.gH),
						$terezka$charts$Chart$Attributes$border(interConfig.gH),
						_Utils_eq(interConfig.er, $elm$core$Maybe$Nothing) ? $terezka$charts$Chart$Attributes$circle : $elm$core$Basics$identity
					]);
				var dotAttrs = _Utils_ap(defaultAttrs, prop.l);
				return A3(
					$terezka$charts$Internal$Legend$LineLegend,
					A2($elm$core$Maybe$withDefault, defaultName, prop.fv),
					interAttr,
					dotAttrs);
			});
		return A2(
			$elm$core$List$indexedMap,
			F2(
				function (propIndex, f) {
					return f(elIndex + propIndex);
				}),
			A2(
				$elm$core$List$concatMap,
				function (ps) {
					return A2(
						$elm$core$List$map,
						toDotLegend(ps),
						ps);
				},
				A2($elm$core$List$map, $terezka$charts$Internal$Property$toConfigs, properties)));
	});
var $terezka$charts$Internal$Item$Dot = function (a) {
	return {$: 0, a: a};
};
var $elm$svg$Svg$Attributes$fillRule = _VirtualDom_attribute('fill-rule');
var $terezka$charts$Internal$Interpolation$linear = $elm$core$List$map(
	$elm$core$List$map(
		function (_v0) {
			var x = _v0.bD;
			var y = _v0.bj;
			return A2($terezka$charts$Internal$Commands$Line, x, y);
		}));
var $terezka$charts$Internal$Interpolation$First = {$: 0};
var $terezka$charts$Internal$Interpolation$Previous = function (a) {
	return {$: 1, a: a};
};
var $terezka$charts$Internal$Interpolation$monotoneCurve = F4(
	function (point0, point1, tangent0, tangent1) {
		var dx = (point1.bD - point0.bD) / 3;
		return A6($terezka$charts$Internal$Commands$CubicBeziers, point0.bD + dx, point0.bj + (dx * tangent0), point1.bD - dx, point1.bj - (dx * tangent1), point1.bD, point1.bj);
	});
var $terezka$charts$Internal$Interpolation$slope2 = F3(
	function (point0, point1, t) {
		var h = point1.bD - point0.bD;
		return (!(!h)) ? ((((3 * (point1.bj - point0.bj)) / h) - t) / 2) : t;
	});
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $terezka$charts$Internal$Interpolation$sign = function (x) {
	return (x < 0) ? (-1) : 1;
};
var $terezka$charts$Internal$Interpolation$toH = F2(
	function (h0, h1) {
		return (!h0) ? ((h1 < 0) ? (0 * (-1)) : h1) : h0;
	});
var $terezka$charts$Internal$Interpolation$slope3 = F3(
	function (point0, point1, point2) {
		var h1 = point2.bD - point1.bD;
		var h0 = point1.bD - point0.bD;
		var s0h = A2($terezka$charts$Internal$Interpolation$toH, h0, h1);
		var s0 = (point1.bj - point0.bj) / s0h;
		var s1h = A2($terezka$charts$Internal$Interpolation$toH, h1, h0);
		var s1 = (point2.bj - point1.bj) / s1h;
		var p = ((s0 * h1) + (s1 * h0)) / (h0 + h1);
		var slope = ($terezka$charts$Internal$Interpolation$sign(s0) + $terezka$charts$Internal$Interpolation$sign(s1)) * A2(
			$elm$core$Basics$min,
			A2(
				$elm$core$Basics$min,
				$elm$core$Basics$abs(s0),
				$elm$core$Basics$abs(s1)),
			0.5 * $elm$core$Basics$abs(p));
		return $elm$core$Basics$isNaN(slope) ? 0 : slope;
	});
var $terezka$charts$Internal$Interpolation$monotonePart = F2(
	function (points, _v0) {
		var tangent = _v0.a;
		var commands = _v0.b;
		var _v1 = _Utils_Tuple2(tangent, points);
		_v1$4:
		while (true) {
			if (!_v1.a.$) {
				if (_v1.b.b && _v1.b.b.b) {
					if (_v1.b.b.b.b) {
						var _v2 = _v1.a;
						var _v3 = _v1.b;
						var p0 = _v3.a;
						var _v4 = _v3.b;
						var p1 = _v4.a;
						var _v5 = _v4.b;
						var p2 = _v5.a;
						var rest = _v5.b;
						var t1 = A3($terezka$charts$Internal$Interpolation$slope3, p0, p1, p2);
						var t0 = A3($terezka$charts$Internal$Interpolation$slope2, p0, p1, t1);
						return A2(
							$terezka$charts$Internal$Interpolation$monotonePart,
							A2(
								$elm$core$List$cons,
								p1,
								A2($elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								$terezka$charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4($terezka$charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var _v9 = _v1.a;
						var _v10 = _v1.b;
						var p0 = _v10.a;
						var _v11 = _v10.b;
						var p1 = _v11.a;
						var t1 = A3($terezka$charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							$terezka$charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4($terezka$charts$Internal$Interpolation$monotoneCurve, p0, p1, t1, t1),
										A2($terezka$charts$Internal$Commands$Line, p1.bD, p1.bj)
									])));
					}
				} else {
					break _v1$4;
				}
			} else {
				if (_v1.b.b && _v1.b.b.b) {
					if (_v1.b.b.b.b) {
						var t0 = _v1.a.a;
						var _v6 = _v1.b;
						var p0 = _v6.a;
						var _v7 = _v6.b;
						var p1 = _v7.a;
						var _v8 = _v7.b;
						var p2 = _v8.a;
						var rest = _v8.b;
						var t1 = A3($terezka$charts$Internal$Interpolation$slope3, p0, p1, p2);
						return A2(
							$terezka$charts$Internal$Interpolation$monotonePart,
							A2(
								$elm$core$List$cons,
								p1,
								A2($elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								$terezka$charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4($terezka$charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var t0 = _v1.a.a;
						var _v12 = _v1.b;
						var p0 = _v12.a;
						var _v13 = _v12.b;
						var p1 = _v13.a;
						var t1 = A3($terezka$charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							$terezka$charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4($terezka$charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1),
										A2($terezka$charts$Internal$Commands$Line, p1.bD, p1.bj)
									])));
					}
				} else {
					break _v1$4;
				}
			}
		}
		return _Utils_Tuple2(tangent, commands);
	});
var $terezka$charts$Internal$Interpolation$monotoneSection = F2(
	function (points, _v0) {
		var tangent = _v0.a;
		var acc = _v0.b;
		var _v1 = function () {
			if (points.b) {
				var p0 = points.a;
				var rest = points.b;
				return A2(
					$terezka$charts$Internal$Interpolation$monotonePart,
					A2($elm$core$List$cons, p0, rest),
					_Utils_Tuple2(
						tangent,
						_List_fromArray(
							[
								A2($terezka$charts$Internal$Commands$Line, p0.bD, p0.bj)
							])));
			} else {
				return _Utils_Tuple2(tangent, _List_Nil);
			}
		}();
		var t0 = _v1.a;
		var commands = _v1.b;
		return _Utils_Tuple2(
			t0,
			A2($elm$core$List$cons, commands, acc));
	});
var $terezka$charts$Internal$Interpolation$monotone = function (sections) {
	return A3(
		$elm$core$List$foldr,
		$terezka$charts$Internal$Interpolation$monotoneSection,
		_Utils_Tuple2($terezka$charts$Internal$Interpolation$First, _List_Nil),
		sections).b;
};
var $terezka$charts$Internal$Interpolation$Point = F2(
	function (x, y) {
		return {bD: x, bj: y};
	});
var $terezka$charts$Internal$Interpolation$after = F2(
	function (a, b) {
		return _List_fromArray(
			[
				a,
				A2($terezka$charts$Internal$Interpolation$Point, b.bD, a.bj),
				b
			]);
	});
var $terezka$charts$Internal$Interpolation$stepped = function (sections) {
	var expand = F2(
		function (result, section) {
			expand:
			while (true) {
				if (section.b) {
					if (section.b.b) {
						var a = section.a;
						var _v1 = section.b;
						var b = _v1.a;
						var rest = _v1.b;
						var $temp$result = _Utils_ap(
							result,
							A2($terezka$charts$Internal$Interpolation$after, a, b)),
							$temp$section = A2($elm$core$List$cons, b, rest);
						result = $temp$result;
						section = $temp$section;
						continue expand;
					} else {
						var last = section.a;
						return result;
					}
				} else {
					return result;
				}
			}
		});
	return A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			expand(_List_Nil),
			$elm$core$List$map(
				function (_v2) {
					var x = _v2.bD;
					var y = _v2.bj;
					return A2($terezka$charts$Internal$Commands$Line, x, y);
				})),
		sections);
};
var $terezka$charts$Internal$Svg$last = function (list) {
	return $elm$core$List$head(
		A2(
			$elm$core$List$drop,
			$elm$core$List$length(list) - 1,
			list));
};
var $terezka$charts$Internal$Svg$withBorder = F2(
	function (stuff, func) {
		if (stuff.b) {
			var first = stuff.a;
			var rest = stuff.b;
			return $elm$core$Maybe$Just(
				A2(
					func,
					first,
					A2(
						$elm$core$Maybe$withDefault,
						first,
						$terezka$charts$Internal$Svg$last(rest))));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $terezka$charts$Internal$Svg$toCommands = F4(
	function (method, toX, toY, data) {
		var toSets = F2(
			function (ps, cmds) {
				return A2(
					$terezka$charts$Internal$Svg$withBorder,
					ps,
					F2(
						function (first, last_) {
							return _Utils_Tuple3(first, cmds, last_);
						}));
			});
		var fold = F2(
			function (datum_, acc) {
				var _v1 = toY(datum_);
				if (!_v1.$) {
					var y_ = _v1.a;
					if (acc.b) {
						var latest = acc.a;
						var rest = acc.b;
						return A2(
							$elm$core$List$cons,
							_Utils_ap(
								latest,
								_List_fromArray(
									[
										{
										bD: toX(datum_),
										bj: y_
									}
									])),
							rest);
					} else {
						return A2(
							$elm$core$List$cons,
							_List_fromArray(
								[
									{
									bD: toX(datum_),
									bj: y_
								}
								]),
							acc);
					}
				} else {
					return A2($elm$core$List$cons, _List_Nil, acc);
				}
			});
		var points = $elm$core$List$reverse(
			A3($elm$core$List$foldl, fold, _List_Nil, data));
		var commands = function () {
			switch (method) {
				case 0:
					return $terezka$charts$Internal$Interpolation$linear(points);
				case 1:
					return $terezka$charts$Internal$Interpolation$monotone(points);
				default:
					return $terezka$charts$Internal$Interpolation$stepped(points);
			}
		}();
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A3($elm$core$List$map2, toSets, points, commands));
	});
var $terezka$charts$Internal$Svg$area = F6(
	function (plane, toX, toY2M, toY, config, data) {
		var _v0 = function () {
			var _v1 = config.d5;
			if (_v1.$ === 1) {
				return _Utils_Tuple2(
					$elm$svg$Svg$text(''),
					config.gH);
			} else {
				var design = _v1.a;
				return A2($terezka$charts$Internal$Svg$toPattern, config.gH, design);
			}
		}();
		var patternDefs = _v0.a;
		var fill = _v0.b;
		var view = function (cmds) {
			return A4(
				$terezka$charts$Internal$Svg$withAttrs,
				config.l,
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__area-section'),
						$elm$svg$Svg$Attributes$fill(fill),
						$elm$svg$Svg$Attributes$fillOpacity(
						$elm$core$String$fromFloat(config.aJ)),
						$elm$svg$Svg$Attributes$strokeWidth('0'),
						$elm$svg$Svg$Attributes$fillRule('evenodd'),
						$elm$svg$Svg$Attributes$d(
						A2($terezka$charts$Internal$Commands$description, plane, cmds)),
						$terezka$charts$Internal$Svg$withinChartArea(plane)
					]),
				_List_Nil);
		};
		var withUnder = F2(
			function (_v5, _v6) {
				var firstBottom = _v5.a;
				var cmdsBottom = _v5.b;
				var endBottom = _v5.c;
				var firstTop = _v6.a;
				var cmdsTop = _v6.b;
				var endTop = _v6.c;
				return view(
					_Utils_ap(
						_List_fromArray(
							[
								A2($terezka$charts$Internal$Commands$Move, firstBottom.bD, firstBottom.bj),
								A2($terezka$charts$Internal$Commands$Line, firstTop.bD, firstTop.bj)
							]),
						_Utils_ap(
							cmdsTop,
							_Utils_ap(
								_List_fromArray(
									[
										A2($terezka$charts$Internal$Commands$Move, firstBottom.bD, firstBottom.bj)
									]),
								_Utils_ap(
									cmdsBottom,
									_List_fromArray(
										[
											A2($terezka$charts$Internal$Commands$Line, endTop.bD, endTop.bj)
										]))))));
			});
		var withoutUnder = function (_v4) {
			var first = _v4.a;
			var cmds = _v4.b;
			var end = _v4.c;
			return view(
				_Utils_ap(
					_List_fromArray(
						[
							A2($terezka$charts$Internal$Commands$Move, first.bD, 0),
							A2($terezka$charts$Internal$Commands$Line, first.bD, first.bj)
						]),
					_Utils_ap(
						cmds,
						_List_fromArray(
							[
								A2($terezka$charts$Internal$Commands$Line, end.bD, 0)
							]))));
		};
		if (config.aJ <= 0) {
			return $elm$svg$Svg$text('');
		} else {
			var _v2 = config.er;
			if (_v2.$ === 1) {
				return $elm$svg$Svg$text('');
			} else {
				var method = _v2.a;
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__area-sections')
						]),
					function () {
						if (toY2M.$ === 1) {
							return A2(
								$elm$core$List$cons,
								patternDefs,
								A2(
									$elm$core$List$map,
									withoutUnder,
									A4($terezka$charts$Internal$Svg$toCommands, method, toX, toY, data)));
						} else {
							var toY2 = toY2M.a;
							return A2(
								$elm$core$List$cons,
								patternDefs,
								A3(
									$elm$core$List$map2,
									withUnder,
									A4($terezka$charts$Internal$Svg$toCommands, method, toX, toY2, data),
									A4($terezka$charts$Internal$Svg$toCommands, method, toX, toY, data)));
						}
					}());
			}
		}
	});
var $terezka$charts$Internal$Svg$interpolation = F5(
	function (plane, toX, toY, config, data) {
		var view = function (_v1) {
			var first = _v1.a;
			var cmds = _v1.b;
			return A4(
				$terezka$charts$Internal$Svg$withAttrs,
				config.l,
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__interpolation-section'),
						$elm$svg$Svg$Attributes$fill('transparent'),
						$elm$svg$Svg$Attributes$stroke(config.gH),
						$elm$svg$Svg$Attributes$strokeDasharray(
						A2(
							$elm$core$String$join,
							' ',
							A2($elm$core$List$map, $elm$core$String$fromFloat, config.$7))),
						$elm$svg$Svg$Attributes$strokeWidth(
						$elm$core$String$fromFloat(config.eS)),
						$elm$svg$Svg$Attributes$d(
						A2(
							$terezka$charts$Internal$Commands$description,
							plane,
							A2(
								$elm$core$List$cons,
								A2($terezka$charts$Internal$Commands$Move, first.bD, first.bj),
								cmds))),
						$terezka$charts$Internal$Svg$withinChartArea(plane)
					]),
				_List_Nil);
		};
		var _v0 = config.er;
		if (_v0.$ === 1) {
			return $elm$svg$Svg$text('');
		} else {
			var method = _v0.a;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__interpolation-sections')
					]),
				A2(
					$elm$core$List$map,
					view,
					A4($terezka$charts$Internal$Svg$toCommands, method, toX, toY, data)));
		}
	});
var $terezka$charts$Internal$Svg$toRadius = F2(
	function (size_, shape) {
		var area_ = (2 * $elm$core$Basics$pi) * size_;
		switch (shape) {
			case 0:
				return $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
			case 1:
				var side = $elm$core$Basics$sqrt(
					(area_ * 4) / $elm$core$Basics$sqrt(3));
				return $elm$core$Basics$sqrt(3) * side;
			case 2:
				return $elm$core$Basics$sqrt(area_) / 2;
			case 3:
				return $elm$core$Basics$sqrt(area_) / 2;
			case 4:
				return $elm$core$Basics$sqrt(area_ / 4);
			default:
				return $elm$core$Basics$sqrt(area_ / 4);
		}
	});
var $terezka$charts$Internal$Produce$toDotSeries = F4(
	function (elIndex, toX, properties, data) {
		var toInterConfig = function (attrs) {
			return A2($terezka$charts$Internal$Helpers$apply, attrs, $terezka$charts$Internal$Svg$defaultInterpolation);
		};
		var toDotConfig = function (attrs) {
			return A2($terezka$charts$Internal$Helpers$apply, attrs, $terezka$charts$Internal$Svg$defaultDot);
		};
		var toDotItem = F7(
			function (lineIndex, stackIndex, colorIndex, prop, interConfig, dataIndex, datum_) {
				var y_ = A2(
					$elm$core$Maybe$withDefault,
					0,
					prop.db(datum_));
				var x_ = toX(datum_);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$charts$Chart$Attributes$color(interConfig.gH),
						$terezka$charts$Chart$Attributes$border(interConfig.gH),
						_Utils_eq(interConfig.er, $elm$core$Maybe$Nothing) ? $terezka$charts$Chart$Attributes$circle : $elm$core$Basics$identity
					]);
				var dotAttrs = _Utils_ap(
					defaultAttrs,
					_Utils_ap(
						prop.l,
						A5(prop.gV, lineIndex, stackIndex, dataIndex, prop.fv, datum_)));
				var config = toDotConfig(dotAttrs);
				return {
					gJ: {
						hM: config,
						iE: $terezka$charts$Internal$Item$Dot,
						dO: {
							_: config._,
							ae: config.ae,
							gH: function () {
								var _v6 = config.gH;
								if (_v6 === 'white') {
									return interConfig.gH;
								} else {
									return config.gH;
								}
							}(),
							bR: dataIndex,
							gR: elIndex,
							fg: prop.ak(datum_),
							dy: colorIndex,
							fA: prop.fv,
							hN: lineIndex,
							k: stackIndex
						},
						iS: {
							gP: datum_,
							hl: function () {
								var _v7 = prop.ag(datum_);
								if (!_v7.$) {
									return true;
								} else {
									return false;
								}
							}(),
							ct: x_,
							dc: x_,
							bj: y_
						}
					},
					iF: function (c) {
						return _List_fromArray(
							[
								A3(
								$terezka$charts$Internal$Produce$tooltipRow,
								c.dO.gH,
								A2($terezka$charts$Internal$Produce$toDefaultName, colorIndex, c.dO.fA),
								prop.ak(datum_))
							]);
					},
					iG: function (_v8) {
						return {ct: x_, dc: x_, iZ: y_, eX: y_};
					},
					iJ: F2(
						function (plane, _v9) {
							var radius = A2(
								$elm$core$Maybe$withDefault,
								0,
								A2(
									$elm$core$Maybe$map,
									$terezka$charts$Internal$Svg$toRadius(config.h5),
									config.ci));
							var radiusX_ = A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, radius);
							var radiusY_ = A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, radius);
							return {ct: x_ - radiusX_, dc: x_ + radiusX_, iZ: y_ - radiusY_, eX: y_ + radiusY_};
						}),
					iK: F3(
						function (plane, _v10, _v11) {
							var _v12 = prop.ag(datum_);
							if (_v12.$ === 1) {
								return $elm$svg$Svg$text('');
							} else {
								return A5(
									$terezka$charts$Internal$Svg$dot,
									plane,
									function ($) {
										return $.bD;
									},
									function ($) {
										return $.bj;
									},
									config,
									{bD: x_, bj: y_});
							}
						})
				};
			});
		var toSeriesItem = F5(
			function (lineIndex, stacks, stackIndex, prop, colorIndex) {
				var defaultOpacity = ($elm$core$List$length(stacks) > 1) ? 0.4 : 0;
				var interAttr = _Utils_ap(
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$color(
							$terezka$charts$Internal$Helpers$toDefaultColor(colorIndex)),
							$terezka$charts$Chart$Attributes$opacity(defaultOpacity)
						]),
					prop.hj);
				var interConfig = toInterConfig(interAttr);
				var dotItems = A2(
					$elm$core$List$indexedMap,
					A5(toDotItem, lineIndex, stackIndex, colorIndex, prop, interConfig),
					data);
				if (!dotItems.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					var first = dotItems.a;
					var rest = dotItems.b;
					return $elm$core$Maybe$Just(
						{
							gJ: {
								at: _Utils_Tuple2(first, rest)
							},
							iF: function (c) {
								return _List_fromArray(
									[
										A2(
										$elm$html$Html$table,
										_List_fromArray(
											[
												A2($elm$html$Html$Attributes$style, 'margin', '0')
											]),
										A2(
											$elm$core$List$concatMap,
											$terezka$charts$Internal$Item$toHtml,
											function (_v1) {
												var x = _v1.a;
												var xs = _v1.b;
												return A2($elm$core$List$cons, x, xs);
											}(c.at)))
									]);
							},
							iG: function (c) {
								return A2(
									$terezka$charts$Internal$Coordinates$foldPosition,
									$terezka$charts$Internal$Item$getLimits,
									function (_v2) {
										var x = _v2.a;
										var xs = _v2.b;
										return A2($elm$core$List$cons, x, xs);
									}(c.at));
							},
							iJ: F2(
								function (plane, c) {
									return A2(
										$terezka$charts$Internal$Coordinates$foldPosition,
										$terezka$charts$Internal$Item$getPosition(plane),
										function (_v3) {
											var x = _v3.a;
											var xs = _v3.b;
											return A2($elm$core$List$cons, x, xs);
										}(c.at));
								}),
							iK: F3(
								function (plane, _v4, _v5) {
									var toBottom = function (datum_) {
										return A3(
											$elm$core$Maybe$map2,
											F2(
												function (real, visual) {
													return visual - real;
												}),
											prop.ag(datum_),
											prop.db(datum_));
									};
									return A2(
										$elm$svg$Svg$g,
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$class('elm-charts__series')
											]),
										_List_fromArray(
											[
												A6(
												$terezka$charts$Internal$Svg$area,
												plane,
												toX,
												$elm$core$Maybe$Just(toBottom),
												prop.db,
												interConfig,
												data),
												A5($terezka$charts$Internal$Svg$interpolation, plane, toX, prop.db, interConfig, data),
												A2(
												$elm$svg$Svg$g,
												_List_fromArray(
													[
														$elm$svg$Svg$Attributes$class('elm-charts__dots')
													]),
												A2(
													$elm$core$List$map,
													$terezka$charts$Internal$Item$toSvg(plane),
													dotItems))
											]));
								})
						});
				}
			});
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (propIndex, f) {
						return f(elIndex + propIndex);
					}),
				$elm$core$List$concat(
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (lineIndex, stacks) {
								return A2(
									$elm$core$List$indexedMap,
									A2(toSeriesItem, lineIndex, stacks),
									stacks);
							}),
						A2($elm$core$List$map, $terezka$charts$Internal$Property$toConfigs, properties)))));
	});
var $terezka$charts$Chart$seriesMap = F4(
	function (mapData, toX, properties, data) {
		return $terezka$charts$Chart$Indexed(
			function (index) {
				var legends_ = A2($terezka$charts$Internal$Legend$toDotLegends, index, properties);
				var items = A4($terezka$charts$Internal$Produce$toDotSeries, index, toX, properties, data);
				var toLimits = A2($elm$core$List$map, $terezka$charts$Internal$Item$getLimits, items);
				var generalized = A2(
					$elm$core$List$map,
					$terezka$charts$Internal$Item$map(mapData),
					A2($elm$core$List$concatMap, $terezka$charts$Internal$Many$getGenerals, items));
				return _Utils_Tuple2(
					A4(
						$terezka$charts$Chart$SeriesElement,
						toLimits,
						generalized,
						legends_,
						function (p) {
							return A2(
								$elm$svg$Svg$map,
								$elm$core$Basics$never,
								A2(
									$elm$svg$Svg$g,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$class('elm-charts__dot-series')
										]),
									A2(
										$elm$core$List$map,
										$terezka$charts$Internal$Item$toSvg(p),
										items)));
						}),
					index + $elm$core$List$length(
						A2($elm$core$List$concatMap, $terezka$charts$Internal$Property$toConfigs, properties)));
			});
	});
var $terezka$charts$Chart$series = F3(
	function (toX, properties, data) {
		return A4($terezka$charts$Chart$seriesMap, $elm$core$Basics$identity, toX, properties, data);
	});
var $terezka$charts$Chart$Attributes$withGrid = function (config) {
	return _Utils_update(
		config,
		{g$: true});
};
var $terezka$charts$Internal$Svg$Floats = {$: 0};
var $terezka$charts$Chart$LabelsElement = F3(
	function (a, b, c) {
		return {$: 7, a: a, b: b, c: c};
	});
var $terezka$charts$Internal$Svg$defaultLabel = {x: $elm$core$Maybe$Nothing, l: _List_Nil, _: 'white', ae: 0, gH: '#808BAB', z: $elm$core$Maybe$Nothing, A: $elm$core$Maybe$Nothing, B: false, G: 0, H: false, r: 0, s: 0};
var $terezka$charts$Internal$Svg$Generator = $elm$core$Basics$identity;
var $terezka$intervals$Intervals$Around = function (a) {
	return {$: 1, a: a};
};
var $terezka$intervals$Intervals$around = $terezka$intervals$Intervals$Around;
var $terezka$intervals$Intervals$ceilingTo = F2(
	function (prec, number) {
		return prec * $elm$core$Basics$ceiling(number / prec);
	});
var $terezka$intervals$Intervals$getBeginning = F2(
	function (min, interval) {
		var multiple = min / interval;
		return _Utils_eq(
			multiple,
			$elm$core$Basics$round(multiple)) ? min : A2($terezka$intervals$Intervals$ceilingTo, interval, min);
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			$elm$core$List$any,
			function (c) {
				return (c !== '0') && (c !== '.');
			},
			$elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var $elm$core$Char$fromCode = _Char_fromCode;
var $myrho$elm_round$Round$increaseNum = function (_v0) {
	var head = _v0.a;
	var tail = _v0.b;
	if (head === '9') {
		var _v1 = $elm$core$String$uncons(tail);
		if (_v1.$ === 1) {
			return '01';
		} else {
			var headtail = _v1.a;
			return A2(
				$elm$core$String$cons,
				'0',
				$myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = $elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			$elm$core$String$cons,
			$elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var $elm$core$Basics$isInfinite = _Basics_isInfinite;
var $elm$core$String$reverse = _String_reverse;
var $myrho$elm_round$Round$splitComma = function (str) {
	var _v0 = A2($elm$core$String$split, '.', str);
	if (_v0.b) {
		if (_v0.b.b) {
			var before = _v0.a;
			var _v1 = _v0.b;
			var after = _v1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _v0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var $myrho$elm_round$Round$toDecimal = function (fl) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(
			$elm$core$Basics$abs(fl)));
	if (_v0.b) {
		if (_v0.b.b) {
			var num = _v0.a;
			var _v1 = _v0.b;
			var exp = _v1.a;
			var e = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(
					A2($elm$core$String$startsWith, '+', exp) ? A2($elm$core$String$dropLeft, 1, exp) : exp));
			var _v2 = $myrho$elm_round$Round$splitComma(num);
			var before = _v2.a;
			var after = _v2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				$elm$core$Maybe$withDefault,
				'0',
				A2(
					$elm$core$Maybe$map,
					function (_v3) {
						var a = _v3.a;
						var b = _v3.b;
						return a + ('.' + b);
					},
					A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$mapFirst($elm$core$String$fromChar),
						$elm$core$String$uncons(
							_Utils_ap(
								A2(
									$elm$core$String$repeat,
									$elm$core$Basics$abs(e),
									'0'),
								total))))) : A3($elm$core$String$padRight, e + 1, '0', total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _v0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var $myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if ($elm$core$Basics$isInfinite(fl) || $elm$core$Basics$isNaN(fl)) {
			return $elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _v0 = $myrho$elm_round$Round$splitComma(
				$myrho$elm_round$Round$toDecimal(
					$elm$core$Basics$abs(fl)));
			var before = _v0.a;
			var after = _v0.b;
			var r = $elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2($elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					$elm$core$String$padRight,
					r,
					'0',
					_Utils_ap(before, after)));
			var totalLen = $elm$core$String$length(normalized);
			var roundDigitIndex = A2($elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3($elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3($elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? $elm$core$String$reverse(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2(
						$elm$core$Maybe$map,
						$myrho$elm_round$Round$increaseNum,
						$elm$core$String$uncons(
							$elm$core$String$reverse(remains))))) : remains;
			var numLen = $elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					$elm$core$String$repeat,
					$elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				$elm$core$String$length(after)) < 0) ? (A3($elm$core$String$slice, 0, numLen - s, num) + ('.' + A3($elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3($elm$core$String$padRight, s, '0', after))));
			return A2($myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var $myrho$elm_round$Round$round = $myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _v0 = $elm$core$String$uncons(str);
			if (_v0.$ === 1) {
				return false;
			} else {
				if ('5' === _v0.a.a) {
					if (_v0.a.b === '') {
						var _v1 = _v0.a;
						return !signed;
					} else {
						var _v2 = _v0.a;
						return true;
					}
				} else {
					var _v3 = _v0.a;
					var _int = _v3.a;
					return function (i) {
						return ((i > 53) && signed) || ((i >= 53) && (!signed));
					}(
						$elm$core$Char$toCode(_int));
				}
			}
		}));
var $terezka$intervals$Intervals$correctFloat = function (prec) {
	return A2(
		$elm$core$Basics$composeR,
		$myrho$elm_round$Round$round(prec),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$String$toFloat,
			$elm$core$Maybe$withDefault(0)));
};
var $terezka$intervals$Intervals$getMultiples = F3(
	function (magnitude, allowDecimals, hasTickAmount) {
		var defaults = hasTickAmount ? _List_fromArray(
			[1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10]) : _List_fromArray(
			[1, 2, 2.5, 5, 10]);
		return allowDecimals ? defaults : ((magnitude === 1) ? A2(
			$elm$core$List$filter,
			function (n) {
				return _Utils_eq(
					$elm$core$Basics$round(n),
					n);
			},
			defaults) : ((magnitude <= 0.1) ? _List_fromArray(
			[1 / magnitude]) : defaults));
	});
var $terezka$intervals$Intervals$getPrecision = function (number) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(number));
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var before = _v0.a;
		var _v1 = _v0.b;
		var after = _v1.a;
		return $elm$core$Basics$abs(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(after)));
	} else {
		var _v2 = A2(
			$elm$core$String$split,
			'.',
			$elm$core$String$fromFloat(number));
		if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
			var before = _v2.a;
			var _v3 = _v2.b;
			var after = _v3.a;
			return $elm$core$String$length(after);
		} else {
			return 0;
		}
	}
};
var $elm$core$Basics$e = _Basics_e;
var $elm$core$Basics$pow = _Basics_pow;
var $terezka$intervals$Intervals$toMagnitude = function (num) {
	return A2(
		$elm$core$Basics$pow,
		10,
		$elm$core$Basics$floor(
			A2($elm$core$Basics$logBase, $elm$core$Basics$e, num) / A2($elm$core$Basics$logBase, $elm$core$Basics$e, 10)));
};
var $terezka$intervals$Intervals$getInterval = F3(
	function (intervalRaw, allowDecimals, hasTickAmount) {
		var magnitude = $terezka$intervals$Intervals$toMagnitude(intervalRaw);
		var multiples = A3($terezka$intervals$Intervals$getMultiples, magnitude, allowDecimals, hasTickAmount);
		var normalized = intervalRaw / magnitude;
		var findMultipleExact = function (multiples_) {
			findMultipleExact:
			while (true) {
				if (multiples_.b) {
					var m1 = multiples_.a;
					var rest = multiples_.b;
					if (_Utils_cmp(m1 * magnitude, intervalRaw) > -1) {
						return m1;
					} else {
						var $temp$multiples_ = rest;
						multiples_ = $temp$multiples_;
						continue findMultipleExact;
					}
				} else {
					return 1;
				}
			}
		};
		var findMultiple = function (multiples_) {
			findMultiple:
			while (true) {
				if (multiples_.b) {
					if (multiples_.b.b) {
						var m1 = multiples_.a;
						var _v2 = multiples_.b;
						var m2 = _v2.a;
						var rest = _v2.b;
						if (_Utils_cmp(normalized, (m1 + m2) / 2) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = A2($elm$core$List$cons, m2, rest);
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					} else {
						var m1 = multiples_.a;
						var rest = multiples_.b;
						if (_Utils_cmp(normalized, m1) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = rest;
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					}
				} else {
					return 1;
				}
			}
		};
		var multiple = hasTickAmount ? findMultipleExact(multiples) : findMultiple(multiples);
		var precision = $terezka$intervals$Intervals$getPrecision(magnitude) + $terezka$intervals$Intervals$getPrecision(multiple);
		return A2($terezka$intervals$Intervals$correctFloat, precision, multiple * magnitude);
	});
var $terezka$intervals$Intervals$positions = F5(
	function (range, beginning, interval, m, acc) {
		positions:
		while (true) {
			var nextPosition = A2(
				$terezka$intervals$Intervals$correctFloat,
				$terezka$intervals$Intervals$getPrecision(interval),
				beginning + (m * interval));
			if (_Utils_cmp(nextPosition, range.fu) > 0) {
				return acc;
			} else {
				var $temp$range = range,
					$temp$beginning = beginning,
					$temp$interval = interval,
					$temp$m = m + 1,
					$temp$acc = _Utils_ap(
					acc,
					_List_fromArray(
						[nextPosition]));
				range = $temp$range;
				beginning = $temp$beginning;
				interval = $temp$interval;
				m = $temp$m;
				acc = $temp$acc;
				continue positions;
			}
		}
	});
var $terezka$intervals$Intervals$values = F4(
	function (allowDecimals, exact, amountRough, range) {
		var intervalRough = (range.fu - range.et) / amountRough;
		var interval = A3($terezka$intervals$Intervals$getInterval, intervalRough, allowDecimals, exact);
		var intervalSafe = (!interval) ? 1 : interval;
		var beginning = A2($terezka$intervals$Intervals$getBeginning, range.et, intervalSafe);
		var amountRoughSafe = (!amountRough) ? 1 : amountRough;
		return A5($terezka$intervals$Intervals$positions, range, beginning, intervalSafe, 0, _List_Nil);
	});
var $terezka$intervals$Intervals$floats = function (amount) {
	if (!amount.$) {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, true, number);
	} else {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, false, number);
	}
};
var $terezka$charts$Internal$Svg$floats = F2(
	function (i, b) {
		return A2(
			$terezka$intervals$Intervals$floats,
			$terezka$intervals$Intervals$around(i),
			{fu: b.fu, et: b.et});
	});
var $terezka$charts$Chart$Svg$floats = $terezka$charts$Internal$Svg$floats;
var $ryannhg$date_format$DateFormat$Language$Language = F6(
	function (toMonthName, toMonthAbbreviation, toWeekdayName, toWeekdayAbbreviation, toAmPm, toOrdinalSuffix) {
		return {iD: toAmPm, iH: toMonthAbbreviation, iI: toMonthName, cp: toOrdinalSuffix, iL: toWeekdayAbbreviation, iM: toWeekdayName};
	});
var $ryannhg$date_format$DateFormat$Language$toEnglishAmPm = function (hour) {
	return (hour > 11) ? 'pm' : 'am';
};
var $ryannhg$date_format$DateFormat$Language$toEnglishMonthName = function (month) {
	switch (month) {
		case 0:
			return 'January';
		case 1:
			return 'February';
		case 2:
			return 'March';
		case 3:
			return 'April';
		case 4:
			return 'May';
		case 5:
			return 'June';
		case 6:
			return 'July';
		case 7:
			return 'August';
		case 8:
			return 'September';
		case 9:
			return 'October';
		case 10:
			return 'November';
		default:
			return 'December';
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishSuffix = function (num) {
	var _v0 = A2($elm$core$Basics$modBy, 100, num);
	switch (_v0) {
		case 11:
			return 'th';
		case 12:
			return 'th';
		case 13:
			return 'th';
		default:
			var _v1 = A2($elm$core$Basics$modBy, 10, num);
			switch (_v1) {
				case 1:
					return 'st';
				case 2:
					return 'nd';
				case 3:
					return 'rd';
				default:
					return 'th';
			}
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName = function (weekday) {
	switch (weekday) {
		case 0:
			return 'Monday';
		case 1:
			return 'Tuesday';
		case 2:
			return 'Wednesday';
		case 3:
			return 'Thursday';
		case 4:
			return 'Friday';
		case 5:
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $ryannhg$date_format$DateFormat$Language$english = A6(
	$ryannhg$date_format$DateFormat$Language$Language,
	$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishAmPm,
	$ryannhg$date_format$DateFormat$Language$toEnglishSuffix);
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0;
	return millis;
};
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.ib, posixMinutes) < 0) {
					return posixMinutes + era.hB;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $ryannhg$date_format$DateFormat$amPm = F3(
	function (language, zone, posix) {
		return language.iD(
			A2($elm$time$Time$toHour, zone, posix));
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		e8: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		fx: month,
		f7: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).e8;
	});
var $ryannhg$date_format$DateFormat$dayOfMonth = $elm$time$Time$toDay;
var $elm$time$Time$Sun = 6;
var $elm$time$Time$Fri = 4;
var $elm$time$Time$Mon = 0;
var $elm$time$Time$Sat = 5;
var $elm$time$Time$Thu = 3;
var $elm$time$Time$Tue = 1;
var $elm$time$Time$Wed = 2;
var $ryannhg$date_format$DateFormat$days = _List_fromArray(
	[6, 0, 1, 2, 3, 4, 5]);
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return 3;
			case 1:
				return 4;
			case 2:
				return 5;
			case 3:
				return 6;
			case 4:
				return 0;
			case 5:
				return 1;
			default:
				return 2;
		}
	});
var $ryannhg$date_format$DateFormat$dayOfWeek = F2(
	function (zone, posix) {
		return function (_v1) {
			var i = _v1.a;
			return i;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				_Utils_Tuple2(0, 6),
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var day = _v0.b;
							return _Utils_eq(
								day,
								A2($elm$time$Time$toWeekday, zone, posix));
						},
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, day) {
									return _Utils_Tuple2(i, day);
								}),
							$ryannhg$date_format$DateFormat$days)))));
	});
var $ryannhg$date_format$DateFormat$isLeapYear = function (year_) {
	return (!(!A2($elm$core$Basics$modBy, 4, year_))) ? false : ((!(!A2($elm$core$Basics$modBy, 100, year_))) ? true : ((!(!A2($elm$core$Basics$modBy, 400, year_))) ? false : true));
};
var $ryannhg$date_format$DateFormat$daysInMonth = F2(
	function (year_, month) {
		switch (month) {
			case 0:
				return 31;
			case 1:
				return $ryannhg$date_format$DateFormat$isLeapYear(year_) ? 29 : 28;
			case 2:
				return 31;
			case 3:
				return 30;
			case 4:
				return 31;
			case 5:
				return 30;
			case 6:
				return 31;
			case 7:
				return 31;
			case 8:
				return 30;
			case 9:
				return 31;
			case 10:
				return 30;
			default:
				return 31;
		}
	});
var $elm$time$Time$Jan = 0;
var $elm$time$Time$Apr = 3;
var $elm$time$Time$Aug = 7;
var $elm$time$Time$Dec = 11;
var $elm$time$Time$Feb = 1;
var $elm$time$Time$Jul = 6;
var $elm$time$Time$Jun = 5;
var $elm$time$Time$Mar = 2;
var $elm$time$Time$May = 4;
var $elm$time$Time$Nov = 10;
var $elm$time$Time$Oct = 9;
var $elm$time$Time$Sep = 8;
var $ryannhg$date_format$DateFormat$months = _List_fromArray(
	[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).fx;
		switch (_v0) {
			case 1:
				return 0;
			case 2:
				return 1;
			case 3:
				return 2;
			case 4:
				return 3;
			case 5:
				return 4;
			case 6:
				return 5;
			case 7:
				return 6;
			case 8:
				return 7;
			case 9:
				return 8;
			case 10:
				return 9;
			case 11:
				return 10;
			default:
				return 11;
		}
	});
var $ryannhg$date_format$DateFormat$monthPair = F2(
	function (zone, posix) {
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, 0),
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var i = _v0.a;
						var m = _v0.b;
						return _Utils_eq(
							m,
							A2($elm$time$Time$toMonth, zone, posix));
					},
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (a, b) {
								return _Utils_Tuple2(a, b);
							}),
						$ryannhg$date_format$DateFormat$months))));
	});
var $ryannhg$date_format$DateFormat$monthNumber_ = F2(
	function (zone, posix) {
		return 1 + function (_v0) {
			var i = _v0.a;
			var m = _v0.b;
			return i;
		}(
			A2($ryannhg$date_format$DateFormat$monthPair, zone, posix));
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).f7;
	});
var $ryannhg$date_format$DateFormat$dayOfYear = F2(
	function (zone, posix) {
		var monthsBeforeThisOne = A2(
			$elm$core$List$take,
			A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) - 1,
			$ryannhg$date_format$DateFormat$months);
		var daysBeforeThisMonth = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				$ryannhg$date_format$DateFormat$daysInMonth(
					A2($elm$time$Time$toYear, zone, posix)),
				monthsBeforeThisOne));
		return daysBeforeThisMonth + A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix);
	});
var $ryannhg$date_format$DateFormat$quarter = F2(
	function (zone, posix) {
		return (A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) / 4) | 0;
	});
var $ryannhg$date_format$DateFormat$toFixedLength = F2(
	function (totalChars, num) {
		var numStr = $elm$core$String$fromInt(num);
		var numZerosNeeded = totalChars - $elm$core$String$length(numStr);
		var zeros = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					return '0';
				},
				A2($elm$core$List$range, 1, numZerosNeeded)));
		return _Utils_ap(zeros, numStr);
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $ryannhg$date_format$DateFormat$toNonMilitary = function (num) {
	return (!num) ? 12 : ((num <= 12) ? num : (num - 12));
};
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $elm$core$String$toUpper = _String_toUpper;
var $ryannhg$date_format$DateFormat$millisecondsPerYear = $elm$core$Basics$round((((1000 * 60) * 60) * 24) * 365.25);
var $ryannhg$date_format$DateFormat$firstDayOfYear = F2(
	function (zone, time) {
		return $elm$time$Time$millisToPosix(
			$ryannhg$date_format$DateFormat$millisecondsPerYear * A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$weekOfYear = F2(
	function (zone, posix) {
		var firstDay = A2($ryannhg$date_format$DateFormat$firstDayOfYear, zone, posix);
		var firstDayOffset = A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, firstDay);
		var daysSoFar = A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix);
		return (((daysSoFar + firstDayOffset) / 7) | 0) + 1;
	});
var $ryannhg$date_format$DateFormat$year = F2(
	function (zone, time) {
		return $elm$core$String$fromInt(
			A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$piece = F4(
	function (language, zone, posix, token) {
		switch (token.$) {
			case 0:
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 1:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.cp(num));
				}(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 2:
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 3:
				return language.iH(
					A2($elm$time$Time$toMonth, zone, posix));
			case 4:
				return language.iI(
					A2($elm$time$Time$toMonth, zone, posix));
			case 17:
				return $elm$core$String$fromInt(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 18:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.cp(num));
				}(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 5:
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 6:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.cp(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 7:
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 8:
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 9:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.cp(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 10:
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 11:
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 12:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.cp(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 13:
				return language.iL(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 14:
				return language.iM(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 19:
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 20:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.cp(num));
				}(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 21:
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 15:
				return A2(
					$elm$core$String$right,
					2,
					A2($ryannhg$date_format$DateFormat$year, zone, posix));
			case 16:
				return A2($ryannhg$date_format$DateFormat$year, zone, posix);
			case 22:
				return $elm$core$String$toUpper(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 23:
				return $elm$core$String$toLower(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 24:
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toHour, zone, posix));
			case 25:
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toHour, zone, posix));
			case 26:
				return $elm$core$String$fromInt(
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 27:
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 28:
				return $elm$core$String$fromInt(
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 29:
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 30:
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMinute, zone, posix));
			case 31:
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toMinute, zone, posix));
			case 32:
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toSecond, zone, posix));
			case 33:
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toSecond, zone, posix));
			case 34:
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMillis, zone, posix));
			case 35:
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($elm$time$Time$toMillis, zone, posix));
			default:
				var string = token.a;
				return string;
		}
	});
var $ryannhg$date_format$DateFormat$formatWithLanguage = F4(
	function (language, tokens, zone, time) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A3($ryannhg$date_format$DateFormat$piece, language, zone, time),
				tokens));
	});
var $ryannhg$date_format$DateFormat$format = $ryannhg$date_format$DateFormat$formatWithLanguage($ryannhg$date_format$DateFormat$Language$english);
var $ryannhg$date_format$DateFormat$HourMilitaryFixed = {$: 25};
var $ryannhg$date_format$DateFormat$hourMilitaryFixed = $ryannhg$date_format$DateFormat$HourMilitaryFixed;
var $ryannhg$date_format$DateFormat$MinuteFixed = {$: 31};
var $ryannhg$date_format$DateFormat$minuteFixed = $ryannhg$date_format$DateFormat$MinuteFixed;
var $ryannhg$date_format$DateFormat$Text = function (a) {
	return {$: 36, a: a};
};
var $ryannhg$date_format$DateFormat$text = $ryannhg$date_format$DateFormat$Text;
var $terezka$charts$Internal$Svg$formatClock = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed
		]));
var $ryannhg$date_format$DateFormat$MillisecondFixed = {$: 35};
var $ryannhg$date_format$DateFormat$millisecondFixed = $ryannhg$date_format$DateFormat$MillisecondFixed;
var $ryannhg$date_format$DateFormat$SecondFixed = {$: 33};
var $ryannhg$date_format$DateFormat$secondFixed = $ryannhg$date_format$DateFormat$SecondFixed;
var $terezka$charts$Internal$Svg$formatClockMillis = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$secondFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$millisecondFixed
		]));
var $terezka$charts$Internal$Svg$formatClockSecond = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$secondFixed
		]));
var $ryannhg$date_format$DateFormat$DayOfMonthNumber = {$: 5};
var $ryannhg$date_format$DateFormat$dayOfMonthNumber = $ryannhg$date_format$DateFormat$DayOfMonthNumber;
var $ryannhg$date_format$DateFormat$MonthNumber = {$: 0};
var $ryannhg$date_format$DateFormat$monthNumber = $ryannhg$date_format$DateFormat$MonthNumber;
var $terezka$charts$Internal$Svg$formatDate = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$monthNumber,
			$ryannhg$date_format$DateFormat$text('/'),
			$ryannhg$date_format$DateFormat$dayOfMonthNumber
		]));
var $ryannhg$date_format$DateFormat$MonthNameAbbreviated = {$: 3};
var $ryannhg$date_format$DateFormat$monthNameAbbreviated = $ryannhg$date_format$DateFormat$MonthNameAbbreviated;
var $terezka$charts$Internal$Svg$formatMonth = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$monthNameAbbreviated]));
var $ryannhg$date_format$DateFormat$DayOfWeekNameFull = {$: 14};
var $ryannhg$date_format$DateFormat$dayOfWeekNameFull = $ryannhg$date_format$DateFormat$DayOfWeekNameFull;
var $terezka$charts$Internal$Svg$formatWeekday = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$dayOfWeekNameFull]));
var $ryannhg$date_format$DateFormat$YearNumber = {$: 16};
var $ryannhg$date_format$DateFormat$yearNumber = $ryannhg$date_format$DateFormat$YearNumber;
var $terezka$charts$Internal$Svg$formatYear = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$yearNumber]));
var $terezka$charts$Internal$Svg$formatTime = F2(
	function (zone, time) {
		var _v0 = A2($elm$core$Maybe$withDefault, time.iQ, time.gD);
		switch (_v0) {
			case 0:
				return A2($terezka$charts$Internal$Svg$formatClockMillis, zone, time.iC);
			case 1:
				return A2($terezka$charts$Internal$Svg$formatClockSecond, zone, time.iC);
			case 2:
				return A2($terezka$charts$Internal$Svg$formatClock, zone, time.iC);
			case 3:
				return A2($terezka$charts$Internal$Svg$formatClock, zone, time.iC);
			case 4:
				return (time.hs === 7) ? A2($terezka$charts$Internal$Svg$formatWeekday, zone, time.iC) : A2($terezka$charts$Internal$Svg$formatDate, zone, time.iC);
			case 5:
				return A2($terezka$charts$Internal$Svg$formatMonth, zone, time.iC);
			default:
				return A2($terezka$charts$Internal$Svg$formatYear, zone, time.iC);
		}
	});
var $terezka$charts$Chart$Svg$formatTime = $terezka$charts$Internal$Svg$formatTime;
var $terezka$charts$Internal$Svg$generate = F3(
	function (amount, _v0, limits) {
		var func = _v0;
		return A2(func, amount, limits);
	});
var $terezka$charts$Chart$Svg$generate = $terezka$charts$Internal$Svg$generate;
var $terezka$intervals$Intervals$ints = F2(
	function (amount, range) {
		return A2(
			$elm$core$List$map,
			$elm$core$Basics$round,
			function () {
				if (!amount.$) {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, true, number, range);
				} else {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, false, number, range);
				}
			}());
	});
var $terezka$charts$Internal$Svg$ints = F2(
	function (i, b) {
		return A2(
			$terezka$intervals$Intervals$ints,
			$terezka$intervals$Intervals$around(i),
			{fu: b.fu, et: b.et});
	});
var $terezka$charts$Chart$Svg$ints = $terezka$charts$Internal$Svg$ints;
var $terezka$intervals$Intervals$Day = 4;
var $terezka$intervals$Intervals$Hour = 3;
var $terezka$intervals$Intervals$Millisecond = 0;
var $terezka$intervals$Intervals$Minute = 2;
var $terezka$intervals$Intervals$Month = 5;
var $terezka$intervals$Intervals$Second = 1;
var $terezka$intervals$Intervals$Year = 6;
var $justinmimbs$time_extra$Time$Extra$Day = 11;
var $justinmimbs$date$Date$Days = 3;
var $justinmimbs$time_extra$Time$Extra$Millisecond = 15;
var $justinmimbs$time_extra$Time$Extra$Month = 2;
var $justinmimbs$date$Date$Months = 1;
var $justinmimbs$date$Date$RD = $elm$core$Basics$identity;
var $justinmimbs$date$Date$isLeapYear = function (y) {
	return ((!A2($elm$core$Basics$modBy, 4, y)) && (!(!A2($elm$core$Basics$modBy, 100, y)))) || (!A2($elm$core$Basics$modBy, 400, y));
};
var $justinmimbs$date$Date$daysBeforeMonth = F2(
	function (y, m) {
		var leapDays = $justinmimbs$date$Date$isLeapYear(y) ? 1 : 0;
		switch (m) {
			case 0:
				return 0;
			case 1:
				return 31;
			case 2:
				return 59 + leapDays;
			case 3:
				return 90 + leapDays;
			case 4:
				return 120 + leapDays;
			case 5:
				return 151 + leapDays;
			case 6:
				return 181 + leapDays;
			case 7:
				return 212 + leapDays;
			case 8:
				return 243 + leapDays;
			case 9:
				return 273 + leapDays;
			case 10:
				return 304 + leapDays;
			default:
				return 334 + leapDays;
		}
	});
var $justinmimbs$date$Date$floorDiv = F2(
	function (a, b) {
		return $elm$core$Basics$floor(a / b);
	});
var $justinmimbs$date$Date$daysBeforeYear = function (y1) {
	var y = y1 - 1;
	var leapYears = (A2($justinmimbs$date$Date$floorDiv, y, 4) - A2($justinmimbs$date$Date$floorDiv, y, 100)) + A2($justinmimbs$date$Date$floorDiv, y, 400);
	return (365 * y) + leapYears;
};
var $justinmimbs$date$Date$daysInMonth = F2(
	function (y, m) {
		switch (m) {
			case 0:
				return 31;
			case 1:
				return $justinmimbs$date$Date$isLeapYear(y) ? 29 : 28;
			case 2:
				return 31;
			case 3:
				return 30;
			case 4:
				return 31;
			case 5:
				return 30;
			case 6:
				return 31;
			case 7:
				return 31;
			case 8:
				return 30;
			case 9:
				return 31;
			case 10:
				return 30;
			default:
				return 31;
		}
	});
var $justinmimbs$date$Date$monthToNumber = function (m) {
	switch (m) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 5;
		case 5:
			return 6;
		case 6:
			return 7;
		case 7:
			return 8;
		case 8:
			return 9;
		case 9:
			return 10;
		case 10:
			return 11;
		default:
			return 12;
	}
};
var $justinmimbs$date$Date$numberToMonth = function (mn) {
	var _v0 = A2($elm$core$Basics$max, 1, mn);
	switch (_v0) {
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 2;
		case 4:
			return 3;
		case 5:
			return 4;
		case 6:
			return 5;
		case 7:
			return 6;
		case 8:
			return 7;
		case 9:
			return 8;
		case 10:
			return 9;
		case 11:
			return 10;
		default:
			return 11;
	}
};
var $justinmimbs$date$Date$toCalendarDateHelp = F3(
	function (y, m, d) {
		toCalendarDateHelp:
		while (true) {
			var monthDays = A2($justinmimbs$date$Date$daysInMonth, y, m);
			var mn = $justinmimbs$date$Date$monthToNumber(m);
			if ((mn < 12) && (_Utils_cmp(d, monthDays) > 0)) {
				var $temp$y = y,
					$temp$m = $justinmimbs$date$Date$numberToMonth(mn + 1),
					$temp$d = d - monthDays;
				y = $temp$y;
				m = $temp$m;
				d = $temp$d;
				continue toCalendarDateHelp;
			} else {
				return {e8: d, fx: m, f7: y};
			}
		}
	});
var $justinmimbs$date$Date$divWithRemainder = F2(
	function (a, b) {
		return _Utils_Tuple2(
			A2($justinmimbs$date$Date$floorDiv, a, b),
			A2($elm$core$Basics$modBy, b, a));
	});
var $justinmimbs$date$Date$year = function (_v0) {
	var rd = _v0;
	var _v1 = A2($justinmimbs$date$Date$divWithRemainder, rd, 146097);
	var n400 = _v1.a;
	var r400 = _v1.b;
	var _v2 = A2($justinmimbs$date$Date$divWithRemainder, r400, 36524);
	var n100 = _v2.a;
	var r100 = _v2.b;
	var _v3 = A2($justinmimbs$date$Date$divWithRemainder, r100, 1461);
	var n4 = _v3.a;
	var r4 = _v3.b;
	var _v4 = A2($justinmimbs$date$Date$divWithRemainder, r4, 365);
	var n1 = _v4.a;
	var r1 = _v4.b;
	var n = (!r1) ? 0 : 1;
	return ((((n400 * 400) + (n100 * 100)) + (n4 * 4)) + n1) + n;
};
var $justinmimbs$date$Date$toOrdinalDate = function (_v0) {
	var rd = _v0;
	var y = $justinmimbs$date$Date$year(rd);
	return {
		ex: rd - $justinmimbs$date$Date$daysBeforeYear(y),
		f7: y
	};
};
var $justinmimbs$date$Date$toCalendarDate = function (_v0) {
	var rd = _v0;
	var date = $justinmimbs$date$Date$toOrdinalDate(rd);
	return A3($justinmimbs$date$Date$toCalendarDateHelp, date.f7, 0, date.ex);
};
var $justinmimbs$date$Date$add = F3(
	function (unit, n, _v0) {
		var rd = _v0;
		switch (unit) {
			case 0:
				return A3($justinmimbs$date$Date$add, 1, 12 * n, rd);
			case 1:
				var date = $justinmimbs$date$Date$toCalendarDate(rd);
				var wholeMonths = ((12 * (date.f7 - 1)) + ($justinmimbs$date$Date$monthToNumber(date.fx) - 1)) + n;
				var m = $justinmimbs$date$Date$numberToMonth(
					A2($elm$core$Basics$modBy, 12, wholeMonths) + 1);
				var y = A2($justinmimbs$date$Date$floorDiv, wholeMonths, 12) + 1;
				return ($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A2(
					$elm$core$Basics$min,
					date.e8,
					A2($justinmimbs$date$Date$daysInMonth, y, m));
			case 2:
				return rd + (7 * n);
			default:
				return rd + n;
		}
	});
var $justinmimbs$date$Date$fromCalendarDate = F3(
	function (y, m, d) {
		return ($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A3(
			$elm$core$Basics$clamp,
			1,
			A2($justinmimbs$date$Date$daysInMonth, y, m),
			d);
	});
var $justinmimbs$date$Date$fromPosix = F2(
	function (zone, posix) {
		return A3(
			$justinmimbs$date$Date$fromCalendarDate,
			A2($elm$time$Time$toYear, zone, posix),
			A2($elm$time$Time$toMonth, zone, posix),
			A2($elm$time$Time$toDay, zone, posix));
	});
var $justinmimbs$date$Date$toRataDie = function (_v0) {
	var rd = _v0;
	return rd;
};
var $justinmimbs$time_extra$Time$Extra$dateToMillis = function (date) {
	var daysSinceEpoch = $justinmimbs$date$Date$toRataDie(date) - 719163;
	return daysSinceEpoch * 86400000;
};
var $justinmimbs$time_extra$Time$Extra$timeFromClock = F4(
	function (hour, minute, second, millisecond) {
		return (((hour * 3600000) + (minute * 60000)) + (second * 1000)) + millisecond;
	});
var $justinmimbs$time_extra$Time$Extra$timeFromPosix = F2(
	function (zone, posix) {
		return A4(
			$justinmimbs$time_extra$Time$Extra$timeFromClock,
			A2($elm$time$Time$toHour, zone, posix),
			A2($elm$time$Time$toMinute, zone, posix),
			A2($elm$time$Time$toSecond, zone, posix),
			A2($elm$time$Time$toMillis, zone, posix));
	});
var $justinmimbs$time_extra$Time$Extra$toOffset = F2(
	function (zone, posix) {
		var millis = $elm$time$Time$posixToMillis(posix);
		var localMillis = $justinmimbs$time_extra$Time$Extra$dateToMillis(
			A2($justinmimbs$date$Date$fromPosix, zone, posix)) + A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix);
		return ((localMillis - millis) / 60000) | 0;
	});
var $justinmimbs$time_extra$Time$Extra$posixFromDateTime = F3(
	function (zone, date, time) {
		var millis = $justinmimbs$time_extra$Time$Extra$dateToMillis(date) + time;
		var offset0 = A2(
			$justinmimbs$time_extra$Time$Extra$toOffset,
			zone,
			$elm$time$Time$millisToPosix(millis));
		var posix1 = $elm$time$Time$millisToPosix(millis - (offset0 * 60000));
		var offset1 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix1);
		if (_Utils_eq(offset0, offset1)) {
			return posix1;
		} else {
			var posix2 = $elm$time$Time$millisToPosix(millis - (offset1 * 60000));
			var offset2 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix2);
			return _Utils_eq(offset1, offset2) ? posix2 : posix1;
		}
	});
var $justinmimbs$time_extra$Time$Extra$add = F4(
	function (interval, n, zone, posix) {
		add:
		while (true) {
			switch (interval) {
				case 15:
					return $elm$time$Time$millisToPosix(
						$elm$time$Time$posixToMillis(posix) + n);
				case 14:
					var $temp$interval = 15,
						$temp$n = n * 1000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 13:
					var $temp$interval = 15,
						$temp$n = n * 60000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 12:
					var $temp$interval = 15,
						$temp$n = n * 3600000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 11:
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							3,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 2:
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							1,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 0:
					var $temp$interval = 2,
						$temp$n = n * 12,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 1:
					var $temp$interval = 2,
						$temp$n = n * 3,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 3:
					var $temp$interval = 11,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				default:
					var weekday = interval;
					var $temp$interval = 11,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
			}
		}
	});
var $justinmimbs$time_extra$Time$Extra$Week = 3;
var $justinmimbs$date$Date$Day = 11;
var $justinmimbs$date$Date$Friday = 8;
var $justinmimbs$date$Date$Monday = 4;
var $justinmimbs$date$Date$Month = 2;
var $justinmimbs$date$Date$Quarter = 1;
var $justinmimbs$date$Date$Saturday = 9;
var $justinmimbs$date$Date$Sunday = 10;
var $justinmimbs$date$Date$Thursday = 7;
var $justinmimbs$date$Date$Tuesday = 5;
var $justinmimbs$date$Date$Wednesday = 6;
var $justinmimbs$date$Date$Week = 3;
var $justinmimbs$date$Date$Year = 0;
var $justinmimbs$date$Date$weekdayNumber = function (_v0) {
	var rd = _v0;
	var _v1 = A2($elm$core$Basics$modBy, 7, rd);
	if (!_v1) {
		return 7;
	} else {
		var n = _v1;
		return n;
	}
};
var $justinmimbs$date$Date$weekdayToNumber = function (wd) {
	switch (wd) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 5;
		case 5:
			return 6;
		default:
			return 7;
	}
};
var $justinmimbs$date$Date$daysSincePreviousWeekday = F2(
	function (wd, date) {
		return A2(
			$elm$core$Basics$modBy,
			7,
			($justinmimbs$date$Date$weekdayNumber(date) + 7) - $justinmimbs$date$Date$weekdayToNumber(wd));
	});
var $justinmimbs$date$Date$firstOfMonth = F2(
	function (y, m) {
		return ($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + 1;
	});
var $justinmimbs$date$Date$firstOfYear = function (y) {
	return $justinmimbs$date$Date$daysBeforeYear(y) + 1;
};
var $justinmimbs$date$Date$month = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toCalendarDate,
	function ($) {
		return $.fx;
	});
var $justinmimbs$date$Date$monthToQuarter = function (m) {
	return (($justinmimbs$date$Date$monthToNumber(m) + 2) / 3) | 0;
};
var $justinmimbs$date$Date$quarter = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToQuarter);
var $justinmimbs$date$Date$quarterToMonth = function (q) {
	return $justinmimbs$date$Date$numberToMonth((q * 3) - 2);
};
var $justinmimbs$date$Date$floor = F2(
	function (interval, date) {
		var rd = date;
		switch (interval) {
			case 0:
				return $justinmimbs$date$Date$firstOfYear(
					$justinmimbs$date$Date$year(date));
			case 1:
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$quarterToMonth(
						$justinmimbs$date$Date$quarter(date)));
			case 2:
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$month(date));
			case 3:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 0, date);
			case 4:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 0, date);
			case 5:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 1, date);
			case 6:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 2, date);
			case 7:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 3, date);
			case 8:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 4, date);
			case 9:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 5, date);
			case 10:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 6, date);
			default:
				return date;
		}
	});
var $justinmimbs$time_extra$Time$Extra$floorDate = F3(
	function (dateInterval, zone, posix) {
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A2(
				$justinmimbs$date$Date$floor,
				dateInterval,
				A2($justinmimbs$date$Date$fromPosix, zone, posix)),
			0);
	});
var $justinmimbs$time_extra$Time$Extra$floor = F3(
	function (interval, zone, posix) {
		switch (interval) {
			case 15:
				return posix;
			case 14:
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						A2($elm$time$Time$toSecond, zone, posix),
						0));
			case 13:
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						0,
						0));
			case 12:
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						0,
						0,
						0));
			case 11:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 11, zone, posix);
			case 2:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 2, zone, posix);
			case 0:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 0, zone, posix);
			case 1:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 1, zone, posix);
			case 3:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 3, zone, posix);
			case 4:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 4, zone, posix);
			case 5:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 5, zone, posix);
			case 6:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 6, zone, posix);
			case 7:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 7, zone, posix);
			case 8:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 8, zone, posix);
			case 9:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 9, zone, posix);
			default:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 10, zone, posix);
		}
	});
var $justinmimbs$time_extra$Time$Extra$ceiling = F3(
	function (interval, zone, posix) {
		var floored = A3($justinmimbs$time_extra$Time$Extra$floor, interval, zone, posix);
		return _Utils_eq(floored, posix) ? posix : A4($justinmimbs$time_extra$Time$Extra$add, interval, 1, zone, floored);
	});
var $terezka$intervals$Intervals$Time$ceilingDay = F3(
	function (zone, mult, stamp) {
		return (mult === 7) ? A3($justinmimbs$time_extra$Time$Extra$ceiling, 3, zone, stamp) : A3($justinmimbs$time_extra$Time$Extra$ceiling, 11, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Hour = 12;
var $justinmimbs$time_extra$Time$Extra$partsToPosix = F2(
	function (zone, _v0) {
		var year = _v0.f7;
		var month = _v0.fx;
		var day = _v0.e8;
		var hour = _v0.eh;
		var minute = _v0.eu;
		var second = _v0.fO;
		var millisecond = _v0.es;
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A3($justinmimbs$date$Date$fromCalendarDate, year, month, day),
			A4(
				$justinmimbs$time_extra$Time$Extra$timeFromClock,
				A3($elm$core$Basics$clamp, 0, 23, hour),
				A3($elm$core$Basics$clamp, 0, 59, minute),
				A3($elm$core$Basics$clamp, 0, 59, second),
				A3($elm$core$Basics$clamp, 0, 999, millisecond)));
	});
var $justinmimbs$time_extra$Time$Extra$posixToParts = F2(
	function (zone, posix) {
		return {
			e8: A2($elm$time$Time$toDay, zone, posix),
			eh: A2($elm$time$Time$toHour, zone, posix),
			es: A2($elm$time$Time$toMillis, zone, posix),
			eu: A2($elm$time$Time$toMinute, zone, posix),
			fx: A2($elm$time$Time$toMonth, zone, posix),
			fO: A2($elm$time$Time$toSecond, zone, posix),
			f7: A2($elm$time$Time$toYear, zone, posix)
		};
	});
var $terezka$intervals$Intervals$Time$ceilingHour = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, 12, zone, stamp));
		var rem = parts.eh % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, 12, mult - rem, zone, _new);
	});
var $justinmimbs$time_extra$Time$Extra$Minute = 13;
var $terezka$intervals$Intervals$Time$ceilingMinute = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, 13, zone, stamp));
		var rem = parts.eu % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, 13, mult - rem, zone, _new);
	});
var $terezka$intervals$Intervals$Time$intAsMonth = function (_int) {
	switch (_int) {
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 2;
		case 4:
			return 3;
		case 5:
			return 4;
		case 6:
			return 5;
		case 7:
			return 6;
		case 8:
			return 7;
		case 9:
			return 8;
		case 10:
			return 9;
		case 11:
			return 10;
		case 12:
			return 11;
		default:
			return 11;
	}
};
var $terezka$intervals$Intervals$Time$monthAsInt = function (month) {
	switch (month) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 5;
		case 5:
			return 6;
		case 6:
			return 7;
		case 7:
			return 8;
		case 8:
			return 9;
		case 9:
			return 10;
		case 10:
			return 11;
		default:
			return 12;
	}
};
var $terezka$intervals$Intervals$Time$ceilingMonth = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, 2, zone, stamp));
		var monthInt = $terezka$intervals$Intervals$Time$monthAsInt(parts.fx);
		var rem = (monthInt - 1) % mult;
		var newMonth = (!rem) ? monthInt : ((monthInt - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			(newMonth > 12) ? _Utils_update(
				parts,
				{
					fx: $terezka$intervals$Intervals$Time$intAsMonth(newMonth - 12),
					f7: parts.f7 + 1
				}) : _Utils_update(
				parts,
				{
					fx: $terezka$intervals$Intervals$Time$intAsMonth(newMonth)
				}));
	});
var $terezka$intervals$Intervals$Time$ceilingMs = F3(
	function (zone, mult, stamp) {
		var parts = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, stamp);
		var rem = parts.es % mult;
		return (!rem) ? A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts) : A4($justinmimbs$time_extra$Time$Extra$add, 15, mult - rem, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Second = 14;
var $terezka$intervals$Intervals$Time$ceilingSecond = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, 14, zone, stamp));
		var rem = parts.fO % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, 14, mult - rem, zone, _new);
	});
var $justinmimbs$time_extra$Time$Extra$Year = 0;
var $terezka$intervals$Intervals$Time$ceilingYear = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, 0, zone, stamp));
		var rem = parts.f7 % mult;
		var newYear = (!rem) ? parts.f7 : ((parts.f7 - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			_Utils_update(
				parts,
				{f7: newYear}));
	});
var $terezka$intervals$Intervals$Time$ceilingUnit = F3(
	function (zone, unit, mult) {
		switch (unit) {
			case 0:
				return A2($terezka$intervals$Intervals$Time$ceilingMs, zone, mult);
			case 1:
				return A2($terezka$intervals$Intervals$Time$ceilingSecond, zone, mult);
			case 2:
				return A2($terezka$intervals$Intervals$Time$ceilingMinute, zone, mult);
			case 3:
				return A2($terezka$intervals$Intervals$Time$ceilingHour, zone, mult);
			case 4:
				return A2($terezka$intervals$Intervals$Time$ceilingDay, zone, mult);
			case 5:
				return A2($terezka$intervals$Intervals$Time$ceilingMonth, zone, mult);
			default:
				return A2($terezka$intervals$Intervals$Time$ceilingYear, zone, mult);
		}
	});
var $terezka$intervals$Intervals$Time$Day = 4;
var $terezka$intervals$Intervals$Time$Hour = 3;
var $terezka$intervals$Intervals$Time$Millisecond = 0;
var $terezka$intervals$Intervals$Time$Minute = 2;
var $terezka$intervals$Intervals$Time$Month = 5;
var $terezka$intervals$Intervals$Time$Second = 1;
var $terezka$intervals$Intervals$Time$Year = 6;
var $terezka$intervals$Intervals$Time$getChange = F3(
	function (zone, a, b) {
		var bP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b);
		var aP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a);
		return (!_Utils_eq(aP.f7, bP.f7)) ? 6 : ((!_Utils_eq(aP.fx, bP.fx)) ? 5 : ((!_Utils_eq(aP.e8, bP.e8)) ? 4 : ((!_Utils_eq(aP.eh, bP.eh)) ? 3 : ((!_Utils_eq(aP.eu, bP.eu)) ? 2 : ((!_Utils_eq(aP.fO, bP.fO)) ? 1 : 0)))));
	});
var $danhandrea$elm_time_extra$Util$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 400, year)) || ((!(!A2($elm$core$Basics$modBy, 100, year))) && (!A2($elm$core$Basics$modBy, 4, year)));
};
var $danhandrea$elm_time_extra$Month$days = F2(
	function (year, month) {
		switch (month) {
			case 0:
				return 31;
			case 1:
				return $danhandrea$elm_time_extra$Util$isLeapYear(year) ? 29 : 28;
			case 2:
				return 31;
			case 3:
				return 30;
			case 4:
				return 31;
			case 5:
				return 30;
			case 6:
				return 31;
			case 7:
				return 31;
			case 8:
				return 30;
			case 9:
				return 31;
			case 10:
				return 30;
			default:
				return 31;
		}
	});
var $danhandrea$elm_time_extra$TimeExtra$daysInMonth = $danhandrea$elm_time_extra$Month$days;
var $terezka$intervals$Intervals$Time$toMs = $elm$time$Time$posixToMillis;
var $terezka$intervals$Intervals$Time$getDiff = F3(
	function (zone, a, b) {
		var _v0 = (_Utils_cmp(
			$terezka$intervals$Intervals$Time$toMs(a),
			$terezka$intervals$Intervals$Time$toMs(b)) < 0) ? _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b)) : _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a));
		var aP = _v0.a;
		var bP = _v0.b;
		var dMsX = bP.es - aP.es;
		var dMs = (dMsX < 0) ? (1000 + dMsX) : dMsX;
		var dSecondX = (bP.fO - aP.fO) + ((dMsX < 0) ? (-1) : 0);
		var dMinuteX = (bP.eu - aP.eu) + ((dSecondX < 0) ? (-1) : 0);
		var dHourX = (bP.eh - aP.eh) + ((dMinuteX < 0) ? (-1) : 0);
		var dDayX = (bP.e8 - aP.e8) + ((dHourX < 0) ? (-1) : 0);
		var dDay = (dDayX < 0) ? (A2($danhandrea$elm_time_extra$TimeExtra$daysInMonth, bP.f7, bP.fx) + dDayX) : dDayX;
		var dMonthX = ($terezka$intervals$Intervals$Time$monthAsInt(bP.fx) - $terezka$intervals$Intervals$Time$monthAsInt(aP.fx)) + ((dDayX < 0) ? (-1) : 0);
		var dMonth = (dMonthX < 0) ? (12 + dMonthX) : dMonthX;
		var dHour = (dHourX < 0) ? (24 + dHourX) : dHourX;
		var dMinute = (dMinuteX < 0) ? (60 + dMinuteX) : dMinuteX;
		var dSecond = (dSecondX < 0) ? (60 + dSecondX) : dSecondX;
		var dYearX = (bP.f7 - aP.f7) + ((dMonthX < 0) ? (-1) : 0);
		var dYear = (dYearX < 0) ? ($terezka$intervals$Intervals$Time$monthAsInt(bP.fx) + dYearX) : dYearX;
		return {e8: dDay, eh: dHour, es: dMs, eu: dMinute, fx: dMonth, fO: dSecond, f7: dYear};
	});
var $terezka$intervals$Intervals$Time$oneSecond = 1000;
var $terezka$intervals$Intervals$Time$oneMinute = $terezka$intervals$Intervals$Time$oneSecond * 60;
var $terezka$intervals$Intervals$Time$oneHour = $terezka$intervals$Intervals$Time$oneMinute * 60;
var $terezka$intervals$Intervals$Time$oneDay = $terezka$intervals$Intervals$Time$oneHour * 24;
var $terezka$intervals$Intervals$Time$oneMs = 1;
var $terezka$intervals$Intervals$Time$getNumOfTicks = F5(
	function (zone, unit, mult, a, b) {
		var div = F2(
			function (n1, n2) {
				return $elm$core$Basics$floor(n1 / n2);
			});
		var timeDiff = function (ms) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				A2(
					div,
					$terezka$intervals$Intervals$Time$toMs(b) - $terezka$intervals$Intervals$Time$toMs(ceiled),
					ms),
				mult);
		};
		var diff = function (property) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				property(
					A3($terezka$intervals$Intervals$Time$getDiff, zone, ceiled, b)),
				mult);
		};
		switch (unit) {
			case 0:
				return timeDiff($terezka$intervals$Intervals$Time$oneMs) + 1;
			case 1:
				return timeDiff($terezka$intervals$Intervals$Time$oneSecond) + 1;
			case 2:
				return timeDiff($terezka$intervals$Intervals$Time$oneMinute) + 1;
			case 3:
				return timeDiff($terezka$intervals$Intervals$Time$oneHour) + 1;
			case 4:
				return timeDiff($terezka$intervals$Intervals$Time$oneDay) + 1;
			case 5:
				return diff(
					function (d) {
						return d.fx + (d.f7 * 12);
					}) + 1;
			default:
				return diff(
					function ($) {
						return $.f7;
					}) + 1;
		}
	});
var $terezka$intervals$Intervals$Time$largerUnit = function (unit) {
	switch (unit) {
		case 0:
			return $elm$core$Maybe$Just(1);
		case 1:
			return $elm$core$Maybe$Just(2);
		case 2:
			return $elm$core$Maybe$Just(3);
		case 3:
			return $elm$core$Maybe$Just(4);
		case 4:
			return $elm$core$Maybe$Just(5);
		case 5:
			return $elm$core$Maybe$Just(6);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $terezka$intervals$Intervals$Time$niceMultiples = function (unit) {
	switch (unit) {
		case 0:
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500]);
		case 1:
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 2:
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 3:
			return _List_fromArray(
				[1, 2, 3, 4, 6, 8, 12]);
		case 4:
			return _List_fromArray(
				[1, 2, 3, 7, 14]);
		case 5:
			return _List_fromArray(
				[1, 2, 3, 4, 6]);
		default:
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500, 1000, 10000, 1000000, 10000000]);
	}
};
var $terezka$intervals$Intervals$Time$toBestUnit = F4(
	function (zone, amount, min, max) {
		var toNice = function (unit) {
			toNice:
			while (true) {
				var niceNums = $terezka$intervals$Intervals$Time$niceMultiples(unit);
				var maybeNiceNum = A2(
					$elm$core$List$filter,
					function (n) {
						return _Utils_cmp(
							A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, n, min, max),
							amount) < 1;
					},
					niceNums);
				var div = F2(
					function (n1, n2) {
						return $elm$core$Basics$ceiling(n1 / n2);
					});
				var _v0 = $elm$core$List$head(maybeNiceNum);
				if (!_v0.$) {
					var niceNum = _v0.a;
					return _Utils_Tuple2(unit, niceNum);
				} else {
					var _v1 = $terezka$intervals$Intervals$Time$largerUnit(unit);
					if (!_v1.$) {
						var larger = _v1.a;
						var $temp$unit = larger;
						unit = $temp$unit;
						continue toNice;
					} else {
						return _Utils_Tuple2(6, 100000000);
					}
				}
			}
		};
		return toNice(0);
	});
var $terezka$intervals$Intervals$Time$toExtraUnit = function (unit) {
	switch (unit) {
		case 0:
			return 15;
		case 1:
			return 14;
		case 2:
			return 13;
		case 3:
			return 12;
		case 4:
			return 11;
		case 5:
			return 2;
		default:
			return 0;
	}
};
var $terezka$intervals$Intervals$Time$unitToInt = function (unit) {
	switch (unit) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		case 4:
			return 4;
		case 5:
			return 5;
		default:
			return 6;
	}
};
var $terezka$intervals$Intervals$Time$values = F4(
	function (zone, maxMmount, min, max) {
		var _v0 = A4($terezka$intervals$Intervals$Time$toBestUnit, zone, maxMmount, min, max);
		var unit = _v0.a;
		var mult = _v0.b;
		var amount = A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, mult, min, max);
		var initial = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, min);
		var tUnit = $terezka$intervals$Intervals$Time$toExtraUnit(unit);
		var toTick = F3(
			function (x, timestamp, change) {
				return {
					gD: (_Utils_cmp(
						$terezka$intervals$Intervals$Time$unitToInt(change),
						$terezka$intervals$Intervals$Time$unitToInt(unit)) > 0) ? $elm$core$Maybe$Just(change) : $elm$core$Maybe$Nothing,
					ej: !x,
					hs: mult,
					iC: timestamp,
					iQ: unit,
					eY: zone
				};
			});
		var toTicks = F2(
			function (xs, acc) {
				toTicks:
				while (true) {
					if (xs.b) {
						var x = xs.a;
						var rest = xs.b;
						var prev = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, (x - 1) * mult, zone, initial);
						var curr = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, x * mult, zone, initial);
						var change = A3($terezka$intervals$Intervals$Time$getChange, zone, prev, curr);
						var $temp$xs = rest,
							$temp$acc = A2(
							$elm$core$List$cons,
							A3(toTick, x, curr, change),
							acc);
						xs = $temp$xs;
						acc = $temp$acc;
						continue toTicks;
					} else {
						return acc;
					}
				}
			});
		return $elm$core$List$reverse(
			A2(
				toTicks,
				A2($elm$core$List$range, 0, amount - 1),
				_List_Nil));
	});
var $terezka$intervals$Intervals$times = F3(
	function (zone, amount, range) {
		var toUnit = function (unit) {
			switch (unit) {
				case 0:
					return 0;
				case 1:
					return 1;
				case 2:
					return 2;
				case 3:
					return 3;
				case 4:
					return 4;
				case 5:
					return 5;
				default:
					return 6;
			}
		};
		var translateUnit = function (time) {
			return {
				gD: A2($elm$core$Maybe$map, toUnit, time.gD),
				ej: time.ej,
				hs: time.hs,
				iC: time.iC,
				iQ: toUnit(time.iQ),
				eY: time.eY
			};
		};
		var fromMs = function (ts) {
			return $elm$time$Time$millisToPosix(
				$elm$core$Basics$round(ts));
		};
		return A2(
			$elm$core$List$map,
			translateUnit,
			A4(
				$terezka$intervals$Intervals$Time$values,
				zone,
				amount,
				fromMs(range.et),
				fromMs(range.fu)));
	});
var $terezka$charts$Internal$Svg$times = function (zone) {
	return F2(
		function (i, b) {
			return A3(
				$terezka$intervals$Intervals$times,
				zone,
				i,
				{fu: b.fu, et: b.et});
		});
};
var $terezka$charts$Chart$Svg$times = $terezka$charts$Internal$Svg$times;
var $terezka$charts$Chart$generateValues = F4(
	function (amount, tick, maybeFormat, axis) {
		var toTickValues = F2(
			function (toValue, toString) {
				return $elm$core$List$map(
					function (i) {
						return {
							dB: function () {
								if (!maybeFormat.$) {
									var formatter = maybeFormat.a;
									return formatter(
										toValue(i));
								} else {
									return toString(i);
								}
							}(),
							ag: toValue(i)
						};
					});
			});
		switch (tick.$) {
			case 0:
				return A3(
					toTickValues,
					$elm$core$Basics$identity,
					$elm$core$String$fromFloat,
					A3($terezka$charts$Chart$Svg$generate, amount, $terezka$charts$Chart$Svg$floats, axis));
			case 1:
				return A3(
					toTickValues,
					$elm$core$Basics$toFloat,
					$elm$core$String$fromInt,
					A3($terezka$charts$Chart$Svg$generate, amount, $terezka$charts$Chart$Svg$ints, axis));
			default:
				var zone = tick.a;
				return A3(
					toTickValues,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Basics$toFloat, $elm$time$Time$posixToMillis),
						function ($) {
							return $.iC;
						}),
					$terezka$charts$Chart$Svg$formatTime(zone),
					A3(
						$terezka$charts$Chart$Svg$generate,
						amount,
						$terezka$charts$Chart$Svg$times(zone),
						axis));
		}
	});
var $elm$svg$Svg$foreignObject = $elm$svg$Svg$trustedNode('foreignObject');
var $terezka$charts$Internal$Svg$position = F6(
	function (plane, rotation, x_, y_, xOff_, yOff_) {
		return $elm$svg$Svg$Attributes$transform(
			'translate(' + ($elm$core$String$fromFloat(
				A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x_) + xOff_) + (',' + ($elm$core$String$fromFloat(
				A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y_) + yOff_) + (') rotate(' + ($elm$core$String$fromFloat(rotation) + ')'))))));
	});
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $elm$svg$Svg$tspan = $elm$svg$Svg$trustedNode('tspan');
var $terezka$charts$Internal$Svg$label = F4(
	function (plane, config, inner, point) {
		var _v0 = config.z;
		if (_v0.$ === 1) {
			var withOverflowWrap = function (el) {
				return config.B ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$terezka$charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_fromArray(
						[el])) : el;
			};
			var uppercaseStyle = config.H ? 'text-transform: uppercase;' : '';
			var fontStyle = function () {
				var _v5 = config.A;
				if (!_v5.$) {
					var size_ = _v5.a;
					return 'font-size: ' + ($elm$core$String$fromInt(size_) + 'px;');
				} else {
					return '';
				}
			}();
			var anchorStyle = function () {
				var _v1 = config.x;
				if (_v1.$ === 1) {
					return 'text-anchor: middle;';
				} else {
					switch (_v1.a) {
						case 0:
							var _v2 = _v1.a;
							return 'text-anchor: end;';
						case 1:
							var _v3 = _v1.a;
							return 'text-anchor: start;';
						default:
							var _v4 = _v1.a;
							return 'text-anchor: middle;';
					}
				}
			}();
			return withOverflowWrap(
				A4(
					$terezka$charts$Internal$Svg$withAttrs,
					config.l,
					$elm$svg$Svg$text_,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__label'),
							$elm$svg$Svg$Attributes$stroke(config._),
							$elm$svg$Svg$Attributes$strokeWidth(
							$elm$core$String$fromFloat(config.ae)),
							$elm$svg$Svg$Attributes$fill(config.gH),
							A6($terezka$charts$Internal$Svg$position, plane, -config.G, point.bD, point.bj, config.r, config.s),
							$elm$svg$Svg$Attributes$style(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									['pointer-events: none;', fontStyle, anchorStyle, uppercaseStyle])))
						]),
					_List_fromArray(
						[
							A2($elm$svg$Svg$tspan, _List_Nil, inner)
						])));
		} else {
			var ellipsis = _v0.a;
			var xOffWithAnchor = function () {
				var _v11 = config.x;
				if (_v11.$ === 1) {
					return config.r - (ellipsis.eS / 2);
				} else {
					switch (_v11.a) {
						case 0:
							var _v12 = _v11.a;
							return config.r - ellipsis.eS;
						case 1:
							var _v13 = _v11.a;
							return config.r;
						default:
							var _v14 = _v11.a;
							return config.r - (ellipsis.eS / 2);
					}
				}
			}();
			var withOverflowWrap = function (el) {
				return config.B ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$terezka$charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_fromArray(
						[el])) : el;
			};
			var uppercaseStyle = config.H ? A2($elm$html$Html$Attributes$style, 'text-transform', 'uppercase') : A2($elm$html$Html$Attributes$style, '', '');
			var fontStyle = function () {
				var _v10 = config.A;
				if (!_v10.$) {
					var size_ = _v10.a;
					return A2(
						$elm$html$Html$Attributes$style,
						'font-size',
						$elm$core$String$fromInt(size_) + 'px');
				} else {
					return A2($elm$html$Html$Attributes$style, '', '');
				}
			}();
			var anchorStyle = function () {
				var _v6 = config.x;
				if (_v6.$ === 1) {
					return A2($elm$html$Html$Attributes$style, 'text-align', 'center');
				} else {
					switch (_v6.a) {
						case 0:
							var _v7 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'right');
						case 1:
							var _v8 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'left');
						default:
							var _v9 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'center');
					}
				}
			}();
			return withOverflowWrap(
				A4(
					$terezka$charts$Internal$Svg$withAttrs,
					config.l,
					$elm$svg$Svg$foreignObject,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__label'),
							$elm$svg$Svg$Attributes$class('elm-charts__html-label'),
							$elm$svg$Svg$Attributes$width(
							$elm$core$String$fromFloat(ellipsis.eS)),
							$elm$svg$Svg$Attributes$height(
							$elm$core$String$fromFloat(ellipsis.fj)),
							A6($terezka$charts$Internal$Svg$position, plane, -config.G, point.bD, point.bj, xOffWithAnchor, config.s - 10)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$attribute, 'xmlns', 'http://www.w3.org/1999/xhtml'),
									A2($elm$html$Html$Attributes$style, 'white-space', 'nowrap'),
									A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
									A2($elm$html$Html$Attributes$style, 'text-overflow', 'ellipsis'),
									A2($elm$html$Html$Attributes$style, 'height', '100%'),
									A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
									A2($elm$html$Html$Attributes$style, 'color', config.gH),
									fontStyle,
									uppercaseStyle,
									anchorStyle
								]),
							inner)
						])));
		}
	});
var $terezka$charts$Chart$Attributes$zero = function (b) {
	return A3($elm$core$Basics$clamp, b.et, b.fu, 0);
};
var $terezka$charts$Chart$xLabels = function (edits) {
	var toTicks = F2(
		function (p, config) {
			return A4(
				$terezka$charts$Chart$generateValues,
				config.aB,
				config.aG,
				config.ak,
				A3(
					$elm$core$List$foldl,
					F2(
						function (f, x) {
							return f(x);
						}),
					p.bD,
					config.W));
		});
	var toTickValues = F3(
		function (p, config, ts) {
			return (!config.g$) ? ts : _Utils_update(
				ts,
				{
					ah: _Utils_ap(
						ts.ah,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.ag;
							},
							A2(toTicks, p, config)))
				});
		});
	var toConfig = function (p) {
		return A2(
			$terezka$charts$Internal$Helpers$apply,
			edits,
			{aB: 5, x: $elm$core$Maybe$Nothing, l: _List_Nil, gH: '#808BAB', z: $elm$core$Maybe$Nothing, o: false, A: $elm$core$Maybe$Nothing, ak: $elm$core$Maybe$Nothing, aG: $terezka$charts$Internal$Svg$Floats, g$: false, B: false, W: _List_Nil, F: $terezka$charts$Chart$Attributes$zero, G: 0, H: false, r: 0, s: 18});
	};
	return A3(
		$terezka$charts$Chart$LabelsElement,
		toConfig,
		toTickValues,
		F2(
			function (p, config) {
				var _default = $terezka$charts$Internal$Svg$defaultLabel;
				var toLabel = function (item) {
					return A4(
						$terezka$charts$Internal$Svg$label,
						p,
						_Utils_update(
							_default,
							{
								x: config.x,
								l: config.l,
								gH: config.gH,
								z: config.z,
								A: config.A,
								B: config.B,
								G: config.G,
								H: config.H,
								r: config.r,
								s: config.o ? ((-config.s) + 10) : config.s
							}),
						_List_fromArray(
							[
								$elm$svg$Svg$text(item.dB)
							]),
						{
							bD: item.ag,
							bj: config.F(p.bj)
						});
				};
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__x-labels')
						]),
					A2(
						$elm$core$List$map,
						toLabel,
						A2(toTicks, p, config)));
			}));
};
var $terezka$charts$Internal$Svg$End = 0;
var $terezka$charts$Internal$Svg$Start = 1;
var $terezka$charts$Chart$yLabels = function (edits) {
	var toTicks = F2(
		function (p, config) {
			return A4(
				$terezka$charts$Chart$generateValues,
				config.aB,
				config.aG,
				config.ak,
				A3(
					$elm$core$List$foldl,
					F2(
						function (f, y) {
							return f(y);
						}),
					p.bj,
					config.W));
		});
	var toTickValues = F3(
		function (p, config, ts) {
			return (!config.g$) ? ts : _Utils_update(
				ts,
				{
					az: _Utils_ap(
						ts.az,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.ag;
							},
							A2(toTicks, p, config)))
				});
		});
	var toConfig = function (p) {
		return A2(
			$terezka$charts$Internal$Helpers$apply,
			edits,
			{aB: 5, x: $elm$core$Maybe$Nothing, l: _List_Nil, gH: '#808BAB', z: $elm$core$Maybe$Nothing, o: false, A: $elm$core$Maybe$Nothing, ak: $elm$core$Maybe$Nothing, aG: $terezka$charts$Internal$Svg$Floats, g$: false, B: false, W: _List_Nil, F: $terezka$charts$Chart$Attributes$zero, G: 0, H: false, r: -10, s: 3});
	};
	return A3(
		$terezka$charts$Chart$LabelsElement,
		toConfig,
		toTickValues,
		F2(
			function (p, config) {
				var _default = $terezka$charts$Internal$Svg$defaultLabel;
				var toLabel = function (item) {
					return A4(
						$terezka$charts$Internal$Svg$label,
						p,
						_Utils_update(
							_default,
							{
								x: function () {
									var _v0 = config.x;
									if (_v0.$ === 1) {
										return $elm$core$Maybe$Just(
											config.o ? 1 : 0);
									} else {
										var anchor = _v0.a;
										return $elm$core$Maybe$Just(anchor);
									}
								}(),
								l: config.l,
								gH: config.gH,
								z: config.z,
								A: config.A,
								B: config.B,
								G: config.G,
								H: config.H,
								r: config.o ? (-config.r) : config.r,
								s: config.s
							}),
						_List_fromArray(
							[
								$elm$svg$Svg$text(item.dB)
							]),
						{
							bD: config.F(p.bD),
							bj: item.ag
						});
				};
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__y-labels')
						]),
					A2(
						$elm$core$List$map,
						toLabel,
						A2(toTicks, p, config)));
			}));
};
var $author$project$Render$Data$rawLineChart2D = F2(
	function (options, data) {
		var range = function () {
			var _v3 = options.eC;
			if (_v3.$ === 1) {
				return $terezka$charts$Chart$Attributes$range(_List_Nil);
			} else {
				var range_ = _v3.a;
				return $terezka$charts$Chart$Attributes$range(
					$author$project$Render$Data$expandRange(range_));
			}
		}();
		var domain = function () {
			var _v2 = options.d6;
			if (_v2.$ === 1) {
				return $terezka$charts$Chart$Attributes$domain(_List_Nil);
			} else {
				var range_ = _v2.a;
				return $terezka$charts$Chart$Attributes$domain(
					$author$project$Render$Data$expandRange(range_));
			}
		}();
		return $mdgriffith$elm_ui$Element$html(
			A2(
				$terezka$charts$Chart$chart,
				_List_fromArray(
					[
						$terezka$charts$Chart$Attributes$height(200),
						$terezka$charts$Chart$Attributes$width(400),
						function () {
						var _v0 = options.b0;
						if (_v0.$ === 1) {
							return $terezka$charts$Chart$Attributes$domain(_List_Nil);
						} else {
							var lowest = _v0.a;
							return $terezka$charts$Chart$Attributes$domain(
								_List_fromArray(
									[
										A2($terezka$charts$Chart$Attributes$lowest, lowest, $terezka$charts$Chart$Attributes$orLower)
									]));
						}
					}()
					]),
				_List_fromArray(
					[
						$terezka$charts$Chart$xLabels(
						_List_fromArray(
							[
								$terezka$charts$Chart$Attributes$fontSize(10)
							])),
						$terezka$charts$Chart$yLabels(
						_List_fromArray(
							[
								$terezka$charts$Chart$Attributes$withGrid,
								$terezka$charts$Chart$Attributes$fontSize(10)
							])),
						function () {
						var _v1 = options.em;
						_v1$3:
						while (true) {
							if (!_v1.$) {
								switch (_v1.a) {
									case 'line':
										return A3(
											$terezka$charts$Chart$series,
											function ($) {
												return $.bD;
											},
											_List_fromArray(
												[
													A3(
													$terezka$charts$Chart$interpolated,
													function ($) {
														return $.bj;
													},
													_List_fromArray(
														[
															$terezka$charts$Chart$Attributes$color($terezka$charts$Chart$Attributes$red)
														]),
													_List_Nil)
												]),
											data);
									case 'scatter':
										return A3(
											$terezka$charts$Chart$series,
											function ($) {
												return $.bD;
											},
											_List_fromArray(
												[
													A2(
													$terezka$charts$Chart$scatter,
													function ($) {
														return $.bj;
													},
													_List_Nil)
												]),
											data);
									case 'bar':
										return A3(
											$terezka$charts$Chart$bars,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$terezka$charts$Chart$bar,
													function ($) {
														return $.bj;
													},
													_List_Nil)
												]),
											data);
									default:
										break _v1$3;
								}
							} else {
								break _v1$3;
							}
						}
						return A3(
							$terezka$charts$Chart$series,
							function ($) {
								return $.bD;
							},
							_List_fromArray(
								[
									A3(
									$terezka$charts$Chart$interpolated,
									function ($) {
										return $.bj;
									},
									_List_fromArray(
										[
											$terezka$charts$Chart$Attributes$color($terezka$charts$Chart$Attributes$red)
										]),
									_List_Nil)
								]),
							data);
					}()
					])));
	});
var $terezka$charts$Internal$Helpers$darkBlue = '#7345f6';
var $terezka$charts$Chart$Attributes$darkBlue = $terezka$charts$Internal$Helpers$darkBlue;
var $author$project$Render$Data$rawLineChart3D = function (data) {
	return $mdgriffith$elm_ui$Element$html(
		A2(
			$terezka$charts$Chart$chart,
			_List_fromArray(
				[
					$terezka$charts$Chart$Attributes$height(200),
					$terezka$charts$Chart$Attributes$width(400)
				]),
			_List_fromArray(
				[
					$terezka$charts$Chart$xLabels(
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$fontSize(10)
						])),
					$terezka$charts$Chart$yLabels(
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$withGrid,
							$terezka$charts$Chart$Attributes$fontSize(10)
						])),
					A3(
					$terezka$charts$Chart$series,
					function ($) {
						return $.bD;
					},
					_List_fromArray(
						[
							A3(
							$terezka$charts$Chart$interpolated,
							function ($) {
								return $.bj;
							},
							_List_fromArray(
								[
									$terezka$charts$Chart$Attributes$color($terezka$charts$Chart$Attributes$red)
								]),
							_List_Nil),
							A3(
							$terezka$charts$Chart$interpolated,
							function ($) {
								return $.f8;
							},
							_List_fromArray(
								[
									$terezka$charts$Chart$Attributes$color($terezka$charts$Chart$Attributes$darkBlue)
								]),
							_List_Nil)
						]),
					data)
				])));
};
var $author$project$Render$Data$red = A3($mdgriffith$elm_ui$Element$rgb255, 255, 0, 0);
var $author$project$Render$Data$rawLineChart = F2(
	function (options, mChartData) {
		if (mChartData.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Data$red)
					]),
				$mdgriffith$elm_ui$Element$text('Line chart: Error parsing data'));
		} else {
			switch (mChartData.a.$) {
				case 0:
					var data = mChartData.a.a;
					return A2($author$project$Render$Data$rawLineChart2D, options, data);
				case 1:
					var data = mChartData.a.a;
					return $author$project$Render$Data$rawLineChart3D(data);
				default:
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Data$red)
							]),
						$mdgriffith$elm_ui$Element$text('Line chart: Error, can only handle 2D data'));
			}
		}
	});
var $author$project$Render$Data$chart = F4(
	function (count, acc, settings, block) {
		var id = block.g7;
		var args = block.gn;
		var properties = block.w;
		var options = {
			dY: A2($elm$core$Dict$get, 'caption', properties),
			dj: A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$split(','),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$map($elm$core$String$trim),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$map($elm$core$String$toInt),
							$elm_community$maybe_extra$Maybe$Extra$values))),
				A2($elm$core$Dict$get, 'columns', properties)),
			d6: A2(
				$elm$core$Maybe$andThen,
				$author$project$Render$Data$getRange,
				A2($elm$core$Dict$get, 'domain', properties)),
			em: A2($elm$core$Dict$get, 'kind', properties),
			dB: A2($elm$core$Dict$get, 'figure', properties),
			b0: A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toFloat,
				A2($elm$core$Dict$get, 'lowest', properties)),
			eC: A2(
				$elm$core$Maybe$andThen,
				$author$project$Render$Data$getRange,
				A2($elm$core$Dict$get, 'range', properties)),
			eE: A2($author$project$Render$Data$getArg, 'reverse', args),
			eN: A2($author$project$Render$Data$getArg, 'timeseries', args)
		};
		var data = A2(
			$author$project$Render$Data$csvToChartData,
			options,
			$author$project$Render$Data$getVerbatimContent(block));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.eS)),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 72, bb: 48, bf: 0, bh: 36}),
					$mdgriffith$elm_ui$Element$spacing(24)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.eS))
						]),
					A2($author$project$Render$Data$rawLineChart, options, data)),
					function () {
					var _v0 = _Utils_Tuple2(options.dB, options.dY);
					if (_v0.a.$ === 1) {
						if (_v0.b.$ === 1) {
							var _v1 = _v0.a;
							var _v2 = _v0.b;
							return $mdgriffith$elm_ui$Element$none;
						} else {
							var _v4 = _v0.a;
							var captionText = _v0.b.a;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.7)),
										$mdgriffith$elm_ui$Element$paddingEach(
										{a4: 0, bb: 0, bf: 0, bh: 24})
									]),
								$mdgriffith$elm_ui$Element$text(captionText));
						}
					} else {
						if (_v0.b.$ === 1) {
							var labelText = _v0.a.a;
							var _v3 = _v0.b;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.7)),
										$mdgriffith$elm_ui$Element$paddingEach(
										{a4: 0, bb: 0, bf: 0, bh: 24})
									]),
								$mdgriffith$elm_ui$Element$text('Figure ' + labelText));
						} else {
							var labelText = _v0.a.a;
							var captionText = _v0.b.a;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.7)),
										$mdgriffith$elm_ui$Element$paddingEach(
										{a4: 0, bb: 0, bf: 0, bh: 24})
									]),
								$mdgriffith$elm_ui$Element$text('Figure ' + (labelText + ('. ' + captionText))));
						}
					}
				}()
				]));
	});
var $author$project$Render$Math$displayedMath = F4(
	function (count, acc, settings, block) {
		var id = block.g7;
		var error = block.fb;
		var w = $elm$core$String$fromInt(settings.eS) + 'px';
		var leftPadding = $mdgriffith$elm_ui$Element$paddingEach(
			{a4: 0, bb: 45, bf: 0, bh: 0});
		var filteredLines = A2(
			$elm$core$List$map,
			$author$project$Parser$MathMacro$evalStr(acc.ep),
			A2(
				$elm$core$List$filter,
				function (line) {
					return line !== '';
				},
				A2(
					$elm$core$List$filter,
					function (line) {
						return !(A2($elm$core$String$left, 6, line) === '[label');
					},
					A2(
						$elm$core$List$filter,
						function (line) {
							return !(A2(
								$elm$core$String$left,
								2,
								$elm$core$String$trim(line)) === '$$');
						},
						$elm$core$String$lines(
							$author$project$Render$Math$getContent(block))))));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[leftPadding]),
			_List_fromArray(
				[
					A5(
					$author$project$Render$Math$mathText,
					count,
					w,
					id,
					1,
					A2($elm$core$String$join, '\n', filteredLines))
				]));
	});
var $author$project$Render$Math$equation = F4(
	function (count, acc, settings, block) {
		var id = block.g7;
		var args = block.gn;
		var error = block.fb;
		var properties = block.w;
		var w = $elm$core$String$fromInt(settings.eS) + 'px';
		var leftPadding = $mdgriffith$elm_ui$Element$paddingEach(
			{a4: 0, bb: 45, bf: 0, bh: 0});
		var filteredLines = A2(
			$elm$core$List$map,
			$author$project$Parser$MathMacro$evalStr(acc.ep),
			A2(
				$elm$core$List$filter,
				function (line) {
					return (!(A2($elm$core$String$left, 2, line) === '$$')) && ((!(A2($elm$core$String$left, 6, line) === '[label')) && (!(line === 'end')));
				},
				$elm$core$String$lines(
					$author$project$Render$Math$getContent(block))));
		var content = A2($elm$core$String$join, '\n', filteredLines);
		var attrs2 = A2($elm$core$List$member, 'highlight', args) ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.85, 0.85, 1.0)),
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX])) : _List_fromArray(
			[$mdgriffith$elm_ui$Element$centerX]);
		var attrs = _Utils_eq(id, settings.h0) ? _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Events$onClick(
				$author$project$Render$Msg$SendLineNumber(id)),
				leftPadding,
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 1.0))
			]) : _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Events$onClick(
				$author$project$Render$Msg$SendLineNumber(id)),
				leftPadding
			]);
		var adjustedLines = A2(
			$elm$core$List$map,
			function (line) {
				return (A2($elm$core$String$left, 6, line) !== '\\begin') ? (line + '\\\\') : line;
			},
			A2(
				$elm$core$List$filter,
				function (line) {
					return line !== '';
				},
				A2(
					$elm$core$List$map,
					$author$project$Parser$MathMacro$evalStr(acc.ep),
					filteredLines)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(settings.eS)),
								A2($author$project$Render$Utility$elementAttribute, 'id', id)
							]),
						attrs),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							attrs2,
							A5($author$project$Render$Math$mathText, count, w, id, 1, content)),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignRight,
									$mdgriffith$elm_ui$Element$Font$size(12),
									$author$project$Render$Math$equationLabelPadding
								]),
							$mdgriffith$elm_ui$Element$text(
								'(' + (A2($author$project$Render$Math$getLabel, 'equation', properties) + ')')))
						]))
				]));
	});
var $author$project$Render$Graphics$getCaption = function (properties) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'caption', properties));
};
var $author$project$Render$Graphics$getDescription = function (properties) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'description', properties));
};
var $author$project$Render$Graphics$getFigureLabel = function (dict) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'figure', dict));
};
var $author$project$Render$Utility$highlightElement = F2(
	function (id, selectedId) {
		return _Utils_eq(id, selectedId) ? _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Events$onClick(
				$author$project$Render$Msg$SendLineNumber(id)),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 1.0))
			]) : _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Events$onClick(
				$author$project$Render$Msg$SendLineNumber(id))
			]);
	});
var $author$project$Render$Graphics$parameters = F2(
	function (settings, properties) {
		var placement = function () {
			var _v2 = A2($elm$core$Dict$get, 'placement', properties);
			if (_v2.$ === 1) {
				return $mdgriffith$elm_ui$Element$centerX;
			} else {
				switch (_v2.a) {
					case 'left':
						return $mdgriffith$elm_ui$Element$alignLeft;
					case 'right':
						return $mdgriffith$elm_ui$Element$alignRight;
					case 'center':
						return $mdgriffith$elm_ui$Element$centerX;
					default:
						return $mdgriffith$elm_ui$Element$centerX;
				}
			}
		}();
		var displayWidth = settings.eS;
		var width = function () {
			var _v0 = A2($elm$core$Dict$get, 'width', properties);
			if (_v0.$ === 1) {
				return $mdgriffith$elm_ui$Element$px(displayWidth);
			} else {
				if (_v0.a === 'fill') {
					return $mdgriffith$elm_ui$Element$fill;
				} else {
					var w_ = _v0.a;
					var _v1 = $elm$core$String$toInt(w_);
					if (_v1.$ === 1) {
						return $mdgriffith$elm_ui$Element$px(displayWidth);
					} else {
						var w = _v1.a;
						return $mdgriffith$elm_ui$Element$px(w);
					}
				}
			}
		}();
		var description = $author$project$Render$Graphics$getDescription(properties);
		var captionPhrase = $author$project$Render$Graphics$getCaption(properties);
		return {dY: captionPhrase, d4: description, cZ: placement, eS: width};
	});
var $author$project$Render$Graphics$image2 = F4(
	function (_v0, _v1, settings, _v2) {
		var id = _v2.g7;
		var args = _v2.gn;
		var properties = _v2.w;
		var content = _v2.bM;
		var url = function () {
			if (!content.$) {
				var str = content.a;
				return str;
			} else {
				return 'bad block';
			}
		}();
		var params = A2($author$project$Render$Graphics$parameters, settings, properties);
		var caption = $author$project$Render$Graphics$getCaption(properties);
		var label = function () {
			switch (caption) {
				case '*':
					return 'Figure ' + $author$project$Render$Graphics$getFigureLabel(properties);
				case 'none':
					return '';
				default:
					return 'Figure ' + ($author$project$Render$Graphics$getFigureLabel(properties) + ('. ' + caption));
			}
		}();
		var inner = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.eS)),
					params.cZ,
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, 18)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(params.eS),
							params.cZ
						]),
					{
						d4: $author$project$Render$Graphics$getDescription(properties),
						fV: url
					}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						_List_fromArray(
							[
								params.cZ,
								A2($author$project$Render$Utility$elementAttribute, 'id', id),
								A2($mdgriffith$elm_ui$Element$paddingXY, 12, 4)
							]),
						A2($author$project$Render$Utility$highlightElement, id, settings.h0)),
					$mdgriffith$elm_ui$Element$text(label))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$newTabLink,
			_List_Nil,
			{dB: inner, f1: url});
	});
var $author$project$Render$Graphics$getVerbatimContent = function (_v0) {
	var content = _v0.bM;
	if (!content.$) {
		var str = content.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Render$Graphics$red = A3($mdgriffith$elm_ui$Element$rgb255, 255, 0, 0);
var $author$project$Render$Graphics$quiver = F4(
	function (_v0, _v1, settings, block) {
		var id = block.g7;
		var args = block.gn;
		var properties = block.w;
		var qArgs = A2($author$project$Render$Graphics$parameters, settings, properties);
		var maybePair = function () {
			var _v5 = A2(
				$elm$core$String$split,
				'---',
				$author$project$Render$Graphics$getVerbatimContent(block));
			if ((_v5.b && _v5.b.b) && (!_v5.b.b.b)) {
				var a = _v5.a;
				var _v6 = _v5.b;
				var b = _v6.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(a, b));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		if (maybePair.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Graphics$red)
					]),
				$mdgriffith$elm_ui$Element$text('Something is wrong'));
		} else {
			var _v3 = maybePair.a;
			var imageData = _v3.a;
			var params = A2(
				$author$project$Render$Graphics$imageParameters,
				settings,
				$elm$core$String$words(imageData));
			var desc = function () {
				var _v4 = qArgs.dY;
				if (_v4 === '*') {
					return 'Figure ' + $author$project$Render$Graphics$getFigureLabel(properties);
				} else {
					return 'Figure ' + ($author$project$Render$Graphics$getFigureLabel(properties) + ('. ' + qArgs.dY));
				}
			}();
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.eS))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(qArgs.eS),
								params.cZ
							]),
						{d4: desc, fV: params.f1}),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							_List_fromArray(
								[
									params.cZ,
									params.cZ,
									A2($mdgriffith$elm_ui$Element$paddingXY, 12, 4),
									A2($author$project$Render$Utility$elementAttribute, 'id', id)
								]),
							A2($author$project$Render$Utility$highlightElement, id, settings.h0)),
						$mdgriffith$elm_ui$Element$text(desc))
					]));
		}
	});
var $author$project$Render$Tabular$formatDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('l', $mdgriffith$elm_ui$Element$alignLeft),
			_Utils_Tuple2('r', $mdgriffith$elm_ui$Element$alignRight),
			_Utils_Tuple2('c', $mdgriffith$elm_ui$Element$centerX)
		]));
var $author$project$Render$Utility$getVerbatimContent = function (_v0) {
	var content = _v0.bM;
	if (!content.$) {
		var str = content.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Render$Tabular$charDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('a', 1.0),
			_Utils_Tuple2('b', 1.0),
			_Utils_Tuple2('c', 1.0),
			_Utils_Tuple2('d', 1.0),
			_Utils_Tuple2('e', 1.0),
			_Utils_Tuple2('f', 1.0),
			_Utils_Tuple2('g', 1.0),
			_Utils_Tuple2('h', 1.0),
			_Utils_Tuple2('i', 1.0),
			_Utils_Tuple2('j', 1.0),
			_Utils_Tuple2('k', 1.0),
			_Utils_Tuple2('l', 1.0),
			_Utils_Tuple2('m', 1.0),
			_Utils_Tuple2('n', 1.0),
			_Utils_Tuple2('o', 1.0),
			_Utils_Tuple2('p', 1.0),
			_Utils_Tuple2('q', 1.0),
			_Utils_Tuple2('r', 1.0),
			_Utils_Tuple2('s', 1.0),
			_Utils_Tuple2('t', 1.0),
			_Utils_Tuple2('u', 1.0),
			_Utils_Tuple2('v', 1.0),
			_Utils_Tuple2('w', 1.0),
			_Utils_Tuple2('x', 1.0),
			_Utils_Tuple2('y', 1.0),
			_Utils_Tuple2('z', 1.0),
			_Utils_Tuple2('A', 2.0),
			_Utils_Tuple2('B', 2.0),
			_Utils_Tuple2('C', 2.0),
			_Utils_Tuple2('D', 2.0),
			_Utils_Tuple2('E', 2.0),
			_Utils_Tuple2('F', 2.0),
			_Utils_Tuple2('G', 2.0),
			_Utils_Tuple2('H', 2.0),
			_Utils_Tuple2('I', 2.0),
			_Utils_Tuple2('J', 2.0),
			_Utils_Tuple2('K', 2.0),
			_Utils_Tuple2('L', 2.0),
			_Utils_Tuple2('M', 2.0),
			_Utils_Tuple2('N', 2.0),
			_Utils_Tuple2('O', 2.0),
			_Utils_Tuple2('P', 2.0),
			_Utils_Tuple2('Q', 2.0),
			_Utils_Tuple2('R', 2.0),
			_Utils_Tuple2('S', 2.0),
			_Utils_Tuple2('T', 2.0),
			_Utils_Tuple2('U', 2.0),
			_Utils_Tuple2('V', 2.0),
			_Utils_Tuple2('W', 2.0),
			_Utils_Tuple2('X', 2.0),
			_Utils_Tuple2('Y', 2.0),
			_Utils_Tuple2('Z', 2.0),
			_Utils_Tuple2('$', 1.0)
		]));
var $author$project$Render$Tabular$charWidth = function (c) {
	return A2(
		$elm$core$Maybe$withDefault,
		1.0,
		A2($elm$core$Dict$get, c, $author$project$Render$Tabular$charDict));
};
var $author$project$Render$Tabular$compress = function (string) {
	return $elm$core$String$trim(
		A3(
			$author$project$Utility$userReplace,
			'\\[A-Z].*[^a-zA-Z0-9]',
			function (_v1) {
				return 'A';
			},
			A3(
				$author$project$Utility$userReplace,
				'\\\\[a-z].*[^a-zA-Z0-9]',
				function (_v0) {
					return 'a';
				},
				string + ' ')));
};
var $author$project$Render$Tabular$textWidth = function (str_) {
	var str = A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			$author$project$Render$Tabular$compress,
			$elm$core$String$words(str_)));
	var letters = A2($elm$core$String$split, '', str);
	return $elm$core$List$sum(
		A2($elm$core$List$map, $author$project$Render$Tabular$charWidth, letters));
};
var $author$project$Render$Tabular$render = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var tableCell = F2(
			function (_v2, list) {
				var colWidth = _v2.a;
				var fmt = _v2.b;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(colWidth + 18))
						]),
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Element$paddingXY, 12, 8),
								fmt
							]),
						list));
			});
		var renderer = A3($author$project$Render$Elm$render, count, acc, settings);
		var renderCell = function (_v1) {
			var colWidth = _v1.a;
			var fmt = _v1.b;
			return A2(
				$elm$core$Basics$composeR,
				$elm$core$List$map(renderer),
				tableCell(
					_Utils_Tuple2(colWidth, fmt)));
		};
		var renderRow = F2(
			function (formats, cells) {
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					A3($elm$core$List$map2, renderCell, formats, cells));
			});
		var renderTable = F2(
			function (formats, cells) {
				var f = renderRow(formats);
				return A2(
					$elm$core$List$map,
					renderRow(formats),
					cells);
			});
		var lines = A2(
			$elm$core$String$split,
			'\\\\',
			$author$project$Render$Utility$getVerbatimContent(block));
		var formatString = $elm$core$String$words(
			A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(args)));
		var formatList = A2(
			$elm$core$List$map,
			function (c) {
				return A2(
					$elm$core$Maybe$withDefault,
					$mdgriffith$elm_ui$Element$centerX,
					A2($elm$core$Dict$get, c, $author$project$Render$Tabular$formatDict));
			},
			formatString);
		var fix = F2(
			function (colWidths, fmtList) {
				var n = $elm$core$List$length(fmtList);
				var m = $elm$core$List$length(colWidths);
				var _v0 = A2($elm$core$Basics$compare, m, n);
				switch (_v0) {
					case 0:
						return A2($elm$core$List$repeat, m, $mdgriffith$elm_ui$Element$centerX);
					case 1:
						return fmtList;
					default:
						return A2($elm$core$List$repeat, m, $mdgriffith$elm_ui$Element$centerX);
				}
			});
		var effectiveFontWidth_ = 9.0;
		var cellsAsStrings_ = A2(
			$elm$core$List$map,
			$elm$core$List$map($elm$core$String$trim),
			A2(
				$elm$core$List$map,
				$elm$core$String$split('&'),
				lines));
		var maxRowSize = $elm$core$List$maximum(
			A2($elm$core$List$map, $elm$core$List$length, cellsAsStrings_));
		var cellsAsStrings = A2(
			$elm$core$List$filter,
			function (row_) {
				return _Utils_eq(
					$elm$core$Maybe$Just(
						$elm$core$List$length(row_)),
					maxRowSize);
			},
			cellsAsStrings_);
		var columnWidths = A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				function (w) {
					return effectiveFontWidth_ * w;
				},
				$elm$core$Basics$round),
			A2(
				$elm$core$List$map,
				function (column) {
					return A2(
						$elm$core$Maybe$withDefault,
						1,
						$elm$core$List$maximum(column));
				},
				$elm_community$list_extra$List$Extra$transpose(
					A2(
						$elm$core$List$map,
						$elm$core$List$map($author$project$Render$Tabular$textWidth),
						cellsAsStrings))));
		var extendedFormatList = A3(
			$elm$core$List$map2,
			F2(
				function (x, y) {
					return _Utils_Tuple2(x, y);
				}),
			columnWidths,
			A2(fix, columnWidths, formatList));
		var totalWidth = $elm$core$List$sum(columnWidths);
		var parsedCells = A2(
			$elm$core$List$map,
			$elm$core$List$map(
				A2(
					$elm$core$Basics$composeR,
					$author$project$MicroLaTeX$Parser$Expression$parse(0),
					$elm$core$Tuple$first)),
			cellsAsStrings);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 0, bb: 24, bf: 0, bh: 0}),
					$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
					$author$project$Render$Utility$idAttribute(lineNumber)
				]),
			A2(renderTable, extendedFormatList, parsedCells));
	});
var $author$project$Render$Block$cyan = $mdgriffith$elm_ui$Element$Font$color(
	A3($mdgriffith$elm_ui$Element$rgb255, 11, 143, 158));
var $author$project$Render$Block$green = $mdgriffith$elm_ui$Element$Font$color(
	A3($mdgriffith$elm_ui$Element$rgb255, 11, 158, 26));
var $author$project$Render$Block$orange = $mdgriffith$elm_ui$Element$Font$color(
	A3($mdgriffith$elm_ui$Element$rgb255, 227, 81, 18));
var $author$project$Render$Block$elmDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('type', $author$project$Render$Block$orange),
			_Utils_Tuple2('LB', $author$project$Render$Block$green),
			_Utils_Tuple2('RB', $author$project$Render$Block$green),
			_Utils_Tuple2('S', $author$project$Render$Block$green),
			_Utils_Tuple2('String', $author$project$Render$Block$green),
			_Utils_Tuple2('Meta', $author$project$Render$Block$cyan)
		]));
var $author$project$Render$Block$renderedColoredWord = F2(
	function (lang, word) {
		if (lang === 'elm') {
			var _v1 = A2($elm$core$Dict$get, word, $author$project$Render$Block$elmDict);
			if (!_v1.$) {
				var color = _v1.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[color]),
					$mdgriffith$elm_ui$Element$text(word + ' '));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(word + ' '));
			}
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text(word + ' '));
		}
	});
var $author$project$Render$Block$renderedColoredLine = F2(
	function (lang, str) {
		return A2(
			$elm$core$List$map,
			$author$project$Render$Block$renderedColoredWord(lang),
			$elm$core$String$words(str));
	});
var $author$project$Render$Block$renderVerbatimLine = F2(
	function (lang, str) {
		return ($elm$core$String$trim(str) === '') ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(11))
				]),
			$mdgriffith$elm_ui$Element$text('')) : ((lang === 'plain') ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(22))
				]),
			$mdgriffith$elm_ui$Element$text(str)) : A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(22))
				]),
			A2($author$project$Render$Block$renderedColoredLine, lang, str)));
	});
var $author$project$Render$Block$renderCode = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Settings$codeColor),
					$mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$typeface('Inconsolata'),
							$mdgriffith$elm_ui$Element$Font$monospace
						])),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 0, bb: 24, bf: 0, bh: 0}),
					$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
					$author$project$Render$Utility$idAttribute(lineNumber)
				]),
			function () {
				var _v0 = $elm$core$List$head(args);
				if (!_v0.$) {
					var arg = _v0.a;
					return A2(
						$elm$core$List$map,
						$author$project$Render$Block$renderVerbatimLine(arg),
						$elm$core$String$lines(
							$elm$core$String$trim(
								$author$project$Render$Utility$getVerbatimContent(block))));
				} else {
					return A2(
						$elm$core$List$map,
						$author$project$Render$Block$renderVerbatimLine('plain'),
						$elm$core$String$lines(
							$elm$core$String$trim(
								$author$project$Render$Utility$getVerbatimContent(block))));
				}
			}());
	});
var $elm$html$Html$iframe = _VirtualDom_node('iframe');
var $author$project$Parser$Utility$itemParser = function (item) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							F3(
								function (start, end, src) {
									return A3($elm$core$String$slice, start, end, src);
								})),
						$elm$parser$Parser$chompUntil(item + '=')),
					$elm$parser$Parser$symbol(item + '=\"')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('\"'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $author$project$Parser$Utility$parseItem = F2(
	function (item, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$Parser$Utility$itemParser(item),
			str);
		if (!_v0.$) {
			var output = _v0.a;
			return $elm$core$Maybe$Just(output);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Render$Block$allowedIFrameSrcList = _List_fromArray(
	['https://www.desmos.com/calculator/', 'https://q.uiver.app/']);
var $Chadtech$elm_bool_extra$Bool$Extra$any = $elm$core$List$any($elm$core$Basics$identity);
var $author$project$Render$Block$validSrc = function (src) {
	return $Chadtech$elm_bool_extra$Bool$Extra$any(
		A2(
			$elm$core$List$map,
			function (src_) {
				return A2($elm$core$String$contains, src_, src);
			},
			$author$project$Render$Block$allowedIFrameSrcList));
};
var $author$project$Render$Block$parseIFrame = function (str) {
	var width_ = A2($author$project$Parser$Utility$parseItem, 'width', str);
	var src_ = A2($author$project$Parser$Utility$parseItem, 'src', str);
	var height_ = A2($author$project$Parser$Utility$parseItem, 'height', str);
	var _v0 = _Utils_Tuple3(src_, width_, height_);
	if (((!_v0.a.$) && (!_v0.b.$)) && (!_v0.c.$)) {
		var src = _v0.a.a;
		var width = _v0.b.a;
		var height = _v0.c.a;
		return $author$project$Render$Block$validSrc(src) ? $elm$core$Maybe$Just(
			{fj: height, fV: src, eS: width}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$Block$renderIFrame = F4(
	function (count, acc, settings, block) {
		var lineNumber = block.eo;
		var properties = block.w;
		var _v0 = $author$project$Render$Block$parseIFrame(
			$author$project$Render$Utility$getVerbatimContent(block));
		if (_v0.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text('Error parsing iframe or unregistered src'));
		} else {
			var iframeProperties = _v0.a;
			var w = A2(
				$elm$core$Maybe$withDefault,
				400,
				$elm$core$String$toInt(iframeProperties.eS));
			var label_ = A2($elm$core$Dict$get, 'figure', properties);
			var caption_ = A2($elm$core$Dict$get, 'caption', properties);
			var figureLabel = function () {
				var _v1 = _Utils_Tuple2(label_, caption_);
				if (!_v1.a.$) {
					if (!_v1.b.$) {
						var label = _v1.a.a;
						var caption = _v1.b.a;
						return 'Figure ' + (label + ('. ' + caption));
					} else {
						var label = _v1.a.a;
						var _v2 = _v1.b;
						return 'Figure ' + label;
					}
				} else {
					if (!_v1.b.$) {
						var _v3 = _v1.a;
						var caption = _v1.b.a;
						return caption;
					} else {
						var _v4 = _v1.a;
						var _v5 = _v1.b;
						return '';
					}
				}
			}();
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
						$author$project$Render$Utility$idAttribute(lineNumber),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(w))
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$html(
						A2(
							$elm$html$Html$iframe,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$src(iframeProperties.fV),
									A2($elm$html$Html$Attributes$style, 'border', 'none'),
									A2($elm$html$Html$Attributes$style, 'width', iframeProperties.eS + 'px'),
									A2($elm$html$Html$Attributes$style, 'height', iframeProperties.fj + 'px')
								]),
							_List_Nil)),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								A2($mdgriffith$elm_ui$Element$paddingXY, 0, 12)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(figureLabel)
							]))
					]));
		}
	});
var $author$project$Render$Block$renderNothing = F4(
	function (_v0, _v1, _v2, _v3) {
		return $mdgriffith$elm_ui$Element$none;
	});
var $author$project$Render$Block$renderVerbatim = F4(
	function (_v0, _v1, _v2, block) {
		var lineNumber = block.eo;
		var args = block.gn;
		var _v3 = $elm$core$List$head(args);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$typeface('Inconsolata'),
							$mdgriffith$elm_ui$Element$Font$monospace
						])),
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 0, bb: 24, bf: 0, bh: 0}),
					$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
					$author$project$Render$Utility$idAttribute(lineNumber)
				]),
			function () {
				var _v4 = $elm$core$List$head(args);
				if (!_v4.$) {
					var lang = _v4.a;
					return A2(
						$elm$core$List$map,
						$author$project$Render$Block$renderVerbatimLine(lang),
						$elm$core$String$lines(
							$elm$core$String$trim(
								$author$project$Render$Utility$getVerbatimContent(block))));
				} else {
					return A2(
						$elm$core$List$map,
						$author$project$Render$Block$renderVerbatimLine('none'),
						$elm$core$String$lines(
							$elm$core$String$trim(
								$author$project$Render$Utility$getVerbatimContent(block))));
				}
			}());
	});
var $author$project$Render$Block$renderVerse = F4(
	function (_v0, _v1, _v2, block) {
		var lineNumber = block.eo;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$author$project$Render$Utility$sendLineNumberOnClick(lineNumber),
					$author$project$Render$Utility$idAttribute(lineNumber)
				]),
			A2(
				$elm$core$List$map,
				$author$project$Render$Block$renderVerbatimLine('plain'),
				$elm$core$String$lines(
					$elm$core$String$trim(
						$author$project$Render$Utility$getVerbatimContent(block)))));
	});
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (!result.$) {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $elm$virtual_dom$VirtualDom$nodeNS = F2(
	function (namespace, tag) {
		return A2(
			_VirtualDom_nodeNS,
			namespace,
			_VirtualDom_noScript(tag));
	});
var $elm$svg$Svg$node = $elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');
var $Garados007$elm_svg_parser$SvgParser$toAttribute = function (_v0) {
	var name = _v0.a;
	var value = _v0.b;
	return A2($elm$virtual_dom$VirtualDom$attribute, name, value);
};
var $Garados007$elm_svg_parser$SvgParser$elementToSvg = function (element) {
	return A3(
		$elm$svg$Svg$node,
		element.fA,
		A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$toAttribute, element.e1),
		A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$nodeToSvg, element.a5));
};
var $Garados007$elm_svg_parser$SvgParser$nodeToSvg = function (svgNode) {
	switch (svgNode.$) {
		case 0:
			var element = svgNode.a;
			return $Garados007$elm_svg_parser$SvgParser$elementToSvg(element);
		case 1:
			var content = svgNode.a;
			return $elm$svg$Svg$text(content);
		default:
			var content = svgNode.a;
			return $elm$svg$Svg$text('');
	}
};
var $andre_dietrich$parser_combinators$Combine$Parser = $elm$core$Basics$identity;
var $andre_dietrich$parser_combinators$Combine$app = function (_v0) {
	var inner = _v0;
	return inner;
};
var $andre_dietrich$parser_combinators$Combine$andThen = F2(
	function (f, p) {
		return F2(
			function (state, stream) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (!_v0.c.$) {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					return A3(
						$andre_dietrich$parser_combinators$Combine$app,
						f(res),
						rstate,
						rstream);
				} else {
					var estate = _v0.a;
					var estream = _v0.b;
					var ms = _v0.c.a;
					return _Utils_Tuple3(
						estate,
						estream,
						$elm$core$Result$Err(ms));
				}
			});
	});
var $pilatch$flip$Flip$flip = F3(
	function (_function, argB, argA) {
		return A2(_function, argA, argB);
	});
var $andre_dietrich$parser_combinators$Combine$bimap = F3(
	function (fok, ferr, p) {
		return F2(
			function (state, stream) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (!_v0.c.$) {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					return _Utils_Tuple3(
						rstate,
						rstream,
						$elm$core$Result$Ok(
							fok(res)));
				} else {
					var estate = _v0.a;
					var estream = _v0.b;
					var ms = _v0.c.a;
					return _Utils_Tuple3(
						estate,
						estream,
						$elm$core$Result$Err(
							ferr(ms)));
				}
			});
	});
var $andre_dietrich$parser_combinators$Combine$map = F2(
	function (f, p) {
		return A3($andre_dietrich$parser_combinators$Combine$bimap, f, $elm$core$Basics$identity, p);
	});
var $andre_dietrich$parser_combinators$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andThen,
			A2($pilatch$flip$Flip$flip, $andre_dietrich$parser_combinators$Combine$map, rp),
			lp);
	});
var $Garados007$elm_svg_parser$SvgParser$flip = F3(
	function (func, b, a) {
		return A2(func, a, b);
	});
var $Garados007$elm_svg_parser$SvgParser$andMapRight = F2(
	function (lp, rp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			rp,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$Garados007$elm_svg_parser$SvgParser$flip($elm$core$Basics$always),
				lp));
	});
var $Garados007$elm_svg_parser$SvgParser$SvgElement = function (a) {
	return {$: 0, a: a};
};
var $Garados007$elm_svg_parser$SvgParser$andMapLeft = F2(
	function (lp, rp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			rp,
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Basics$always, lp));
	});
var $andre_dietrich$parser_combinators$Combine$emptyErr = F2(
	function (state, stream) {
		return _Utils_Tuple3(
			state,
			stream,
			$elm$core$Result$Err(_List_Nil));
	});
var $andre_dietrich$parser_combinators$Combine$or = F2(
	function (lp, rp) {
		return F2(
			function (state, stream) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, lp, state, stream);
				if (!_v0.c.$) {
					var res = _v0;
					return res;
				} else {
					var lms = _v0.c.a;
					var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, rp, state, stream);
					if (!_v1.c.$) {
						var res = _v1;
						return res;
					} else {
						var rms = _v1.c.a;
						return _Utils_Tuple3(
							state,
							stream,
							$elm$core$Result$Err(
								_Utils_ap(lms, rms)));
					}
				}
			});
	});
var $andre_dietrich$parser_combinators$Combine$choice = function (xs) {
	return A3($elm$core$List$foldr, $andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$emptyErr, xs);
};
var $Garados007$elm_svg_parser$SvgParser$SvgComment = function (a) {
	return {$: 2, a: a};
};
var $andre_dietrich$parser_combinators$Combine$mapError = $andre_dietrich$parser_combinators$Combine$bimap($elm$core$Basics$identity);
var $andre_dietrich$parser_combinators$Combine$onerror = F2(
	function (m, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$mapError,
			$elm$core$Basics$always(
				_List_fromArray(
					[m])),
			p);
	});
var $andre_dietrich$parser_combinators$Combine$primitive = $elm$core$Basics$identity;
var $andre_dietrich$parser_combinators$Combine$Char$satisfy = function (pred) {
	return $andre_dietrich$parser_combinators$Combine$primitive(
		F2(
			function (state, stream) {
				var message = 'could not satisfy predicate';
				var _v0 = $elm$core$String$uncons(stream.aX);
				if (!_v0.$) {
					var _v1 = _v0.a;
					var h = _v1.a;
					var rest = _v1.b;
					return pred(h) ? _Utils_Tuple3(
						state,
						_Utils_update(
							stream,
							{aX: rest, ey: stream.ey + 1}),
						$elm$core$Result$Ok(h)) : _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								[message])));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								[message])));
				}
			}));
};
var $andre_dietrich$parser_combinators$Combine$Char$anyChar = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'expected any character',
	$andre_dietrich$parser_combinators$Combine$Char$satisfy(
		$elm$core$Basics$always(true)));
var $elm$core$String$fromList = _String_fromList;
var $andre_dietrich$parser_combinators$Combine$succeed = function (res) {
	return F2(
		function (state, stream) {
			return _Utils_Tuple3(
				state,
				stream,
				$elm$core$Result$Ok(res));
		});
};
var $andre_dietrich$parser_combinators$Combine$lazy = function (t) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		t,
		$andre_dietrich$parser_combinators$Combine$succeed(0));
};
var $andre_dietrich$parser_combinators$Combine$manyTill = F2(
	function (p, end_) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, end_, state, stream);
					if (!_v0.c.$) {
						var rstate = _v0.a;
						var rstream = _v0.b;
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$Result$Ok(
								$elm$core$List$reverse(acc)));
					} else {
						var estate = _v0.a;
						var estream = _v0.b;
						var ms = _v0.c.a;
						var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
						if (!_v1.c.$) {
							var rstate = _v1.a;
							var rstream = _v1.b;
							var res = _v1.c.a;
							var $temp$acc = A2($elm$core$List$cons, res, acc),
								$temp$state = rstate,
								$temp$stream = rstream;
							acc = $temp$acc;
							state = $temp$state;
							stream = $temp$stream;
							continue accumulate;
						} else {
							return _Utils_Tuple3(
								estate,
								estream,
								$elm$core$Result$Err(ms));
						}
					}
				}
			});
		return accumulate(_List_Nil);
	});
var $andre_dietrich$parser_combinators$Combine$string = function (s) {
	return F2(
		function (state, stream) {
			if (A2($elm$core$String$startsWith, s, stream.aX)) {
				var len = $elm$core$String$length(s);
				var pos = stream.ey + len;
				var rem = A2($elm$core$String$dropLeft, len, stream.aX);
				return _Utils_Tuple3(
					state,
					_Utils_update(
						stream,
						{aX: rem, ey: pos}),
					$elm$core$Result$Ok(s));
			} else {
				return _Utils_Tuple3(
					state,
					stream,
					$elm$core$Result$Err(
						_List_fromArray(
							['expected \"' + (s + '\"')])));
			}
		});
};
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $andre_dietrich$parser_combinators$Combine$regexer = F5(
	function (input, output, pat, state, stream) {
		var pattern = A2($elm$core$String$startsWith, '^', pat) ? pat : ('^' + pat);
		var _v0 = A3(
			$elm$regex$Regex$findAtMost,
			1,
			A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				input(pattern)),
			stream.aX);
		if (_v0.b && (!_v0.b.b)) {
			var match = _v0.a;
			var len = $elm$core$String$length(match.cR);
			var pos = stream.ey + len;
			var rem = A2($elm$core$String$dropLeft, len, stream.aX);
			return _Utils_Tuple3(
				state,
				_Utils_update(
					stream,
					{aX: rem, ey: pos}),
				$elm$core$Result$Ok(
					output(match)));
		} else {
			return _Utils_Tuple3(
				state,
				stream,
				$elm$core$Result$Err(
					_List_fromArray(
						['expected input matching Regexp /' + (pattern + '/')])));
		}
	});
var $andre_dietrich$parser_combinators$Combine$regex = A2(
	$elm$core$Basics$composeR,
	A2(
		$andre_dietrich$parser_combinators$Combine$regexer,
		$elm$regex$Regex$fromString,
		function ($) {
			return $.cR;
		}),
	$elm$core$Basics$identity);
var $andre_dietrich$parser_combinators$Combine$whitespace = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'optional whitespace',
	$andre_dietrich$parser_combinators$Combine$regex('\\s*'));
var $Garados007$elm_svg_parser$SvgParser$commentParser = $andre_dietrich$parser_combinators$Combine$lazy(
	function (_v0) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$map,
			A2($elm$core$Basics$composeL, $Garados007$elm_svg_parser$SvgParser$SvgComment, $elm$core$String$fromList),
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				A2(
					$Garados007$elm_svg_parser$SvgParser$andMapRight,
					$andre_dietrich$parser_combinators$Combine$whitespace,
					$andre_dietrich$parser_combinators$Combine$string('<!--')),
				A2(
					$andre_dietrich$parser_combinators$Combine$manyTill,
					$andre_dietrich$parser_combinators$Combine$Char$anyChar,
					$andre_dietrich$parser_combinators$Combine$string('-->'))));
	});
var $andre_dietrich$parser_combinators$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (!_v0.c.$) {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					if (_Utils_eq(stream, rstream)) {
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$List$reverse(acc));
					} else {
						var $temp$acc = A2($elm$core$List$cons, res, acc),
							$temp$state = rstate,
							$temp$stream = rstream;
						acc = $temp$acc;
						state = $temp$state;
						stream = $temp$stream;
						continue accumulate;
					}
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$List$reverse(acc));
				}
			}
		});
	return F2(
		function (state, stream) {
			var _v1 = A3(accumulate, _List_Nil, state, stream);
			var rstate = _v1.a;
			var rstream = _v1.b;
			var res = _v1.c;
			return _Utils_Tuple3(
				rstate,
				rstream,
				$elm$core$Result$Ok(res));
		});
};
var $Garados007$elm_svg_parser$SvgParser$Element = F3(
	function (name, attributes, children) {
		return {e1: attributes, a5: children, fA: name};
	});
var $andre_dietrich$parser_combinators$Combine$optional = F2(
	function (res, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			p,
			$andre_dietrich$parser_combinators$Combine$succeed(res));
	});
var $Garados007$elm_svg_parser$SvgParser$attributeParser = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	A2(
		$andre_dietrich$parser_combinators$Combine$optional,
		'',
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapLeft,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				$andre_dietrich$parser_combinators$Combine$string('=\"'),
				$andre_dietrich$parser_combinators$Combine$regex('[^\"]*')),
			$andre_dietrich$parser_combinators$Combine$string('\"'))),
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$elm$core$Tuple$pair,
		$andre_dietrich$parser_combinators$Combine$regex('[^=>/]+')));
var $andre_dietrich$parser_combinators$Combine$keep = F2(
	function (p1, p2) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			p1,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$pilatch$flip$Flip$flip($elm$core$Basics$always),
				p2));
	});
var $andre_dietrich$parser_combinators$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$andre_dietrich$parser_combinators$Combine$many(
				A2($andre_dietrich$parser_combinators$Combine$keep, p, sep)),
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$cons, p));
	});
var $andre_dietrich$parser_combinators$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			A2($andre_dietrich$parser_combinators$Combine$sepBy1, sep, p),
			$andre_dietrich$parser_combinators$Combine$succeed(_List_Nil));
	});
var $Garados007$elm_svg_parser$SvgParser$openingParser = A3(
	$Garados007$elm_svg_parser$SvgParser$flip,
	$andre_dietrich$parser_combinators$Combine$andMap,
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$andre_dietrich$parser_combinators$Combine$regex('[^/>\\s]+'),
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			F3(
				function (_v0, tagName, attributes) {
					return A3($Garados007$elm_svg_parser$SvgParser$Element, tagName, attributes, _List_Nil);
				}),
			$andre_dietrich$parser_combinators$Combine$string('<'))),
	A2(
		$Garados007$elm_svg_parser$SvgParser$andMapLeft,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			A2($andre_dietrich$parser_combinators$Combine$sepBy, $andre_dietrich$parser_combinators$Combine$whitespace, $Garados007$elm_svg_parser$SvgParser$attributeParser)),
		$andre_dietrich$parser_combinators$Combine$whitespace));
var $Garados007$elm_svg_parser$SvgParser$SvgText = function (a) {
	return {$: 1, a: a};
};
var $Garados007$elm_svg_parser$SvgParser$textParser = $andre_dietrich$parser_combinators$Combine$lazy(
	function (_v0) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$Garados007$elm_svg_parser$SvgParser$SvgText,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				$andre_dietrich$parser_combinators$Combine$whitespace,
				$andre_dietrich$parser_combinators$Combine$regex('[^<]+')));
	});
var $Garados007$elm_svg_parser$SvgParser$closingOrChildrenParser = function (element) {
	var childrenParser = A2(
		$andre_dietrich$parser_combinators$Combine$map,
		function (children) {
			return _Utils_update(
				element,
				{a5: children});
		},
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapLeft,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapLeft,
				A2(
					$Garados007$elm_svg_parser$SvgParser$andMapRight,
					A2(
						$Garados007$elm_svg_parser$SvgParser$andMapRight,
						$andre_dietrich$parser_combinators$Combine$whitespace,
						$andre_dietrich$parser_combinators$Combine$string('>')),
					$andre_dietrich$parser_combinators$Combine$many(
						$Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser())),
				$andre_dietrich$parser_combinators$Combine$whitespace),
			$andre_dietrich$parser_combinators$Combine$string('</' + (element.fA + '>'))));
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v2) {
			return $andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						A2(
						$Garados007$elm_svg_parser$SvgParser$andMapRight,
						A2(
							$Garados007$elm_svg_parser$SvgParser$andMapRight,
							$andre_dietrich$parser_combinators$Combine$whitespace,
							$andre_dietrich$parser_combinators$Combine$string('/>')),
						$andre_dietrich$parser_combinators$Combine$succeed(element)),
						childrenParser
					]));
		});
};
function $Garados007$elm_svg_parser$SvgParser$cyclic$elementParser() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v1) {
			return A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$Garados007$elm_svg_parser$SvgParser$SvgElement,
				A2(
					$andre_dietrich$parser_combinators$Combine$andThen,
					$Garados007$elm_svg_parser$SvgParser$closingOrChildrenParser,
					A2(
						$andre_dietrich$parser_combinators$Combine$andMap,
						$Garados007$elm_svg_parser$SvgParser$openingParser,
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$Garados007$elm_svg_parser$SvgParser$flip($elm$core$Basics$always),
							$andre_dietrich$parser_combinators$Combine$whitespace))));
		});
}
function $Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v0) {
			return $andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						$Garados007$elm_svg_parser$SvgParser$textParser,
						$Garados007$elm_svg_parser$SvgParser$commentParser,
						$Garados007$elm_svg_parser$SvgParser$cyclic$elementParser()
					]));
		});
}
var $Garados007$elm_svg_parser$SvgParser$elementParser = $Garados007$elm_svg_parser$SvgParser$cyclic$elementParser();
$Garados007$elm_svg_parser$SvgParser$cyclic$elementParser = function () {
	return $Garados007$elm_svg_parser$SvgParser$elementParser;
};
var $Garados007$elm_svg_parser$SvgParser$nodeParser = $Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser();
$Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser = function () {
	return $Garados007$elm_svg_parser$SvgParser$nodeParser;
};
var $andre_dietrich$parser_combinators$Combine$InputStream = F3(
	function (data, input, position) {
		return {bR: data, aX: input, ey: position};
	});
var $andre_dietrich$parser_combinators$Combine$initStream = function (s) {
	return A3($andre_dietrich$parser_combinators$Combine$InputStream, s, s, 0);
};
var $andre_dietrich$parser_combinators$Combine$runParser = F3(
	function (p, st, s) {
		var _v0 = A3(
			$andre_dietrich$parser_combinators$Combine$app,
			p,
			st,
			$andre_dietrich$parser_combinators$Combine$initStream(s));
		if (!_v0.c.$) {
			var state = _v0.a;
			var stream = _v0.b;
			var res = _v0.c.a;
			return $elm$core$Result$Ok(
				_Utils_Tuple3(state, stream, res));
		} else {
			var state = _v0.a;
			var stream = _v0.b;
			var ms = _v0.c.a;
			return $elm$core$Result$Err(
				_Utils_Tuple3(state, stream, ms));
		}
	});
var $Garados007$elm_svg_parser$SvgParser$xmlDeclarationParser = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$elm$core$String$fromList,
	A2(
		$Garados007$elm_svg_parser$SvgParser$andMapRight,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			$andre_dietrich$parser_combinators$Combine$string('<?xml')),
		A2(
			$andre_dietrich$parser_combinators$Combine$manyTill,
			$andre_dietrich$parser_combinators$Combine$Char$anyChar,
			$andre_dietrich$parser_combinators$Combine$string('?>'))));
var $Garados007$elm_svg_parser$SvgParser$parseToNode = function (input) {
	var _v0 = A3(
		$andre_dietrich$parser_combinators$Combine$runParser,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			A2($andre_dietrich$parser_combinators$Combine$optional, '', $Garados007$elm_svg_parser$SvgParser$xmlDeclarationParser),
			$Garados007$elm_svg_parser$SvgParser$nodeParser),
		_List_Nil,
		input);
	if (!_v0.$) {
		var _v1 = _v0.a;
		var svgNode = _v1.c;
		return $elm$core$Result$Ok(svgNode);
	} else {
		var _v2 = _v0.a;
		var stream = _v2.b;
		var errors = _v2.c;
		return $elm$core$Result$Err(
			A2($elm$core$String$join, ' or ', errors));
	}
};
var $Garados007$elm_svg_parser$SvgParser$parse = function (input) {
	var toHtml = function (svgNode) {
		if (!svgNode.$) {
			var element = svgNode.a;
			return (element.fA === 'svg') ? $elm$core$Result$Ok(
				A2(
					$elm$svg$Svg$svg,
					A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$toAttribute, element.e1),
					A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$nodeToSvg, element.a5))) : $elm$core$Result$Err('Top element is not svg');
		} else {
			return $elm$core$Result$Err('Top element is not svg');
		}
	};
	return A2(
		$elm$core$Result$andThen,
		toHtml,
		$Garados007$elm_svg_parser$SvgParser$parseToNode(input));
};
var $author$project$Render$Graphics$svg = F4(
	function (ount, acc, settings, block) {
		var id = block.g7;
		var args = block.gn;
		var _v0 = $Garados007$elm_svg_parser$SvgParser$parse(
			$author$project$Render$Graphics$getVerbatimContent(block));
		if (!_v0.$) {
			var html_ = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						{a4: 0, bb: 0, bf: 0, bh: 24}),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.eS))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(html_)
							]))
					]));
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text('SVG parse error'));
		}
	});
var $author$project$Render$Data$fontWidth = 10;
var $author$project$Render$Data$table = F4(
	function (count, acc, settings, block) {
		var id = block.g7;
		var args = block.gn;
		var properties = block.w;
		var renderRow = F3(
			function (rowNumber, widths_, cells_) {
				var totalWidth = $elm$core$List$sum(widths_) + 0;
				return (!rowNumber) ? A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(totalWidth))
						]),
					A3(
						$elm$core$List$map2,
						F2(
							function (cell, width) {
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(width)),
											$mdgriffith$elm_ui$Element$Font$underline
										]),
									$mdgriffith$elm_ui$Element$text(
										A3($elm$core$String$replace, '_', '', cell)));
							}),
						cells_,
						widths_)) : A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(totalWidth))
						]),
					A3(
						$elm$core$List$map2,
						F2(
							function (cell, width) {
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(width))
										]),
									$mdgriffith$elm_ui$Element$text(cell));
							}),
						cells_,
						widths_));
			});
		var data = A2($author$project$Render$Data$prepareTable, $author$project$Render$Data$fontWidth, block);
		var title = function () {
			var _v0 = data.eO;
			if (_v0.$ === 1) {
				return $mdgriffith$elm_ui$Element$none;
			} else {
				var title_ = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text(title_));
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a4: 18, bb: 36, bf: 0, bh: 18})
				]),
			A2(
				$elm$core$List$cons,
				title,
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (k, row) {
							return A3(renderRow, k, data.d$, row);
						}),
					data.eG)));
	});
var $author$project$Render$Graphics$tikz = F4(
	function (count, acc, settings, block) {
		var id = block.g7;
		var args = block.gn;
		var maybePair = function () {
			var _v2 = A2(
				$elm$core$String$split,
				'---',
				$author$project$Render$Graphics$getVerbatimContent(block));
			if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
				var a = _v2.a;
				var _v3 = _v2.b;
				var b = _v3.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(a, b));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		if (maybePair.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Graphics$red)
					]),
				$mdgriffith$elm_ui$Element$text('Something is wrong'));
		} else {
			var _v1 = maybePair.a;
			var imageData = _v1.a;
			var params = A2(
				$author$project$Render$Graphics$imageParameters,
				settings,
				$elm$core$String$words(imageData));
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.eS)),
						params.cZ,
						A2($mdgriffith$elm_ui$Element$paddingXY, 0, 18)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(params.eS),
								params.cZ
							]),
						{d4: params.d4, fV: params.f1}),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[params.cZ]),
						params.dY)
					]));
		}
	});
var $author$project$Render$Block$verbatimDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('math', $author$project$Render$Math$displayedMath),
			_Utils_Tuple2('equation', $author$project$Render$Math$equation),
			_Utils_Tuple2('aligned', $author$project$Render$Math$aligned),
			_Utils_Tuple2('code', $author$project$Render$Block$renderCode),
			_Utils_Tuple2('verse', $author$project$Render$Block$renderVerse),
			_Utils_Tuple2('verbatim', $author$project$Render$Block$renderVerbatim),
			_Utils_Tuple2('tabular', $author$project$Render$Tabular$render),
			_Utils_Tuple2('hide', $author$project$Render$Block$renderNothing),
			_Utils_Tuple2('texComment', $author$project$Render$Block$renderNothing),
			_Utils_Tuple2('docinfo', $author$project$Render$Block$renderNothing),
			_Utils_Tuple2('mathmacros', $author$project$Render$Block$renderNothing),
			_Utils_Tuple2('textmacros', $author$project$Render$Block$renderNothing),
			_Utils_Tuple2('datatable', $author$project$Render$Data$table),
			_Utils_Tuple2('chart', $author$project$Render$Data$chart),
			_Utils_Tuple2('svg', $author$project$Render$Graphics$svg),
			_Utils_Tuple2('quiver', $author$project$Render$Graphics$quiver),
			_Utils_Tuple2('image', $author$project$Render$Graphics$image2),
			_Utils_Tuple2('tikz', $author$project$Render$Graphics$tikz),
			_Utils_Tuple2('load-files', $author$project$Render$Block$renderNothing),
			_Utils_Tuple2('include', $author$project$Render$Block$renderNothing),
			_Utils_Tuple2('iframe', $author$project$Render$Block$renderIFrame)
		]));
var $author$project$Render$Block$renderVerbatimBlock = F4(
	function (count, acc, settings, block) {
		var name = block.fA;
		var error = block.fb;
		var indent = block.hb;
		var args = block.gn;
		var blockType = block.dW;
		var content = block.bM;
		var id = block.g7;
		if (content.$ === 1) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var str = content.a;
			if (name.$ === 1) {
				return A2($author$project$Render$Block$noSuchVerbatimBlock, 'name', str);
			} else {
				var functionName = name.a;
				var _v2 = A2($elm$core$Dict$get, functionName, $author$project$Render$Block$verbatimDict);
				if (_v2.$ === 1) {
					return A2($author$project$Render$Block$noSuchVerbatimBlock, functionName, str);
				} else {
					var f = _v2.a;
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								A2($author$project$Render$Block$selectedColor, id, settings)
							]),
						A4(f, count, acc, settings, block));
				}
			}
		}
	});
var $author$project$Render$Block$showError = F2(
	function (error_, x) {
		if (error_.$ === 1) {
			return x;
		} else {
			var error = error_.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_Nil,
				_List_fromArray(
					[
						x,
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
							]),
						$mdgriffith$elm_ui$Element$text(error.fb))
					]));
		}
	});
var $author$project$Render$Block$render = F4(
	function (count, acc, settings, block) {
		var name = block.fA;
		var indent = block.hb;
		var args = block.gn;
		var error = block.fb;
		var blockType = block.dW;
		var content = block.bM;
		var id = block.g7;
		switch (blockType.$) {
			case 0:
				return A4($author$project$Render$Block$renderParagraph, count, acc, settings, block);
			case 1:
				return A2(
					$author$project$Render$Block$showError,
					error,
					A4($author$project$Render$Block$renderOrdinaryBlock, count, acc, settings, block));
			default:
				return A2(
					$author$project$Render$Block$showError,
					error,
					A4($author$project$Render$Block$renderVerbatimBlock, count, acc, settings, block));
		}
	});
var $author$project$Scripta$API$renderSettings = function (ds) {
	return A4($author$project$Render$Settings$makeSettings, ds.h0, ds.h1, ds.hX, ds.iW);
};
var $author$project$Parser$Block$setName = F2(
	function (name, _v0) {
		var data = _v0;
		return _Utils_update(
			data,
			{
				fA: $elm$core$Maybe$Just(name)
			});
	});
var $author$project$Scripta$API$banner = F2(
	function (displaySettings, editRecord) {
		return A2(
			$elm$core$Maybe$withDefault,
			$mdgriffith$elm_ui$Element$none,
			A2(
				$elm$core$Maybe$map,
				A3(
					$author$project$Render$Block$render,
					displaySettings.I,
					editRecord.dR,
					$author$project$Scripta$API$renderSettings(displaySettings)),
				A2(
					$elm$core$Maybe$map,
					$author$project$Parser$Block$setName('banner_'),
					$author$project$Compiler$ASTTools$banner(editRecord.eQ))));
	});
var $author$project$Scripta$API$body = function (editRecord) {
	return editRecord.eQ;
};
var $author$project$Render$Settings$leftIndent = 18;
var $author$project$Render$Markup$unravel = F2(
	function (lang, tree) {
		var children = $zwilias$elm_rosetree$Tree$children(tree);
		if ($elm$core$List$isEmpty(children)) {
			return $zwilias$elm_rosetree$Tree$label(tree);
		} else {
			var root = $zwilias$elm_rosetree$Tree$label(tree);
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_Nil,
				_List_fromArray(
					[
						root,
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$paddingEach(
								{
									a4: 0,
									bb: (lang === 1) ? 0 : $author$project$Render$Settings$leftIndent,
									bf: 0,
									bh: $author$project$Render$Settings$topMarginForChildren
								})
							]),
						A2(
							$elm$core$List$map,
							$author$project$Render$Markup$unravel(lang),
							children))
					]));
		}
	});
var $author$project$Render$Markup$renderTree = F4(
	function (count, accumulator, settings, tree) {
		var blockName = A2(
			$elm$core$Maybe$withDefault,
			'---',
			$author$project$Parser$Block$getName(
				$zwilias$elm_rosetree$Tree$label(tree)));
		return A2($elm$core$List$member, blockName, $author$project$Parser$Settings$numberedBlockNames) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$italic]),
			A2(
				$elm$core$Basics$composeR,
				$zwilias$elm_rosetree$Tree$map(
					A3($author$project$Render$Block$render, count, accumulator, settings)),
				$author$project$Render$Markup$unravel(accumulator.fs))(tree)) : A2(
			$elm$core$Basics$composeR,
			$zwilias$elm_rosetree$Tree$map(
				A3($author$project$Render$Block$render, count, accumulator, settings)),
			$author$project$Render$Markup$unravel(accumulator.fs))(tree);
	});
var $author$project$Render$Markup$renderFromAST = F4(
	function (count, accumulator, settings, ast) {
		return A2(
			$elm$core$List$map,
			A3($author$project$Render$Markup$renderTree, count, accumulator, settings),
			ast);
	});
var $author$project$Scripta$API$renderBody = F3(
	function (count, settings, editRecord) {
		return A4(
			$author$project$Render$Markup$renderFromAST,
			count,
			editRecord.dR,
			settings,
			$author$project$Scripta$API$body(editRecord));
	});
var $author$project$Scripta$TOC$getHeadings = function (ast) {
	var flattened = $elm$core$List$concat(
		A2($elm$core$List$map, $zwilias$elm_rosetree$Tree$flatten, ast));
	var subtitle = $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$author$project$Parser$Block$getContent,
			A2($author$project$Compiler$ASTTools$filterBlocksOnName, 'subtitle', flattened)));
	var title = $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$author$project$Parser$Block$getContent,
			A2($author$project$Compiler$ASTTools$filterBlocksOnName, 'title', flattened)));
	return {eL: subtitle, eO: title};
};
var $author$project$Scripta$TOC$prepareFrontMatter = F4(
	function (count, acc, settings, ast) {
		var titleSize = $mdgriffith$elm_ui$Element$Font$size(
			$elm$core$Basics$round($author$project$Render$Settings$maxHeadingFontSize));
		var subtitleSize = $mdgriffith$elm_ui$Element$Font$size(
			$elm$core$Basics$round(0.7 * $author$project$Render$Settings$maxHeadingFontSize));
		var idAttr = A2($author$project$Render$Utility$elementAttribute, 'id', 'title');
		var headings = $author$project$Scripta$TOC$getHeadings(ast);
		var subtitle = A3(
			$elm$core$Basics$composeR,
			$elm$core$List$map(
				A3($author$project$Render$Elm$render, count, acc, settings)),
			$mdgriffith$elm_ui$Element$paragraph(
				_List_fromArray(
					[
						subtitleSize,
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.4, 0.4, 0.4))
					])),
			headings.eL);
		var title = A3(
			$elm$core$Basics$composeR,
			$elm$core$List$map(
				A3($author$project$Render$Elm$render, count, acc, settings)),
			$mdgriffith$elm_ui$Element$paragraph(
				_List_fromArray(
					[titleSize, idAttr])),
			headings.eO);
		return A2(
			$elm$core$List$cons,
			title,
			A2($elm$core$List$cons, subtitle, _List_Nil));
	});
var $author$project$Compiler$ASTTools$tableOfContents = F2(
	function (maximumLevel, ast) {
		return A2(
			$author$project$Compiler$ASTTools$filterBlocksOnName,
			'section',
			$elm$core$List$concat(
				A2($elm$core$List$map, $zwilias$elm_rosetree$Tree$flatten, ast)));
	});
var $author$project$Scripta$TOC$tocLevel = F2(
	function (k, _v0) {
		var args = _v0.gn;
		var _v1 = A2($elm_community$list_extra$List$Extra$getAt, 0, args);
		if (_v1.$ === 1) {
			return true;
		} else {
			var level = _v1.a;
			return _Utils_cmp(
				A2(
					$elm$core$Maybe$withDefault,
					4,
					$elm$core$String$toInt(level)),
				k) < 1;
		}
	});
var $author$project$Scripta$TOC$blockLabel = function (properties) {
	return A2(
		$elm$core$Maybe$withDefault,
		'??',
		A2($elm$core$Dict$get, 'label', properties));
};
var $author$project$Scripta$TOC$tocIndentAux = function (args) {
	var _v0 = $elm$core$List$head(args);
	if (_v0.$ === 1) {
		return 0;
	} else {
		var str = _v0.a;
		return function (x) {
			return 12 * (x - 1);
		}(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str)));
	}
};
var $author$project$Scripta$TOC$tocIndent = function (args) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{
			a4: 0,
			bb: $author$project$Scripta$TOC$tocIndentAux(args),
			bf: 0,
			bh: 0
		});
};
var $author$project$Scripta$TOC$viewTocItem = F4(
	function (count, acc, settings, _v0) {
		var args = _v0.gn;
		var content = _v0.bM;
		var lineNumber = _v0.eo;
		var properties = _v0.w;
		if (!content.$) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var exprs = content.a;
			var sectionNumber = function () {
				var _v2 = A2($elm_community$list_extra$List$Extra$getAt, 1, args);
				if ((!_v2.$) && (_v2.a === '-')) {
					return $mdgriffith$elm_ui$Element$none;
				} else {
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(
							$author$project$Scripta$TOC$blockLabel(properties) + '. '));
				}
			}();
			var label = A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$author$project$Scripta$TOC$tocIndent(args)
					]),
				A2(
					$elm$core$List$cons,
					sectionNumber,
					A2(
						$elm$core$List$map,
						A3($author$project$Render$Elm$render, count, acc, settings),
						exprs)));
			var id = $elm$core$String$fromInt(lineNumber);
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$Render$Msg$SelectId(id))
					]),
				A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8))
						]),
					{
						dB: label,
						f1: $author$project$Render$Utility$internalLink(id)
					}));
		}
	});
var $author$project$Scripta$TOC$prepareTOC = F5(
	function (maximumLevel, count, acc, settings, ast) {
		var titleSize = $mdgriffith$elm_ui$Element$Font$size(
			$elm$core$Basics$round($author$project$Render$Settings$maxHeadingFontSize));
		var subtitleSize = $mdgriffith$elm_ui$Element$Font$size(
			$elm$core$Basics$round(0.7 * $author$project$Render$Settings$maxHeadingFontSize));
		var spaceBelow = function (k) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						{a4: k, bb: 0, bf: 0, bh: 0})
					]),
				$mdgriffith$elm_ui$Element$text(' '));
		};
		var rawToc = A2(
			$elm$core$List$filter,
			$author$project$Scripta$TOC$tocLevel(maximumLevel),
			A2($author$project$Compiler$ASTTools$tableOfContents, maximumLevel, ast));
		var toc = A2(
			$elm$core$List$cons,
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$bold,
						$mdgriffith$elm_ui$Element$Font$size(18)
					]),
				$mdgriffith$elm_ui$Element$text('Contents')),
			A2(
				$elm$core$List$map,
				A3($author$project$Scripta$TOC$viewTocItem, count, acc, settings),
				rawToc));
		var idAttr = A2($author$project$Render$Utility$elementAttribute, 'id', 'title');
		var headings = $author$project$Scripta$TOC$getHeadings(ast);
		var subtitle = A3(
			$elm$core$Basics$composeR,
			$elm$core$List$map(
				A3($author$project$Render$Elm$render, count, acc, settings)),
			$mdgriffith$elm_ui$Element$paragraph(
				_List_fromArray(
					[
						subtitleSize,
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.4, 0.4, 0.4))
					])),
			headings.eL);
		var title = A3(
			$elm$core$Basics$composeR,
			$elm$core$List$map(
				A3($author$project$Render$Elm$render, count, acc, settings)),
			$mdgriffith$elm_ui$Element$paragraph(
				_List_fromArray(
					[titleSize, idAttr])),
			headings.eO);
		return ($elm$core$List$length(rawToc) < 2) ? A2(
			$elm$core$List$cons,
			title,
			A2($elm$core$List$cons, subtitle, _List_Nil)) : A2(
			$elm$core$List$cons,
			title,
			A2(
				$elm$core$List$cons,
				subtitle,
				A2(
					$elm$core$List$cons,
					spaceBelow(8),
					toc)));
	});
var $author$project$Scripta$TOC$view = F4(
	function (counter, acc, _v0, ast) {
		var _v1 = A2(
			$author$project$Compiler$ASTTools$filterBlocksOnName,
			'contents',
			$elm$core$List$concat(
				A2($elm$core$List$map, $zwilias$elm_rosetree$Tree$flatten, ast)));
		if (!_v1.b) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8),
						$mdgriffith$elm_ui$Element$paddingEach(
						{a4: 0, bb: 0, bf: 0, bh: 0})
					]),
				A4($author$project$Scripta$TOC$prepareFrontMatter, counter, acc, $author$project$Render$Settings$defaultSettings, ast));
		} else {
			var maximumLevel = function () {
				var _v2 = A2($elm$core$Dict$get, 'contentsdepth', acc.dA);
				if (!_v2.$) {
					var level = _v2.a;
					return A2(
						$elm$core$Maybe$withDefault,
						3,
						$elm$core$String$toInt(level));
				} else {
					return 3;
				}
			}();
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8),
						$mdgriffith$elm_ui$Element$paddingEach(
						{a4: 0, bb: 0, bf: 0, bh: 0})
					]),
				A5($author$project$Scripta$TOC$prepareTOC, maximumLevel, counter, acc, $author$project$Render$Settings$defaultSettings, ast));
		}
	});
var $author$project$Scripta$API$render = F2(
	function (displaySettings, editRecord) {
		var settings = $author$project$Scripta$API$renderSettings(displaySettings);
		return A2(
			$elm$core$List$cons,
			A2($author$project$Scripta$API$banner, displaySettings, editRecord),
			A2(
				$elm$core$List$cons,
				A4(
					$author$project$Scripta$TOC$view,
					displaySettings.I,
					editRecord.dR,
					$author$project$Scripta$API$renderSettings(displaySettings),
					editRecord.eQ),
				A3($author$project$Scripta$API$renderBody, displaySettings.I, settings, editRecord)));
	});
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.h_);
var $author$project$Main$settings = function (counter) {
	return {I: counter, hX: 0.8, h0: '--', h1: $elm$core$Maybe$Nothing, iW: 500};
};
var $author$project$Main$outputDisplay_ = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(18),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 1.0, 1.0, 1.0)),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(500)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(600)),
				A2($mdgriffith$elm_ui$Element$paddingXY, 16, 32),
				$mdgriffith$elm_ui$Element$scrollbarY,
				$author$project$Main$htmlId('scripta-output')
			]),
		A2(
			$elm$core$List$map,
			$mdgriffith$elm_ui$Element$map($author$project$Main$Render),
			A2(
				$author$project$Scripta$API$render,
				$author$project$Main$settings(model.cA),
				model.U)));
};
var $author$project$Main$displayRenderedText = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(8),
				$mdgriffith$elm_ui$Element$Font$size(14)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$author$project$Main$fontGray(0.9)
					]),
				$mdgriffith$elm_ui$Element$text('Rendered Text')),
				$author$project$Main$outputDisplay_(model)
			]));
};
var $author$project$Main$InputText = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Element$Input$Above = 2;
var $mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$labelAbove = $mdgriffith$elm_ui$Element$Input$Label(2);
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 6};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 1) {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position) {
				case 2:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dz),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 3:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dz),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 0:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dz),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dz),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$Behind = 5;
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 5, element);
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 1) {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 1) {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.gE);
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 6, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 8) {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 1) {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return true;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 1) {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (!label.$) {
		var loc = label.a;
		switch (loc) {
			case 0:
				return false;
			case 1:
				return false;
			case 2:
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {a4: -box.a4, bb: -box.bb, bf: -box.bf, bh: -box.bh};
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 1, a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 2:
				return true;
			case 1:
				return false;
			case 0:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 9:
				return _Utils_update(
					els,
					{
						e: A2($elm$core$List$cons, attr, els.e)
					});
			case 7:
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						p: A2($elm$core$List$cons, attr, els.p),
						aX: A2($elm$core$List$cons, attr, els.aX),
						e: A2($elm$core$List$cons, attr, els.e)
					}) : (stacked ? _Utils_update(
					els,
					{
						p: A2($elm$core$List$cons, attr, els.p)
					}) : _Utils_update(
					els,
					{
						e: A2($elm$core$List$cons, attr, els.e)
					}));
			case 8:
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						p: A2($elm$core$List$cons, attr, els.p),
						e: A2($elm$core$List$cons, attr, els.e)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						p: A2($elm$core$List$cons, attr, els.p),
						e: A2($elm$core$List$cons, attr, els.e)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						e: A2($elm$core$List$cons, attr, els.e)
					}) : _Utils_update(
					els,
					{
						e: A2($elm$core$List$cons, attr, els.e)
					})));
			case 6:
				return _Utils_update(
					els,
					{
						p: A2($elm$core$List$cons, attr, els.p)
					});
			case 5:
				return _Utils_update(
					els,
					{
						p: A2($elm$core$List$cons, attr, els.p)
					});
			case 4:
				switch (attr.b.$) {
					case 5:
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								p: A2($elm$core$List$cons, attr, els.p),
								aX: A2($elm$core$List$cons, attr, els.aX),
								e: A2($elm$core$List$cons, attr, els.e),
								cs: A2($elm$core$List$cons, attr, els.cs)
							});
					case 7:
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									aj: A2($elm$core$List$cons, attr, els.aj),
									e: A2($elm$core$List$cons, attr, els.e)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									aj: A2($elm$core$List$cons, attr, els.aj),
									aX: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.aX)),
									e: A2($elm$core$List$cons, reducedVerticalPadding, els.e)
								});
						}
					case 6:
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								aj: A2($elm$core$List$cons, attr, els.aj),
								e: A2($elm$core$List$cons, attr, els.e)
							});
					case 10:
						return _Utils_update(
							els,
							{
								aj: A2($elm$core$List$cons, attr, els.aj),
								e: A2($elm$core$List$cons, attr, els.e)
							});
					case 2:
						return _Utils_update(
							els,
							{
								p: A2($elm$core$List$cons, attr, els.p)
							});
					case 1:
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								p: A2($elm$core$List$cons, attr, els.p)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								e: A2($elm$core$List$cons, attr, els.e)
							});
				}
			case 0:
				return els;
			case 1:
				var a = attr.a;
				return _Utils_update(
					els,
					{
						aX: A2($elm$core$List$cons, attr, els.aX)
					});
			case 2:
				return _Utils_update(
					els,
					{
						aX: A2($elm$core$List$cons, attr, els.aX)
					});
			case 3:
				return _Utils_update(
					els,
					{
						e: A2($elm$core$List$cons, attr, els.e)
					});
			default:
				return _Utils_update(
					els,
					{
						aX: A2($elm$core$List$cons, attr, els.aX)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				aj: $elm$core$List$reverse(redist.aj),
				p: $elm$core$List$reverse(redist.p),
				aX: $elm$core$List$reverse(redist.aX),
				e: $elm$core$List$reverse(redist.e),
				cs: $elm$core$List$reverse(redist.cs)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{aj: _List_Nil, p: _List_Nil, aX: _List_Nil, e: _List_Nil, cs: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var left = _v0.bb;
	var bottom = _v0.a4;
	var right = _v0.bf;
	var top = _v0.bh;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.fB + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.hK)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.M, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.dB),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.M;
			if (!_v7.$) {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 7)) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						a4: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						bb: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						bf: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						bh: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{a4: 0, bb: 0, bf: 0, bh: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.M;
				if (!_v3.$) {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.M;
					if (!_v4.$) {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.hi)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.he),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.ik),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.hC)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.dB),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.ad),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.Z))
						]),
					redistributed.aX)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.M;
			if (_v0.$ === 1) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.ff),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.hh)
								])),
						redistributed.e),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.hg),
												redistributed.cs)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.ik === '') {
											var _v1 = textOptions.hL;
											if (_v1.$ === 1) {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.ik === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.hf)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.ik + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.ff),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.e,
										function () {
										var _v2 = textOptions.hL;
										if (_v2.$ === 1) {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.aj, textOptions.ik === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.gM),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.dB) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.p))),
			textOptions.dB,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$multiline = F2(
	function (attrs, multi) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{Z: $elm$core$Maybe$Nothing, ad: multi.ia, M: $mdgriffith$elm_ui$Element$Input$TextArea},
			attrs,
			{dB: multi.dB, hC: multi.hC, hL: multi.hL, ik: multi.ik});
	});
var $author$project$Main$inputText = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$multiline,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(500)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(600)),
				$mdgriffith$elm_ui$Element$Font$size(14),
				$author$project$Main$htmlId('input-text')
			]),
		{
			dB: A2(
				$mdgriffith$elm_ui$Element$Input$labelAbove,
				_List_fromArray(
					[
						$author$project$Main$fontGray(0.9)
					]),
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text('Source text'))),
			hC: $author$project$Main$InputText,
			hL: $elm$core$Maybe$Nothing,
			ia: false,
			ik: model.aX
		});
};
var $author$project$Main$mainColumnStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$centerX,
		$mdgriffith$elm_ui$Element$centerY,
		$author$project$Main$bgGray(0.4),
		A2($mdgriffith$elm_ui$Element$paddingXY, 20, 20)
	]);
var $author$project$Main$mainColumn = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		$author$project$Main$mainColumnStyle,
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(18),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(1200)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(650))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(18)
							]),
						_List_fromArray(
							[
								$author$project$Main$inputText(model),
								$author$project$Main$displayRenderedText(model),
								$author$project$Main$controls(model)
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(1200)),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								$mdgriffith$elm_ui$Element$Font$size(14)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(model.aY)
							]))
					]))
			]));
};
var $author$project$Main$noFocus = {gq: $elm$core$Maybe$Nothing, gw: $elm$core$Maybe$Nothing, h3: $elm$core$Maybe$Nothing};
var $author$project$Main$view = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			hI: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$focusStyle($author$project$Main$noFocus)
				])
		},
		_List_fromArray(
			[
				$author$project$Main$bgGray(0.2)
			]),
		$author$project$Main$mainColumn(model));
};
var $author$project$Main$main = $elm$browser$Browser$element(
	{hc: $author$project$Main$init, ih: $author$project$Main$subscriptions, iR: $author$project$Main$update, iU: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(
		{}))(0)}});}(this));